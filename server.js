async function processCommand(senderId, messageText) {
    const senderIdStr = String(senderId);
    
    if (!messageText || typeof messageText !== 'string') {
        return "ü§ñ Oh l√† l√† ! Message vide ! Tape /start ou /help pour commencer notre belle conversation ! üíï";
    }
    
    messageText = messageText.trim();
    
    // Gestion des demandes de continuation en priorit√© + SQLite
    if (isContinuationRequest(messageText)) {
        const truncatedData = truncatedMessages.get(senderIdStr);
        if (truncatedData) {
            const { fullMessage, lastSentPart } = truncatedData;
            
            // Trouver o√π on s'√©tait arr√™t√©
            const lastSentIndex = fullMessage.indexOf(lastSentPart) + lastSentPart.length;
            const remainingMessage = fullMessage.substring(lastSentIndex);
            
            if (remainingMessage.trim()) {
                const chunks = splitMessageIntoChunks(remainingMessage, 2000);
                const nextChunk = chunks[0];
                
                // Mettre √† jour le cache avec la nouvelle partie envoy√©e
                if (chunks.length > 1) {
                    const newTruncData = {
                        fullMessage: fullMessage,
                        lastSentPart: lastSentPart + nextChunk
                    };
                    truncatedMessages.set(senderIdStr, newTruncData);
                    
                    // Sauvegarder dans SQLite aussi
                    saveTruncatedToDb(senderIdStr, fullMessage, lastSentPart + nextChunk);
                    
                    // Ajouter un indicateur de continuation
                    const continuationMsg = nextChunk + "\n\nüìù *Tape \"continue\" pour la suite...*";
                    addToMemory(senderIdStr, 'user', messageText);
                    addToMemory(senderIdStr, 'assistant', continuationMsg);
                    saveDataImmediate();
                    return continuationMsg;
                } else {
                    // Message termin√©
                    truncatedMessages.delete(senderIdStr);
                    // Supprimer de SQLite aussi
                    if (db) {
                        db.run('DELETE FROM truncated_messages WHERE user_id = ?', [senderIdStr])
                          .catch(err => log.debug(`Erreur suppression SQLite: ${err.message}`));
                    }
                    
                    addToMemory(senderIdStr, 'user', messageText);
                    addToMemory(senderIdStr, 'assistant', nextChunk);
                    saveDataImmediate();
                    return nextChunk;
                }
            } else {
                // Plus rien √† envoyer
                truncatedMessages.delete(senderIdStr);
                // Supprimer de SQLite aussi
                if (db) {
                    db.run('DELETE FROM truncated_messages WHERE user_id = ?', [senderIdStr])
                      .catch(err => log.debug(`Erreur suppression SQLite: ${err.message}`));
                }
                
                const endMsg = "‚úÖ C'est tout ! Y a-t-il autre chose que je puisse faire pour toi ? üí´";
                addToMemory(senderIdStr, 'user', messageText);
                addToMemory(senderIdStr, 'assistant', endMsg);
                saveDataImmediate();
                return endMsg;
            }
        } else {
            // Pas de message tronqu√© en cours
            const noTruncMsg = "ü§î Il n'y a pas de message en cours √† continuer. Pose-moi une nouvelle question ! üí°";
            addToMemory(senderIdStr, 'user', messageText);
            addToMemory(senderIdStr, 'assistant', noTruncMsg);
            return noTruncMsg;
        }
    }
    
    if (!messageText.startsWith('/')) {
        if (COMMANDS.has('chat')) {
            return await COMMANDS.get('chat')(senderId, messageText, commandContext);
        }
        return "ü§ñ Coucou ! Tape /start ou /help pour d√©couvrir ce que je peux faire ! ‚ú®";
    }
    
    const parts = messageText.substring(1).split(' ');
    const command = parts[0].toLowerCase();
    const args = parts.slice(1).join(' ');
    
    if (COMMANDS.has(command)) {
        try {
            return await COMMANDS.get(command)(senderId, args, commandContext);
        } catch (error) {
            log.error(`‚ùå Erreur commande ${command}: ${error.message}`);
            return `üí• Oh non ! Petite erreur dans /${command} ! R√©essaie ou tape /help ! üíï`;
        }
    }
    
    return `‚ùì Oh ! La commande /${command} m'est inconnue ! Tape /help pour voir tout ce que je sais faire ! ‚ú®üíï`;
}

// === ROUTES EXPRESS ===

// Route d'accueil mise √† jour avec SQLite
app.get('/', async (req, res) => {
    try {
        const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
        const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
        const dbStats = await getDbStats();
        
        res.json({
            status: "ü§ñ NakamaBot v4.0 Amicale + Vision + GitHub + SQLite + Clans + Rank + Truncation Online ! üíñ",
            creator: "Durand",
            personality: "Super gentille et amicale, comme une tr√®s bonne amie",
            year: "2025",
            commands: COMMANDS.size,
            storage: {
                memory: {
                    users: userList.size,
                    conversations: userMemory.size,
                    images: userLastImage.size,
                    clans: clanCount,
                    users_with_exp: expDataCount,
                    truncated_messages: truncatedMessages.size
                },
                database: dbStats
            },
            version: "4.0 Amicale + Vision + GitHub + SQLite + Clans + Rank + Truncation",
            persistent_storage: {
                github: {
                    type: "GitHub API",
                    repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
                    enabled: Boolean(GITHUB_TOKEN && GITHUB_USERNAME),
                    auto_save: "Every 5 minutes"
                },
                database: {
                    type: "SQLite",
                    file: "nakamabot.db",
                    enabled: Boolean(db),
                    real_time: true
                }
            },
            features: [
                "G√©n√©ration d'images IA",
                "Transformation anime", 
                "Analyse d'images IA",
                "Chat intelligent et doux",
                "Syst√®me de clans persistant",
                "Syst√®me de ranking et exp√©rience",
                "Cartes de rang personnalis√©es",
                "Gestion intelligente des messages longs",
                "Continuation automatique des r√©ponses",
                "Base de donn√©es SQLite locale",
                "Broadcast admin",
                "Recherche 2025",
                "Stats r√©serv√©es admin",
                "Double sauvegarde (GitHub + SQLite)"
            ],
            last_update: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            status: "Error loading stats",
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Webhook Facebook Messenger
app.get('/webhook', (req, res) => {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];
    
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
        log.info('‚úÖ Webhook v√©rifi√©');
        res.status(200).send(challenge);
    } else {
        log.warning('‚ùå √âchec v√©rification webhook');
        res.status(403).send('Verification failed');
    }
});

// Webhook principal modifi√© - Ajout SQLite + exp√©rience et notifications de niveau
app.post('/webhook', async (req, res) => {
    try {
        const data = req.body;
        
        if (!data) {
            log.warning('‚ö†Ô∏è Aucune donn√©e re√ßue');
            return res.status(400).json({ error: "No data received" });
        }
        
        for (const entry of data.entry || []) {
            for (const event of entry.messaging || []) {
                const senderId = event.sender?.id;
                
                if (!senderId) {
                    continue;
                }
                
                const senderIdStr = String(senderId);
                
                if (event.message && !event.message.is_echo) {
                    const wasNewUser = !userList.has(senderIdStr);
                    userList.add(senderIdStr);
                    
                    // Sauvegarder l'utilisateur dans SQLite
                    if (wasNewUser) {
                        log.info(`üëã Nouvel utilisateur: ${senderId}`);
                        await saveUserToDb(senderIdStr);
                        saveDataImmediate();
                    } else {
                        // Mettre √† jour la derni√®re activit√©
                        await saveUserToDb(senderIdStr);
                    }
                    
                    if (event.message.attachments) {
                        for (const attachment of event.message.attachments) {
                            if (attachment.type === 'image') {
                                const imageUrl = attachment.payload?.url;
                                if (imageUrl) {
                                    userLastImage.set(senderIdStr, imageUrl);
                                    
                                    // Sauvegarder l'image dans SQLite
                                    await saveImageToDb(senderIdStr, imageUrl);
                                    
                                    log.info(`üì∏ Image re√ßue de ${senderId}`);
                                    
                                    addToMemory(senderId, 'user', '[Image envoy√©e]');
                                    
                                    // Ajouter de l'exp√©rience pour l'envoi d'image + SQLite
                                    if (rankCommand) {
                                        const expResult = rankCommand.addExp(senderId, 2); // 2 XP pour une image
                                        
                                        if (expResult.levelUp) {
                                            log.info(`üéâ ${senderId} a atteint le niveau ${expResult.newLevel} (image) !`);
                                            // Sauvegarder l'exp√©rience dans SQLite
                                            await saveUserExpToDb(senderIdStr, expResult.totalExp, expResult.newLevel);
                                        }
                                    }
                                    
                                    saveDataImmediate();
                                    
                                    const response = "üì∏ Super ! J'ai bien re√ßu ton image ! ‚ú®\n\nüé≠ Tape /anime pour la transformer en style anime !\nüëÅÔ∏è Tape /vision pour que je te dise ce que je vois !\n\nüíï Ou continue √† me parler normalement !";
                                    
                                    const sendResult = await sendMessage(senderId, response);
                                    if (sendResult.success) {
                                        addToMemory(senderId, 'assistant', response);
                                    }
                                    continue;
                                }
                            }
                        }
                    }
                    
                    const messageText = event.message.text?.trim();
                    
                    if (messageText) {
                        log.info(`üì® Message de ${senderId}: ${messageText.substring(0, 50)}...`);
                        
                        // Ajouter de l'exp√©rience pour chaque message + SQLite
                        if (messageText && rankCommand) {
                            const expResult = rankCommand.addExp(senderId, 1);
                            
                            // Notifier si l'utilisateur a mont√© de niveau
                            if (expResult.levelUp) {
                                log.info(`üéâ ${senderId} a atteint le niveau ${expResult.newLevel} !`);
                                // Sauvegarder l'exp√©rience dans SQLite
                                await saveUserExpToDb(senderIdStr, expResult.totalExp, expResult.newLevel);
                            }
                            
                            // Sauvegarder les donn√©es mises √† jour
                            saveDataImmediate();
                        }
                        
                        const response = await processCommand(senderId, messageText);
                        
                        if (response) {
                            if (typeof response === 'object' && response.type === 'image') {
                                const sendResult = await sendImageMessage(senderId, response.url, response.caption);
                                
                                if (sendResult.success) {
                                    log.info(`‚úÖ Image envoy√©e √† ${senderId}`);
                                } else {
                                    log.warning(`‚ùå √âchec envoi image √† ${senderId}`);
                                    const fallbackMsg = "üé® Image cr√©√©e avec amour mais petite erreur d'envoi ! R√©essaie ! üíï";
                                    const fallbackResult = await sendMessage(senderId, fallbackMsg);
                                    if (fallbackResult.success) {
                                        addToMemory(senderId, 'assistant', fallbackMsg);
                                    }
                                }
                            } else if (typeof response === 'string') {
                                const sendResult = await sendMessage(senderId, response);
                                
                                if (sendResult.success) {
                                    log.info(`‚úÖ R√©ponse envoy√©e √† ${senderId}`);
                                } else {
                                    log.warning(`‚ùå √âchec envoi √† ${senderId}`);
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (error) {
        log.error(`‚ùå Erreur webhook: ${error.message}`);
        return res.status(500).json({ error: `Webhook error: ${error.message}` });
    }
    
    res.status(200).json({ status: "ok" });
});

// Routes GitHub et administration
app.post('/create-repo', async (req, res) => {
    try {
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
            return res.status(400).json({
                success: false,
                error: "GITHUB_TOKEN ou GITHUB_USERNAME manquant"
            });
        }

        const repoCreated = await createGitHubRepo();
        
        if (repoCreated) {
            res.json({
                success: true,
                message: "Repository GitHub cr√©√© avec succ√®s !",
                repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
                url: `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`,
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(500).json({
                success: false,
                error: "Impossible de cr√©er le repository"
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

app.get('/test-github', async (req, res) => {
    try {
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
            return res.status(400).json({
                success: false,
                error: "Configuration GitHub manquante"
            });
        }

        const repoUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}`;
        const response = await axios.get(repoUrl, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            timeout: 10000
        });

        res.json({
            success: true,
            message: "Connexion GitHub OK !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            status: response.status,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        res.status(error.response?.status || 500).json({
            success: false,
            error: error.message,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString()
        });
    }
});

app.post('/force-save', async (req, res) => {
    try {
        await saveDataToGitHub();
        const dbStats = await getDbStats();
        
        res.json({
            success: true,
            message: "Donn√©es sauvegard√©es avec succ√®s sur GitHub !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString(),
            stats: {
                memory: {
                    users: userList.size,
                    conversations: userMemory.size,
                    images: userLastImage.size,
                    truncated_messages: truncatedMessages.size
                },
                database: dbStats
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

app.post('/reload-data', async (req, res) => {
    try {
        await loadDataFromGitHub();
        await loadDataFromDb();
        const dbStats = await getDbStats();
        
        res.json({
            success: true,
            message: "Donn√©es recharg√©es avec succ√®s depuis GitHub et SQLite !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString(),
            stats: {
                memory: {
                    users: userList.size,
                    conversations: userMemory.size,
                    images: userLastImage.size,
                    truncated_messages: truncatedMessages.size
                },
                database: dbStats
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Nouvelle route: Statistiques de la base de donn√©es SQLite
app.get('/db-stats', async (req, res) => {
    try {
        if (!db) {
            return res.status(503).json({
                success: false,
                error: "Base de donn√©es SQLite non initialis√©e"
            });
        }

        const stats = await getDbStats();
        
        // Statistiques d√©taill√©es
        const detailedStats = {
            ...stats,
            users_by_month: await db.all(`
                SELECT 
                    substr(first_seen, 1, 7) as month,
                    COUNT(*) as count
                FROM users 
                GROUP BY substr(first_seen, 1, 7) 
                ORDER BY month DESC 
                LIMIT 12
            `),
            top_active_users: await db.all(`
                SELECT 
                    u.id,
                    u.message_count,
                    u.image_count,
                    u.last_active
                FROM users u
                WHERE u.message_count > 0
                ORDER BY u.message_count DESC
                LIMIT 10
            `),
            recent_activity: await db.all(`
                SELECT 
                    DATE(timestamp) as date,
                    COUNT(*) as message_count
                FROM conversations
                WHERE timestamp >= datetime('now', '-30 days')
                GROUP BY DATE(timestamp)
                ORDER BY date DESC
            `)
        };

        res.json({
            success: true,
            database: "SQLite",
            file: "nakamabot.db",
            stats: detailedStats,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Statistiques publiques mises √† jour avec SQLite + exp√©rience et troncature
app.get('/stats', async (req, res) => {
    try {
        const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
        const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
        const dbStats = await getDbStats();
        
        res.json({
            memory_stats: {
                users_count: userList.size,
                conversations_count: userMemory.size,
                images_stored: userLastImage.size,
                clans_total: clanCount,
                users_with_exp: expDataCount,
                truncated_messages: truncatedMessages.size,
                commands_available: COMMANDS.size
            },
            database_stats: dbStats,
            version: "4.0 Amicale + Vision + GitHub + SQLite + Clans + Rank + Truncation",
            creator: "Durand",
            personality: "Super gentille et amicale, comme une tr√®s bonne amie",
            year: 2025,
            storage: {
                github: {
                    type: "GitHub API",
                    repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
                    persistent: Boolean(GITHUB_TOKEN && GITHUB_USERNAME),
                    auto_save_interval: "5 minutes"
                },
                database: {
                    type: "SQLite",
                    file: "nakamabot.db",
                    real_time: Boolean(db)
                }
            },
            features: [
                "AI Image Generation",
                "Anime Transformation", 
                "AI Image Analysis",
                "Friendly Chat",
                "Persistent Clan System",
                "User Ranking System",
                "Experience & Levels",
                "Smart Message Truncation",
                "Message Continuation",
                "SQLite Local Database",
                "Real-time Data Storage",
                "Admin Stats",
                "GitHub Persistent Storage"
            ]
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Sant√© du bot mise √† jour avec SQLite + exp√©rience et troncature
app.get('/health', async (req, res) => {
    try {
        const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
        const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
        const dbStats = await getDbStats();
        
        const healthStatus = {
            status: "healthy",
            personality: "Super gentille et amicale, comme une tr√®s bonne amie",
            services: {
                ai: Boolean(MISTRAL_API_KEY),
                vision: Boolean(MISTRAL_API_KEY),
                facebook: Boolean(PAGE_ACCESS_TOKEN),
                github_storage: Boolean(GITHUB_TOKEN && GITHUB_USERNAME),
                sqlite_database: Boolean(db),
                ranking_system: Boolean(rankCommand),
                message_truncation: true
            },
            data: {
                memory: {
                    users: userList.size,
                    conversations: userMemory.size,
                    images_stored: userLastImage.size,
                    clans_total: clanCount,
                    users_with_exp: expDataCount,
                    truncated_messages: truncatedMessages.size,
                    commands_loaded: COMMANDS.size
                },
                database: dbStats
            },
            version: "4.0 Amicale + Vision + GitHub + SQLite + Clans + Rank + Truncation",
            creator: "Durand",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            database_file: "nakamabot.db",
            timestamp: new Date().toISOString()
        };
        
        const issues = [];
        if (!MISTRAL_API_KEY) issues.push("Cl√© IA manquante");
        if (!PAGE_ACCESS_TOKEN) issues.push("Token Facebook manquant");
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) issues.push("Configuration GitHub manquante");
        if (!db) issues.push("Base de donn√©es SQLite non initialis√©e");
        if (COMMANDS.size === 0) issues.push("Aucune commande charg√©e");
        if (!rankCommand) issues.push("Syst√®me de ranking non charg√©");
        
        if (issues.length > 0) {
            healthStatus.status = "degraded";
            healthStatus.issues = issues;
        }
        
        const statusCode = healthStatus.status === "healthy" ? 200 : 503;
        res.status(statusCode).json(healthStatus);
    } catch (error) {
        res.status(503).json({
            status: "error",
            error: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// Serveur de fichiers statiques pour les images temporaires
app.use('/temp', express.static(path.join(__dirname, 'temp')));

// Nettoyer les messages tronqu√©s
app.post('/clear-truncated', async (req, res) => {
    const clearedCount = truncatedMessages.size;
    truncatedMessages.clear();
    
    // Nettoyer aussi dans SQLite
    if (db) {
        try {
            await db.run('DELETE FROM truncated_messages');
            log.info(`üßπ ${clearedCount} messages tronqu√©s supprim√©s de SQLite`);
        } catch (error) {
            log.error(`‚ùå Erreur nettoyage SQLite: ${error.message}`);
        }
    }
    
    saveDataImmediate();
    
    res.json({
        success: true,
        message: `${clearedCount} conversations tronqu√©es nettoy√©es (m√©moire + SQLite)`,
        timestamp: new Date().toISOString()
    });
});

// D√©marrage modifi√© avec SQLite + syst√®me d'exp√©rience et troncature
async function startBot() {
    log.info("üöÄ D√©marrage NakamaBot v4.0 Amicale + Vision + GitHub + SQLite + Clans + Rank + Truncation");
    log.info("üíñ Personnalit√© super gentille et amicale, comme une tr√®s bonne amie");
    log.info("üë®‚Äçüíª Cr√©√©e par Durand");
    log.info("üìÖ Ann√©e: 2025");

    // Initialiser SQLite en premier
    log.info("üóÉÔ∏è Initialisation de la base de donn√©es SQLite...");
    const dbInitialized = await initializeDatabase();
    if (!dbInitialized) {
        log.error("‚ùå Impossible d'initialiser SQLite - Arr√™t du bot");
        process.exit(1);
    }

    // Mettre √† jour le contexte des commandes avec la DB
    commandContext.db = db;

    log.info("üì• Chargement des donn√©es depuis SQLite...");
    await loadDataFromDb();

    log.info("üì• Chargement des donn√©es depuis GitHub...");
    await loadDataFromGitHub();

    loadCommands();

    if (rankCommand) {
        log.info("üéØ Syst√®me d'exp√©rience d√©tect√© et pr√™t !");
    } else {
        log.warning("‚ö†Ô∏è Commande rank non trouv√©e - Syst√®me d'exp√©rience d√©sactiv√©");
    }

    const missingVars = [];
    if (!PAGE_ACCESS_TOKEN) missingVars.push("PAGE_ACCESS_TOKEN");
    if (!MISTRAL_API_KEY) missingVars.push("MISTRAL_API_KEY");
    if (!GITHUB_TOKEN) missingVars.push("GITHUB_TOKEN");
    if (!GITHUB_USERNAME) missingVars.push("GITHUB_USERNAME");

    if (missingVars.length > 0) {
        log.error(`‚ùå Variables manquantes: ${missingVars.join(', ')}`);
    } else {
        log.info("‚úÖ Configuration compl√®te OK");
    }

    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
    const dbStats = await getDbStats();

    log.info(`üé® ${COMMANDS.size} commandes disponibles`);
    log.info(`üë• ${userList.size} utilisateurs en m√©moire`);
    log.info(`üí¨ ${userMemory.size} conversations en m√©moire`);
    log.info(`üñºÔ∏è ${userLastImage.size} images en m√©moire`);
    log.info(`üè∞ ${clanCount} clans en m√©moire`);
    log.info(`‚≠ê ${expDataCount} utilisateurs avec exp√©rience`);
    log.info(`üìù ${truncatedMessages.size} conversations tronqu√©es en cours`);
    log.info(`üîê ${ADMIN_IDS.size} administrateurs`);
    log.info(`üìÇ Repository: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
    log.info(`üóÉÔ∏è Base SQLite: ${dbStats.total_users_db || 0} users, ${dbStats.total_messages_db || 0} messages`);
    log.info(`üåê Serveur sur le port ${PORT}`);
    
    startAutoSave();
    
    log.info("üéâ NakamaBot Amicale + Vision + GitHub + SQLite + Clans + Rank + Truncation pr√™te √† aider avec gentillesse !");

    app.listen(PORT, () => {
        log.info(`üåê Serveur d√©marr√© sur le port ${PORT}`);
        log.info("üíæ Sauvegarde automatique GitHub activ√©e");
        log.info("üóÉÔ∏è Base de donn√©es SQLite pr√™te");
        log.info("üìè Gestion intelligente des messages longs activ√©e");
        log.info(`üìä Dashboard: https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`);
    });
}

// Fonction de nettoyage lors de l'arr√™t
async function gracefulShutdown() {
    log.info("üõë Arr√™t du bot avec tendresse...");
    
    if (saveInterval) {
        clearInterval(saveInterval);
        log.info("‚èπÔ∏è Sauvegarde automatique arr√™t√©e");
    }
    
    try {
        log.info("üíæ Sauvegarde finale des donn√©es sur GitHub...");
        await saveDataToGitHub();
        log.info("‚úÖ Donn√©es sauvegard√©es avec succ√®s !");
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde finale: ${error.message}`);
    }
    
    // Nettoyage final des messages tronqu√©s
    const truncatedCount = truncatedMessages.size;
    if (truncatedCount > 0) {
        log.info(`üßπ Nettoyage de ${truncatedCount} conversations tronqu√©es en cours...`);
        truncatedMessages.clear();
        
        if (db) {
            try {
                await db.run('DELETE FROM truncated_messages');
                log.info("üóÉÔ∏è Messages tronqu√©s nettoy√©s de SQLite");
            } catch (error) {
                log.debug(`Erreur nettoyage SQLite: ${error.message}`);
            }
        }
    }
    
    // Fermer la connexion SQLite proprement
    if (db) {
        try {
            await db.close();
            log.info("üóÉÔ∏è Connexion SQLite ferm√©e proprement");
        } catch (error) {
            log.debug(`Erreur fermeture SQLite: ${error.message}`);
        }
    }
    
    log.info("üëã Au revoir ! Donn√©es sauvegard√©es sur GitHub et SQLite !");
    log.info(`üìÇ Repository: https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`);
    process.exit(0);
}

// Gestion propre de l'arr√™t
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

process.on('uncaughtException', async (error) => {
    log.error(`‚ùå Erreur non captur√©e: ${error.message}`);
    await gracefulShutdown();
});

process.on('unhandledRejection', async (reason, promise) => {
    log.error(`‚ùå Promesse rejet√©e: ${reason}`);
    await gracefulShutdown();
});

// Nettoyage p√©riodique: Nettoyer les messages tronqu√©s anciens (plus de 24h)
setInterval(async () => {
    const now = Date.now();
    const oneDayMs = 24 * 60 * 60 * 1000;
    let cleanedCount = 0;
    
    // Nettoyer en m√©moire
    for (const [userId, data] of truncatedMessages.entries()) {
        if (!data.timestamp || (now - new Date(data.timestamp).getTime() > oneDayMs)) {
            truncatedMessages.delete(userId);
            cleanedCount++;
        }
    }
    
    // Nettoyer aussi dans SQLite
    if (db && cleanedCount > 0) {
        try {
            const result = await db.run(
                `DELETE FROM truncated_messages WHERE timestamp < datetime('now', '-1 day')`
            );
            log.info(`üßπ Nettoyage automatique SQLite: ${result.changes} messages tronqu√©s expir√©s supprim√©s`);
        } catch (error) {
            log.debug(`Erreur nettoyage SQLite automatique: ${error.message}`);
        }
    }
    
    if (cleanedCount > 0) {
        log.info(`üßπ Nettoyage automatique: ${cleanedCount} conversations tronqu√©es expir√©es supprim√©es`);
        saveDataImmediate();
    }
}, 60 * 60 * 1000);

// D√©marrer le bot
startBot().catch(error => {
    log.error(`‚ùå Erreur d√©marrage: ${error.message}`);
    process.exit(1);
});const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');

const app = express();
app.use(bodyParser.json());

// Configuration 
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "nakamaverifytoken";
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN || "";
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY || "";
const GITHUB_TOKEN = process.env.GITHUB_TOKEN || "";
const GITHUB_USERNAME = process.env.GITHUB_USERNAME || "";
const GITHUB_REPO = process.env.GITHUB_REPO || "nakamabot-data";
const PORT = process.env.PORT || 5000;
const ADMIN_IDS = new Set(
    (process.env.ADMIN_IDS || "").split(",").map(id => id.trim()).filter(id => id)
);

// M√©moire du bot (stockage local temporaire + sauvegarde permanente GitHub + SQLite)
const userMemory = new Map();
const userList = new Set();
const userLastImage = new Map();
const clanData = new Map(); // Stockage des donn√©es sp√©cifiques aux commandes

// R√©f√©rence vers la commande rank pour le syst√®me d'exp√©rience
let rankCommand = null;

// Gestion des messages tronqu√©s avec chunks
const truncatedMessages = new Map(); // senderId -> { fullMessage, lastSentPart }

// Instance de base de donn√©es SQLite
let db = null;

// Configuration des logs
const log = {
    info: (msg) => console.log(`${new Date().toISOString()} - INFO - ${msg}`),
    error: (msg) => console.error(`${new Date().toISOString()} - ERROR - ${msg}`),
    warning: (msg) => console.warn(`${new Date().toISOString()} - WARNING - ${msg}`),
    debug: (msg) => console.log(`${new Date().toISOString()} - DEBUG - ${msg}`)
};

// === GESTION DE LA BASE DE DONN√âES SQLITE ===

async function initializeDatabase() {
    try {
        const dbPath = path.join(__dirname, 'nakamabot.db');
        
        db = await open({
            filename: dbPath,
            driver: sqlite3.Database
        });

        log.info(`üìÇ Base de donn√©es SQLite initialis√©e: ${dbPath}`);

        // Cr√©er les tables si elles n'existent pas
        await db.exec(`
            CREATE TABLE IF NOT EXISTS users (
                id TEXT PRIMARY KEY,
                first_seen TEXT,
                last_active TEXT,
                message_count INTEGER DEFAULT 0,
                image_count INTEGER DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE IF NOT EXISTS conversations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                message_type TEXT,
                content TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            );

            CREATE TABLE IF NOT EXISTS images (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id TEXT,
                image_url TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (id)
            );

            CREATE TABLE IF NOT EXISTS user_experience (
                user_id TEXT PRIMARY KEY,
                experience INTEGER DEFAULT 0,
                level INTEGER DEFAULT 1,
                last_exp_gain TEXT,
                total_messages INTEGER DEFAULT 0,
                FOREIGN KEY (user_id) REFERENCES users (id)
            );

            CREATE TABLE IF NOT EXISTS clans (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE,
                description TEXT,
                creator_id TEXT,
                member_count INTEGER DEFAULT 0,
                created_at TEXT DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE IF NOT EXISTS clan_members (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                clan_id INTEGER,
                user_id TEXT,
                role TEXT DEFAULT 'member',
                joined_at TEXT DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (clan_id) REFERENCES clans (id),
                FOREIGN KEY (user_id) REFERENCES users (id)
            );

            CREATE TABLE IF NOT EXISTS truncated_messages (
                user_id TEXT PRIMARY KEY,
                full_message TEXT,
                last_sent_part TEXT,
                timestamp TEXT DEFAULT CURRENT_TIMESTAMP
            );

            CREATE TABLE IF NOT EXISTS bot_data (
                key TEXT PRIMARY KEY,
                value TEXT,
                updated_at TEXT DEFAULT CURRENT_TIMESTAMP
            );
        `);

        log.info("‚úÖ Tables SQLite cr√©√©es/v√©rifi√©es avec succ√®s");
        return true;
    } catch (error) {
        log.error(`‚ùå Erreur initialisation SQLite: ${error.message}`);
        return false;
    }
}

// Sauvegarder un utilisateur dans SQLite
async function saveUserToDb(userId) {
    if (!db) return;
    
    try {
        const now = new Date().toISOString();
        await db.run(
            `INSERT OR IGNORE INTO users (id, first_seen, last_active) VALUES (?, ?, ?)`,
            [userId, now, now]
        );
        
        await db.run(
            `UPDATE users SET last_active = ? WHERE id = ?`,
            [now, userId]
        );
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde utilisateur SQLite: ${error.message}`);
    }
}

// Sauvegarder une conversation dans SQLite
async function saveConversationToDb(userId, messageType, content) {
    if (!db) return;
    
    try {
        const now = new Date().toISOString();
        await db.run(
            `INSERT INTO conversations (user_id, message_type, content, timestamp) VALUES (?, ?, ?, ?)`,
            [userId, messageType, content.substring(0, 2000), now]
        );
        
        // Incr√©menter le compteur de messages
        if (messageType === 'user') {
            await db.run(
                `UPDATE users SET message_count = message_count + 1 WHERE id = ?`,
                [userId]
            );
        }
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde conversation SQLite: ${error.message}`);
    }
}

// Sauvegarder une image dans SQLite
async function saveImageToDb(userId, imageUrl) {
    if (!db) return;
    
    try {
        const now = new Date().toISOString();
        await db.run(
            `INSERT INTO images (user_id, image_url, timestamp) VALUES (?, ?, ?)`,
            [userId, imageUrl, now]
        );
        
        // Incr√©menter le compteur d'images
        await db.run(
            `UPDATE users SET image_count = image_count + 1 WHERE id = ?`,
            [userId]
        );
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde image SQLite: ${error.message}`);
    }
}

// Sauvegarder l'exp√©rience utilisateur dans SQLite
async function saveUserExpToDb(userId, experience, level) {
    if (!db) return;
    
    try {
        const now = new Date().toISOString();
        await db.run(
            `INSERT OR REPLACE INTO user_experience (user_id, experience, level, last_exp_gain, total_messages) 
             VALUES (?, ?, ?, ?, (SELECT COALESCE(message_count, 0) FROM users WHERE id = ?))`,
            [userId, experience, level, now, userId]
        );
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde exp√©rience SQLite: ${error.message}`);
    }
}

// Sauvegarder un message tronqu√© dans SQLite
async function saveTruncatedToDb(userId, fullMessage, lastSentPart) {
    if (!db) return;
    
    try {
        const now = new Date().toISOString();
        await db.run(
            `INSERT OR REPLACE INTO truncated_messages (user_id, full_message, last_sent_part, timestamp) VALUES (?, ?, ?, ?)`,
            [userId, fullMessage, lastSentPart, now]
        );
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde message tronqu√© SQLite: ${error.message}`);
    }
}

// Charger les donn√©es depuis SQLite
async function loadDataFromDb() {
    if (!db) return;
    
    try {
        // Charger les utilisateurs
        const users = await db.all('SELECT id FROM users');
        users.forEach(user => userList.add(user.id));
        log.info(`‚úÖ ${users.length} utilisateurs charg√©s depuis SQLite`);
        
        // Charger les conversations r√©centes (derni√®res 8 par utilisateur)
        const conversations = await db.all(`
            SELECT user_id, message_type, content, timestamp 
            FROM (
                SELECT user_id, message_type, content, timestamp,
                       ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY timestamp DESC) as rn
                FROM conversations
            ) WHERE rn <= 8
            ORDER BY user_id, timestamp ASC
        `);
        
        const conversationMap = new Map();
        conversations.forEach(conv => {
            if (!conversationMap.has(conv.user_id)) {
                conversationMap.set(conv.user_id, []);
            }
            conversationMap.get(conv.user_id).push({
                type: conv.message_type,
                content: conv.content,
                timestamp: conv.timestamp
            });
        });
        
        conversationMap.forEach((convs, userId) => {
            userMemory.set(userId, convs);
        });
        
        log.info(`‚úÖ ${conversationMap.size} conversations charg√©es depuis SQLite`);
        
        // Charger les derni√®res images
        const images = await db.all(`
            SELECT user_id, image_url 
            FROM (
                SELECT user_id, image_url,
                       ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY timestamp DESC) as rn
                FROM images
            ) WHERE rn = 1
        `);
        
        images.forEach(img => {
            userLastImage.set(img.user_id, img.image_url);
        });
        
        log.info(`‚úÖ ${images.length} derni√®res images charg√©es depuis SQLite`);
        
        // Charger les messages tronqu√©s
        const truncated = await db.all('SELECT user_id, full_message, last_sent_part FROM truncated_messages');
        truncated.forEach(trunc => {
            truncatedMessages.set(trunc.user_id, {
                fullMessage: trunc.full_message,
                lastSentPart: trunc.last_sent_part
            });
        });
        
        log.info(`‚úÖ ${truncated.length} messages tronqu√©s charg√©s depuis SQLite`);
        
    } catch (error) {
        log.error(`‚ùå Erreur chargement SQLite: ${error.message}`);
    }
}

// Obtenir des statistiques depuis SQLite
async function getDbStats() {
    if (!db) return {};
    
    try {
        const stats = {};
        
        const userCount = await db.get('SELECT COUNT(*) as count FROM users');
        stats.total_users_db = userCount.count;
        
        const messageCount = await db.get('SELECT COUNT(*) as count FROM conversations');
        stats.total_messages_db = messageCount.count;
        
        const imageCount = await db.get('SELECT COUNT(*) as count FROM images');
        stats.total_images_db = imageCount.count;
        
        const expCount = await db.get('SELECT COUNT(*) as count FROM user_experience WHERE level > 1');
        stats.users_with_levels_db = expCount.count;
        
        const truncatedCount = await db.get('SELECT COUNT(*) as count FROM truncated_messages');
        stats.truncated_messages_db = truncatedCount.count;
        
        return stats;
    } catch (error) {
        log.error(`‚ùå Erreur statistiques SQLite: ${error.message}`);
        return {};
    }
}

// === FONCTIONS DE GESTION DES MESSAGES TRONQU√âS ===

function splitMessageIntoChunks(text, maxLength = 2000) {
    if (!text || text.length <= maxLength) {
        return [text];
    }
    
    const chunks = [];
    let currentChunk = '';
    const lines = text.split('\n');
    
    for (const line of lines) {
        if (currentChunk.length + line.length + 1 > maxLength) {
            if (currentChunk.trim()) {
                chunks.push(currentChunk.trim());
                currentChunk = '';
            }
            
            if (line.length > maxLength) {
                const words = line.split(' ');
                let currentLine = '';
                
                for (const word of words) {
                    if (currentLine.length + word.length + 1 > maxLength) {
                        if (currentLine.trim()) {
                            chunks.push(currentLine.trim());
                            currentLine = word;
                        } else {
                            chunks.push(word.substring(0, maxLength - 3) + '...');
                            currentLine = word.substring(maxLength - 3);
                        }
                    } else {
                        currentLine += (currentLine ? ' ' : '') + word;
                    }
                }
                
                if (currentLine.trim()) {
                    currentChunk = currentLine;
                }
            } else {
                currentChunk = line;
            }
        } else {
            currentChunk += (currentChunk ? '\n' : '') + line;
        }
    }
    
    if (currentChunk.trim()) {
        chunks.push(currentChunk.trim());
    }
    
    return chunks.length > 0 ? chunks : [text];
}

function isContinuationRequest(message) {
    const lowerMessage = message.toLowerCase().trim();
    const continuationPatterns = [
        /^(continue|continuer?)$/,
        /^(suite|la suite)$/,
        /^(apr√®s|ensuite)$/,
        /^(plus|encore)$/,
        /^(next|suivant)$/,
        /^\.\.\.$/,
        /^(termine|fini[sr]?)$/
    ];
    
    return continuationPatterns.some(pattern => pattern.test(lowerMessage));
}

// === GESTION GITHUB API ===

function encodeBase64(content) {
    return Buffer.from(JSON.stringify(content, null, 2), 'utf8').toString('base64');
}

function decodeBase64(content) {
    return JSON.parse(Buffer.from(content, 'base64').toString('utf8'));
}

const getGitHubApiUrl = (filename) => {
    return `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${filename}`;
};

async function createGitHubRepo() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.error("‚ùå GITHUB_TOKEN ou GITHUB_USERNAME manquant pour cr√©er le repo");
        return false;
    }

    try {
        const checkResponse = await axios.get(
            `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}`,
            {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json'
                },
                timeout: 10000
            }
        );
        
        if (checkResponse.status === 200) {
            log.info(`‚úÖ Repository ${GITHUB_REPO} existe d√©j√†`);
            return true;
        }
    } catch (error) {
        if (error.response?.status === 404) {
            try {
                const createResponse = await axios.post(
                    'https://api.github.com/user/repos',
                    {
                        name: GITHUB_REPO,
                        description: 'Sauvegarde des donn√©es NakamaBot avec SQLite - Cr√©√© automatiquement',
                        private: true,
                        auto_init: true
                    },
                    {
                        headers: {
                            'Authorization': `token ${GITHUB_TOKEN}`,
                            'Accept': 'application/vnd.github.v3+json'
                        },
                        timeout: 15000
                    }
                );

                if (createResponse.status === 201) {
                    log.info(`üéâ Repository ${GITHUB_REPO} cr√©√© avec succ√®s !`);
                    return true;
                }
            } catch (createError) {
                log.error(`‚ùå Erreur cr√©ation repository: ${createError.message}`);
                return false;
            }
        }
    }

    return false;
}

// Variable pour √©viter les sauvegardes simultan√©es
let isSaving = false;
let saveQueue = [];

async function saveDataToGitHub() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.debug("üîÑ Pas de sauvegarde GitHub (config manquante)");
        return;
    }

    if (isSaving) {
        log.debug("‚è≥ Sauvegarde d√©j√† en cours, ajout √† la queue");
        return new Promise((resolve) => {
            saveQueue.push(resolve);
        });
    }

    isSaving = true;

    try {
        log.debug(`üíæ Tentative de sauvegarde sur GitHub: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
        
        const filename = 'nakamabot-data.json';
        const url = getGitHubApiUrl(filename);
        
        const dbStats = await getDbStats().catch(() => ({}));
        
        const dataToSave = {
            userList: Array.from(userList),
            userMemory: Object.fromEntries(userMemory),
            userLastImage: Object.fromEntries(userLastImage),
            userExp: rankCommand ? rankCommand.getExpData() : {},
            truncatedMessages: Object.fromEntries(truncatedMessages),
            clanData: commandContext.clanData || null,
            commandData: Object.fromEntries(clanData),
            databaseStats: dbStats,
            lastUpdate: new Date().toISOString(),
            version: "4.0 Amicale + Vision + GitHub + SQLite + Clans + Rank + Truncation"
        };

        const commitData = {
            message: `ü§ñ Sauvegarde automatique NakamaBot + SQLite - ${new Date().toISOString()}`,
            content: encodeBase64(dataToSave)
        };

        try {
            const existingResponse = await axios.get(url, {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json'
                },
                timeout: 10000
            });

            if (existingResponse.data?.sha) {
                commitData.sha = existingResponse.data.sha;
            }
        } catch (error) {
            if (error.response?.status !== 404) {
                throw error;
            }
        }

        const response = await axios.put(url, commitData, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            timeout: 15000
        });

        if (response.status === 200 || response.status === 201) {
            log.info(`üíæ Donn√©es sauvegard√©es sur GitHub + SQLite`);
        }

    } catch (error) {
        if (error.response?.status === 404) {
            log.error("‚ùå Repository GitHub introuvable pour la sauvegarde (404)");
        } else if (error.response?.status === 401) {
            log.error("‚ùå Token GitHub invalide pour la sauvegarde (401)");
        } else {
            log.error(`‚ùå Erreur sauvegarde GitHub: ${error.message}`);
        }
    } finally {
        isSaving = false;
        
        const queueCallbacks = [...saveQueue];
        saveQueue = [];
        queueCallbacks.forEach(callback => callback());
    }
}

async function loadDataFromGitHub() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.warning("‚ö†Ô∏è Configuration GitHub manquante, utilisation du stockage SQLite + temporaire uniquement");
        return;
    }

    try {
        const filename = 'nakamabot-data.json';
        const url = getGitHubApiUrl(filename);
        
        const response = await axios.get(url, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            timeout: 10000
        });

        if (response.status === 200 && response.data.content) {
            const data = decodeBase64(response.data.content);
            
            if (data.userList && Array.isArray(data.userList)) {
                data.userList.forEach(userId => userList.add(userId));
                log.info(`‚úÖ ${data.userList.length} utilisateurs charg√©s depuis GitHub`);
            }

            if (data.userMemory && typeof data.userMemory === 'object') {
                Object.entries(data.userMemory).forEach(([userId, memory]) => {
                    if (Array.isArray(memory)) {
                        userMemory.set(userId, memory);
                    }
                });
                log.info(`‚úÖ ${Object.keys(data.userMemory).length} conversations charg√©es depuis GitHub`);
            }

            if (data.userLastImage && typeof data.userLastImage === 'object') {
                Object.entries(data.userLastImage).forEach(([userId, imageUrl]) => {
                    userLastImage.set(userId, imageUrl);
                });
                log.info(`‚úÖ ${Object.keys(data.userLastImage).length} images charg√©es depuis GitHub`);
            }

            if (data.truncatedMessages && typeof data.truncatedMessages === 'object') {
                Object.entries(data.truncatedMessages).forEach(([userId, truncData]) => {
                    if (truncData && typeof truncData === 'object') {
                        truncatedMessages.set(userId, truncData);
                    }
                });
                log.info(`‚úÖ ${Object.keys(data.truncatedMessages).length} messages tronqu√©s charg√©s depuis GitHub`);
            }

            if (data.userExp && typeof data.userExp === 'object' && rankCommand) {
                rankCommand.loadExpData(data.userExp);
                log.info(`‚úÖ ${Object.keys(data.userExp).length} donn√©es d'exp√©rience charg√©es depuis GitHub`);
            }

            if (data.clanData && typeof data.clanData === 'object') {
                commandContext.clanData = data.clanData;
                const clanCount = Object.keys(data.clanData.clans || {}).length;
                log.info(`‚úÖ ${clanCount} clans charg√©s depuis GitHub`);
            }

            log.info("üéâ Donn√©es charg√©es avec succ√®s depuis GitHub !");
        }
    } catch (error) {
        if (error.response?.status === 404) {
            log.warning("üìÅ Aucune sauvegarde trouv√©e sur GitHub - Premi√®re utilisation");
            const repoCreated = await createGitHubRepo();
            if (repoCreated) {
                await saveDataToGitHub();
            }
        } else {
            log.error(`‚ùå Erreur chargement GitHub: ${error.message}`);
        }
    }
}

// Sauvegarder automatiquement toutes les 5 minutes
let saveInterval;
function startAutoSave() {
    if (saveInterval) {
        clearInterval(saveInterval);
    }
    
    saveInterval = setInterval(async () => {
        await saveDataToGitHub();
    }, 5 * 60 * 1000);
    
    log.info("üîÑ Sauvegarde automatique GitHub activ√©e (toutes les 5 minutes)");
}

async function saveDataImmediate() {
    saveDataToGitHub().catch(err => 
        log.debug(`üîÑ Sauvegarde en arri√®re-plan: ${err.message}`)
    );
}

// === UTILITAIRES ===

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

async function callMistralAPI(messages, maxTokens = 200, temperature = 0.7) {
    if (!MISTRAL_API_KEY) {
        return null;
    }
    
    const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${MISTRAL_API_KEY}`
    };
    
    const data = {
        model: "mistral-small-latest",
        messages: messages,
        max_tokens: maxTokens,
        temperature: temperature
    };
    
    for (let attempt = 0; attempt < 2; attempt++) {
        try {
            const response = await axios.post(
                "https://api.mistral.ai/v1/chat/completions",
                data,
                { headers, timeout: 30000 }
            );
            
            if (response.status === 200) {
                return response.data.choices[0].message.content;
            }
            
            if (attempt === 0) {
                await sleep(2000);
                continue;
            }
            return null;
        } catch (error) {
            if (attempt === 0) {
                await sleep(2000);
                continue;
            }
            log.error(`‚ùå Erreur Mistral: ${error.message}`);
            return null;
        }
    }
    
    return null;
}

async function analyzeImageWithVision(imageUrl) {
    if (!MISTRAL_API_KEY) {
        return null;
    }
    
    try {
        const headers = {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${MISTRAL_API_KEY}`
        };
        
        const messages = [{
            role: "user",
            content: [
                {
                    type: "text",
                    text: "D√©cris en d√©tail ce que tu vois dans cette image en fran√ßais. Sois pr√©cise et descriptive, comme si tu expliquais √† un(e) ami(e). Maximum 300 mots avec des emojis mignons. üíï"
                },
                {
                    type: "image_url",
                    image_url: {
                        url: imageUrl
                    }
                }
            ]
        }];
        
        const data = {
            model: "pixtral-12b-2409",
            messages: messages,
            max_tokens: 400,
            temperature: 0.3
        };
        
        const response = await axios.post(
            "https://api.mistral.ai/v1/chat/completions",
            data,
            { headers, timeout: 30000 }
        );
        
        if (response.status === 200) {
            return response.data.choices[0].message.content;
        } else {
            log.error(`‚ùå Erreur Vision API: ${response.status}`);
            return null;
        }
    } catch (error) {
        log.error(`‚ùå Erreur analyse image: ${error.message}`);
        return null;
    }
}

async function webSearch(query) {
    try {
        const messages = [{
            role: "system",
            content: `Tu es NakamaBot, une assistante IA tr√®s gentille et amicale qui aide avec les recherches. Nous sommes en 2025. R√©ponds √† cette recherche: '${query}' avec tes connaissances de 2025. Si tu ne sais pas, dis-le gentiment. R√©ponds en fran√ßais avec une personnalit√© amicale et bienveillante, maximum 300 caract√®res.`
        }];
        
        return await callMistralAPI(messages, 150, 0.3);
    } catch (error) {
        log.error(`‚ùå Erreur recherche: ${error.message}`);
        return "Oh non ! Une petite erreur de recherche... D√©sol√©e ! üíï";
    }
}

function addToMemory(userId, msgType, content) {
    if (!userId || !msgType || !content) {
        log.debug("‚ùå Param√®tres manquants pour addToMemory");
        return;
    }
    
    if (content.length > 1500) {
        content = content.substring(0, 1400) + "...[tronqu√©]";
    }
    
    if (!userMemory.has(userId)) {
        userMemory.set(userId, []);
    }
    
    const memory = userMemory.get(userId);
    
    if (memory.length > 0) {
        const lastMessage = memory[memory.length - 1];
        
        if (lastMessage.type === msgType && lastMessage.content === content) {
            log.debug(`üîÑ Doublon √©vit√© pour ${userId}`);
            return;
        }
        
        if (msgType === 'assistant' && lastMessage.type === 'assistant') {
            const similarity = calculateSimilarity(lastMessage.content, content);
            if (similarity > 0.8) {
                log.debug(`üîÑ Doublon assistant √©vit√© (similarit√©: ${Math.round(similarity * 100)}%)`);
                return;
            }
        }
    }
    
    memory.push({
        type: msgType,
        content: content,
        timestamp: new Date().toISOString()
    });
    
    if (memory.length > 8) {
        memory.shift();
    }
    
    log.debug(`üí≠ Ajout√© en m√©moire [${userId}]: ${msgType}`);
    
    // Sauvegarder aussi dans SQLite
    saveConversationToDb(userId, msgType, content);
    
    saveDataImmediate().catch(err => 
        log.debug(`üîÑ Erreur sauvegarde m√©moire: ${err.message}`)
    );
}

function calculateSimilarity(text1, text2) {
    if (!text1 || !text2) return 0;
    
    const normalize = (text) => text.toLowerCase().replace(/[^\w\s]/g, '').trim();
    const norm1 = normalize(text1);
    const norm2 = normalize(text2);
    
    if (norm1 === norm2) return 1;
    
    const words1 = new Set(norm1.split(/\s+/));
    const words2 = new Set(norm2.split(/\s+/));
    
    const intersection = new Set([...words1].filter(x => words2.has(x)));
    const union = new Set([...words1, ...words2]);
    
    return intersection.size / union.size;
}

function getMemoryContext(userId) {
    const context = [];
    const memory = userMemory.get(userId) || [];
    
    for (const msg of memory) {
        const role = msg.type === 'user' ? 'user' : 'assistant';
        context.push({ role, content: msg.content });
    }
    
    return context;
}

function isAdmin(userId) {
    return ADMIN_IDS.has(String(userId));
}

// === FONCTIONS D'ENVOI AVEC GESTION DE TRONCATURE + SQLITE ===

async function sendMessage(recipientId, text) {
    if (!PAGE_ACCESS_TOKEN) {
        log.error("‚ùå PAGE_ACCESS_TOKEN manquant");
        return { success: false, error: "No token" };
    }
    
    if (!text || typeof text !== 'string') {
        log.warning("‚ö†Ô∏è Message vide");
        return { success: false, error: "Empty message" };
    }
    
    // Gestion intelligente des messages longs + SQLite
    if (text.length > 6000) {
        log.info(`üìè Message long d√©tect√© (${text.length} chars) pour ${recipientId} - Division en chunks`);
        
        const chunks = splitMessageIntoChunks(text, 2000);
        
        if (chunks.length > 1) {
            // Envoyer le premier chunk avec indicateur de continuation
            const firstChunk = chunks[0] + "\n\nüìù *Tape \"continue\" pour la suite...*";
            
            // Sauvegarder l'√©tat de troncature en m√©moire et SQLite
            truncatedMessages.set(String(recipientId), {
                fullMessage: text,
                lastSentPart: chunks[0]
            });
            
            // Sauvegarder aussi dans SQLite
            saveTruncatedToDb(String(recipientId), text, chunks[0]);
            
            // Sauvegarder imm√©diatement
            saveDataImmediate();
            
            return await sendSingleMessage(recipientId, firstChunk);
        }
    }
    
    // Message normal
    return await sendSingleMessage(recipientId, text);
}

async function sendSingleMessage(recipientId, text) {
    let finalText = text;
    if (finalText.length > 6000 && !finalText.includes("‚ú® [Message Trop long]")) {
        finalText = finalText.substring(0, 5950) + "...\n‚ú® [Message Trop long]";
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: { text: finalText }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 15000
            }
        );
        
        if (response.status === 200) {
            return { success: true };
        } else {
            log.error(`‚ùå Erreur Facebook API: ${response.status}`);
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        log.error(`‚ùå Erreur envoi: ${error.message}`);
        return { success: false, error: error.message };
    }
}

async function sendImageMessage(recipientId, imageUrl, caption = "") {
    if (!PAGE_ACCESS_TOKEN) {
        log.error("‚ùå PAGE_ACCESS_TOKEN manquant");
        return { success: false, error: "No token" };
    }
    
    if (!imageUrl) {
        log.warning("‚ö†Ô∏è URL d'image vide");
        return { success: false, error: "Empty image URL" };
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: {
            attachment: {
                type: "image",
                payload: {
                    url: imageUrl,
                    is_reusable: true
                }
            }
        }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 20000
            }
        );
        
        if (response.status === 200) {
            if (caption) {
                await sleep(500);
                return await sendMessage(recipientId, caption);
            }
            return { success: true };
        } else {
            log.error(`‚ùå Erreur envoi image: ${response.status}`);
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        log.error(`‚ùå Erreur envoi image: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// === CHARGEMENT DES COMMANDES ===

const COMMANDS = new Map();

// === CONTEXTE DES COMMANDES AVEC SUPPORT SQLITE + CLANS ET EXP√âRIENCE ===
const commandContext = {
    VERIFY_TOKEN,
    PAGE_ACCESS_TOKEN,
    MISTRAL_API_KEY,
    GITHUB_TOKEN,
    GITHUB_USERNAME,
    GITHUB_REPO,
    ADMIN_IDS,
    userMemory,
    userList,
    userLastImage,
    clanData: null,
    commandData: clanData,
    truncatedMessages,
    db,
    saveUserToDb,
    saveConversationToDb,
    saveImageToDb,
    saveUserExpToDb,
    saveTruncatedToDb,
    getDbStats,
    log,
    sleep,
    getRandomInt,
    callMistralAPI,
    analyzeImageWithVision,
    webSearch,
    addToMemory,
    getMemoryContext,
    isAdmin,
    sendMessage,
    sendImageMessage,
    splitMessageIntoChunks,
    isContinuationRequest,
    saveDataToGitHub,
    saveDataImmediate,
    loadDataFromGitHub,
    createGitHubRepo
};

function loadCommands() {
    const commandsDir = path.join(__dirname, 'Cmds');
    
    if (!fs.existsSync(commandsDir)) {
        log.error("‚ùå Dossier 'Cmds' introuvable");
        return;
    }
    
    const commandFiles = fs.readdirSync(commandsDir).filter(file => file.endsWith('.js'));
    
    log.info(`üîç Chargement de ${commandFiles.length} commandes...`);
    
    for (const file of commandFiles) {
        try {
            const commandPath = path.join(commandsDir, file);
            const commandName = path.basename(file, '.js');
            
            delete require.cache[require.resolve(commandPath)];
            
            const commandModule = require(commandPath);
            
            if (typeof commandModule !== 'function') {
                log.error(`‚ùå ${file} doit exporter une fonction`);
                continue;
            }
            
            COMMANDS.set(commandName, commandModule);
            
            if (commandName === 'rank') {
                rankCommand = commandModule;
                log.info(`üéØ Syst√®me d'exp√©rience activ√© avec la commande rank`);
            }
            
            log.info(`‚úÖ Commande '${commandName}' charg√©e`);
            
        } catch (error) {
            log.error(`‚ùå Erreur chargement ${file}: ${error.message}`);
        }
    }
    
    log.info(`üéâ ${COMMANDS.size} commandes charg√©es avec succ√®s !`);
}
