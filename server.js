// === CHARGEMENT DES COMMANDES ===

const COMMANDS = new Map();

// === CONTEXTE DES COMMANDES AVEC SUPPORT DB, CLANS ET EXP√âRIENCE ===
const commandContext = {
    // Variables globales
    VERIFY_TOKEN,
    PAGE_ACCESS_TOKEN,
    MISTRAL_API_KEY,
    GITHUB_TOKEN,
    GITHUB_USERNAME,
    GITHUB_REPO,
    ADMIN_IDS,
    userMemory,
    userList,
    userLastImage,
    
    // ‚úÖ AJOUT: Base de donn√©es SQLite
    db,
    DB_PATH,
    
    // ‚úÖ AJOUT: Donn√©es persistantes pour les commandes
    clanData: null, // Sera initialis√© par les commandes
    commandData: clanData, // Map pour autres donn√©es de commandes
    
    // üÜï AJOUT: Gestion des messages tronqu√©s
    truncatedMessages,
    
    // Fonctions utilitaires
    log,
    sleep,
    getRandomInt,
    callMistralAPI,
    analyzeImageWithVision,
    webSearch,
    addToMemory,
    getMemoryContext,
    isAdmin,
    sendMessage,
    sendImageMessage,
    
    // üÜï AJOUT: Fonctions de gestion de troncature + DB
    splitMessageIntoChunks,
    isContinuationRequest,
    saveTruncatedMessageToDB,
    removeTruncatedMessageFromDB,
    
    // Fonctions de sauvegarde DB
    saveUserToDB,
    saveConversationToDB,
    saveUserImageToDB,
    saveUserExpToDB,
    
    // Fonctions de sauvegarde GitHub
    saveDataToGitHub,
    saveDataImmediate,
    loadDataFromGitHub,
    createGitHubRepo
};

// ‚úÖ FONCTION loadCommands MODIFI√âE pour capturer la commande rank
function loadCommands() {
    const commandsDir = path.join(__dirname, 'Cmds');
    
    if (!fs.existsSync(commandsDir)) {
        log.error("‚ùå Dossier 'Cmds' introuvable");
        return;
    }
    
    const commandFiles = fs.readdirSync(commandsDir).filter(file => file.endsWith('.js'));
    
    log.info(`üîç Chargement de ${commandFiles.length} commandes...`);
    
    for (const file of commandFiles) {
        try {
            const commandPath = path.join(commandsDir, file);
            const commandName = path.basename(file, '.js');
            
            delete require.cache[require.resolve(commandPath)];
            
            const commandModule = require(commandPath);
            
            if (typeof commandModule !== 'function') {
                log.error(`‚ùå ${file} doit exporter une fonction`);
                continue;
            }
            
            COMMANDS.set(commandName, commandModule);
            
            // ‚úÖ NOUVEAU: Capturer la commande rank pour l'exp√©rience
            if (commandName === 'rank') {
                rankCommand = commandModule;
                log.info(`üéØ Syst√®me d'exp√©rience activ√© avec la commande rank`);
            }
            
            log.info(`‚úÖ Commande '${commandName}' charg√©e`);
            
        } catch (error) {
            log.error(`‚ùå Erreur chargement ${file}: ${error.message}`);
        }
    }
    
    log.info(`üéâ ${COMMANDS.size} commandes charg√©es avec succ√®s !`);
}

async function processCommand(senderId, messageText) {
    const senderIdStr = String(senderId);
    
    if (!messageText || typeof messageText !== 'string') {
        return "ü§ñ Oh l√† l√† ! Message vide ! Tape /start ou /help pour commencer notre belle conversation ! üíï";
    }
    
    messageText = messageText.trim();
    
    // üÜï GESTION DES DEMANDES DE CONTINUATION EN PRIORIT√â
    if (isContinuationRequest(messageText)) {
        const truncatedData = truncatedMessages.get(senderIdStr);
        if (truncatedData) {
            const { fullMessage, lastSentPart } = truncatedData;
            
            // Trouver o√π on s'√©tait arr√™t√©
            const lastSentIndex = fullMessage.indexOf(lastSentPart) + lastSentPart.length;
            const remainingMessage = fullMessage.substring(lastSentIndex);
            
            if (remainingMessage.trim()) {
                const chunks = splitMessageIntoChunks(remainingMessage, 2000);
                const nextChunk = chunks[0];
                
                // Mettre √† jour le cache avec la nouvelle partie envoy√©e
                if (chunks.length > 1) {
                    truncatedMessages.set(senderIdStr, {
                        fullMessage: fullMessage,
                        lastSentPart: lastSentPart + nextChunk
                    });
                    
                    // Sauvegarder en DB
                    try {
                        await saveTruncatedMessageToDB(senderIdStr, fullMessage, lastSentPart + nextChunk);
                    } catch (error) {
                        log.debug(`üîÑ Erreur sauvegarde message tronqu√© DB: ${error.message}`);
                    }
                    
                    // Ajouter un indicateur de continuation
                    const continuationMsg = nextChunk + "\n\nüìù *Tape \"continue\" pour la suite...*";
                    addToMemory(senderIdStr, 'user', messageText);
                    addToMemory(senderIdStr, 'assistant', continuationMsg);
                    saveDataImmediate(); // Sauvegarder l'√©tat
                    return continuationMsg;
                } else {
                    // Message termin√©
                    truncatedMessages.delete(senderIdStr);
                    try {
                        await removeTruncatedMessageFromDB(senderIdStr);
                    } catch (error) {
                        log.debug(`üîÑ Erreur suppression message tronqu√© DB: ${error.message}`);
                    }
                    
                    addToMemory(senderIdStr, 'user', messageText);
                    addToMemory(senderIdStr, 'assistant', nextChunk);
                    saveDataImmediate(); // Sauvegarder l'√©tat
                    return nextChunk;
                }
            } else {
                // Plus rien √† envoyer
                truncatedMessages.delete(senderIdStr);
                try {
                    await removeTruncatedMessageFromDB(senderIdStr);
                } catch (error) {
                    log.debug(`üîÑ Erreur suppression message tronqu√© DB: ${error.message}`);
                }
                
                const endMsg = "‚úÖ C'est tout ! Y a-t-il autre chose que je puisse faire pour toi ? üí´";
                addToMemory(senderIdStr, 'user', messageText);
                addToMemory(senderIdStr, 'assistant', endMsg);
                saveDataImmediate(); // Sauvegarder l'√©tat
                return endMsg;
            }
        } else {
            // Pas de message tronqu√© en cours
            const noTruncMsg = "ü§î Il n'y a pas de message en cours √† continuer. Pose-moi une nouvelle question ! üí°";
            addToMemory(senderIdStr, 'user', messageText);
            addToMemory(senderIdStr, 'assistant', noTruncMsg);
            return noTruncMsg;
        }
    }
    
    if (!messageText.startsWith('/')) {
        if (COMMANDS.has('chat')) {
            return await COMMANDS.get('chat')(senderId, messageText, commandContext);
        }
        return "ü§ñ Coucou ! Tape /start ou /help pour d√©couvrir ce que je peux faire ! ‚ú®";
    }
    
    const parts = messageText.substring(1).split(' ');
    const command = parts[0].toLowerCase();
    const args = parts.slice(1).join(' ');
    
    if (COMMANDS.has(command)) {
        try {
            return await COMMANDS.get(command)(senderId, args, commandContext);
        } catch (error) {
            log.error(`‚ùå Erreur commande ${command}: ${error.message}`);
            return `üí• Oh non ! Petite erreur dans /${command} ! R√©essaie ou tape /help ! üíï`;
        }
    }
    
    return `‚ùì Oh ! La commande /${command} m'est inconnue ! Tape /help pour voir tout ce que je sais faire ! ‚ú®üíï`;
}

// === ROUTES EXPRESS ===

// === ROUTE D'ACCUEIL MISE √Ä JOUR ===
app.get('/', (req, res) => {
    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
    
    res.json({
        status: "ü§ñ NakamaBot v4.1 DB + GitHub + Clans + Rank + Truncation Online ! üíñ",
        creator: "Durand",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie",
        year: "2025",
        commands: COMMANDS.size,
        users: userList.size,
        conversations: userMemory.size,
        images_stored: userLastImage.size,
        clans_total: clanCount,
        users_with_exp: expDataCount,
        truncated_messages: truncatedMessages.size,
        version: "4.1 DB + GitHub + Clans + Rank + Truncation",
        storage: {
            primary: "SQLite Database",
            backup: "GitHub API",
            database_path: DB_PATH,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            persistent: true,
            auto_save: "Every 5 minutes",
            includes: ["users", "conversations", "images", "clans", "command_data", "user_exp", "truncated_messages"]
        },
        features: [
            "G√©n√©ration d'images IA",
            "Transformation anime", 
            "Analyse d'images IA",
            "Chat intelligent et doux",
            "Base de donn√©es SQLite persistante",
            "Sauvegarde GitHub automatique",
            "Syst√®me de clans persistant",
            "Syst√®me de ranking et exp√©rience",
            "Cartes de rang personnalis√©es",
            "Gestion intelligente des messages longs",
            "Continuation automatique des r√©ponses",
            "Broadcast admin",
            "Recherche 2025",
            "Stats r√©serv√©es admin"
        ],
        last_update: new Date().toISOString()
    });
});

// Webhook Facebook Messenger
app.get('/webhook', (req, res) => {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];
    
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
        log.info('‚úÖ Webhook v√©rifi√©');
        res.status(200).send(challenge);
    } else {
        log.warning('‚ùå √âchec v√©rification webhook');
        res.status(403).send('Verification failed');
    }
});

// ‚úÖ WEBHOOK PRINCIPAL MODIFI√â - AJOUT D'EXP√âRIENCE ET NOTIFICATIONS DE NIVEAU + DB
app.post('/webhook', async (req, res) => {
    try {
        const data = req.body;
        
        if (!data) {
            log.warning('‚ö†Ô∏è Aucune donn√©e re√ßue');
            return res.status(400).json({ error: "No data received" });
        }
        
        for (const entry of data.entry || []) {
            for (const event of entry.messaging || []) {
                const senderId = event.sender?.id;
                
                if (!senderId) {
                    continue;
                }
                
                const senderIdStr = String(senderId);
                
                if (event.message && !event.message.is_echo) {
                    const wasNewUser = !userList.has(senderIdStr);
                    userList.add(senderIdStr);
                    
                    // ‚úÖ NOUVEAU: Sauvegarder l'utilisateur en DB
                    try {
                        await saveUserToDB(senderIdStr);
                    } catch (error) {
                        log.debug(`üîÑ Erreur sauvegarde utilisateur DB: ${error.message}`);
                    }
                    
                    if (wasNewUser) {
                        log.info(`üëã Nouvel utilisateur: ${senderId}`);
                        saveDataImmediate();
                    }
                    
                    if (event.message.attachments) {
                        for (const attachment of event.message.attachments) {
                            if (attachment.type === 'image') {
                                const imageUrl = attachment.payload?.url;
                                if (imageUrl) {
                                    userLastImage.set(senderIdStr, imageUrl);
                                    
                                    // ‚úÖ NOUVEAU: Sauvegarder l'image en DB
                                    try {
                                        await saveUserImageToDB(senderIdStr, imageUrl);
                                    } catch (error) {
                                        log.debug(`üîÑ Erreur sauvegarde image DB: ${error.message}`);
                                    }
                                    
                                    log.info(`üì∏ Image re√ßue de ${senderId}`);
                                    
                                    addToMemory(senderId, 'user', '[Image envoy√©e]');
                                    
                                    // ‚úÖ NOUVEAU: Ajouter de l'exp√©rience pour l'envoi d'image
                                    if (rankCommand) {
                                        const expResult = rankCommand.addExp(senderId, 2); // 2 XP pour une image
                                        
                                        if (expResult.levelUp) {
                                            log.info(`üéâ ${senderId} a atteint le niveau ${expResult.newLevel} (image) !`);
                                            
                                            // Sauvegarder l'exp√©rience en DB
                                            try {
                                                await saveUserExpToDB(senderIdStr, expResult.newExp, expResult.newLevel);
                                            } catch (error) {
                                                log.debug(`üîÑ Erreur sauvegarde exp DB: ${error.message}`);
                                            }
                                        }
                                    }
                                    
                                    saveDataImmediate();
                                    
                                    const response = "üì∏ Super ! J'ai bien re√ßu ton image ! ‚ú®\n\nüé≠ Tape /anime pour la transformer en style anime !\nüëÅÔ∏è Tape /vision pour que je te dise ce que je vois !\n\nüíï Ou continue √† me parler normalement !";
                                    
                                    const sendResult = await sendMessage(senderId, response);
                                    if (sendResult.success) {
                                        addToMemory(senderId, 'assistant', response);
                                    }
                                    continue;
                                }
                            }
                        }
                    }
                    
                    const messageText = event.message.text?.trim();
                    
                    if (messageText) {
                        log.info(`üì® Message de ${senderId}: ${messageText.substring(0, 50)}...`);
                        
                        // ‚úÖ NOUVEAU: Ajouter de l'exp√©rience pour chaque message
                        if (messageText && rankCommand) {
                            const expResult = rankCommand.addExp(senderId, 1);
                            
                            // Notifier si l'utilisateur a mont√© de niveau
                            if (expResult.levelUp) {
                                log.info(`üéâ ${senderId} a atteint le niveau ${expResult.newLevel} !`);
                                
                                // Sauvegarder l'exp√©rience en DB
                                try {
                                    await saveUserExpToDB(senderIdStr, expResult.newExp, expResult.newLevel);
                                } catch (error) {
                                    log.debug(`üîÑ Erreur sauvegarde exp DB: ${error.message}`);
                                }
                            }
                            
                            // Sauvegarder les donn√©es mises √† jour
                            saveDataImmediate();
                        }
                        
                        const response = await processCommand(senderId, messageText);
                        
                        if (response) {
                            if (typeof response === 'object' && response.type === 'image') {
                                const sendResult = await sendImageMessage(senderId, response.url, response.caption);
                                
                                if (sendResult.success) {
                                    log.info(`‚úÖ Image envoy√©e √† ${senderId}`);
                                } else {
                                    log.warning(`‚ùå √âchec envoi image √† ${senderId}`);
                                    const fallbackMsg = "üé® Image cr√©√©e avec amour mais petite erreur d'envoi ! R√©essaie ! üíï";
                                    const fallbackResult = await sendMessage(senderId, fallbackMsg);
                                    if (fallbackResult.success) {
                                        addToMemory(senderId, 'assistant', fallbackMsg);
                                    }
                                }
                            } else if (typeof response === 'string') {
                                const sendResult = await sendMessage(senderId, response);
                                
                                if (sendResult.success) {
                                    log.info(`‚úÖ R√©ponse envoy√©e √† ${senderId}`);
                                } else {
                                    log.warning(`‚ùå √âchec envoi √† ${senderId}`);
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (error) {
        log.error(`‚ùå Erreur webhook: ${error.message}`);
        return res.status(500).json({ error: `Webhook error: ${error.message}` });
    }
    
    res.status(200).json({ status: "ok" });
});

// Route pour cr√©er un nouveau repository GitHub
app.post('/create-repo', async (req, res) => {
    try {
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
            return res.status(400).json({
                success: false,
                error: "GITHUB_TOKEN ou GITHUB_USERNAME manquant"
            });
        }

        const repoCreated = await createGitHubRepo();
        
        if (repoCreated) {
            res.json({
                success: true,
                message: "Repository GitHub cr√©√© avec succ√®s !",
                repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
                url: `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`,
                instructions: [
                    "Le repository a √©t√© cr√©√© automatiquement",
                    "Les donn√©es seront sauvegard√©es automatiquement",
                    "V√©rifiez que le repository est priv√© pour la s√©curit√©"
                ],
                timestamp: new Date().toISOString()
            });
        } else {
            res.status(500).json({
                success: false,
                error: "Impossible de cr√©er le repository"
            });
        }
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Route pour tester la connexion GitHub
app.get('/test-github', async (req, res) => {
    try {
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
            return res.status(400).json({
                success: false,
                error: "Configuration GitHub manquante",
                missing: {
                    token: !GITHUB_TOKEN,
                    username: !GITHUB_USERNAME
                }
            });
        }

        const repoUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}`;
        const response = await axios.get(repoUrl, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            timeout: 10000
        });

        res.json({
            success: true,
            message: "Connexion GitHub OK !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            url: `https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`,
            status: response.status,
            private: response.data.private,
            created_at: response.data.created_at,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        let errorMessage = error.message;
        let suggestions = [];

        if (error.response?.status === 404) {
            errorMessage = "Repository introuvable (404)";
            suggestions = [
                "V√©rifiez que GITHUB_USERNAME et GITHUB_REPO sont corrects",
                "Utilisez POST /create-repo pour cr√©er automatiquement le repository"
            ];
        } else if (error.response?.status === 401) {
            errorMessage = "Token GitHub invalide (401)";
            suggestions = ["V√©rifiez votre GITHUB_TOKEN"];
        } else if (error.response?.status === 403) {
            errorMessage = "Acc√®s refus√© (403)";
            suggestions = ["V√©rifiez les permissions de votre token (repo, contents)"];
        }

        res.status(error.response?.status || 500).json({
            success: false,
            error: errorMessage,
            suggestions: suggestions,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString()
        });
    }
});

// Route pour forcer une sauvegarde
app.post('/force-save', async (req, res) => {
    try {
        await saveDataToGitHub();
        const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
        const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
        
        res.json({
            success: true,
            message: "Donn√©es sauvegard√©es avec succ√®s sur GitHub !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString(),
            stats: {
                users: userList.size,
                conversations: userMemory.size,
                images: userLastImage.size,
                clans: clanCount,
                users_with_exp: expDataCount,
                truncated_messages: truncatedMessages.size
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Route pour recharger les donn√©es depuis GitHub
app.post('/reload-data', async (req, res) => {
    try {
        await loadDataFromGitHub();
        const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
        const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
        
        res.json({
            success: true,
            message: "Donn√©es recharg√©es avec succ√®s depuis GitHub !",
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            timestamp: new Date().toISOString(),
            stats: {
                users: userList.size,
                conversations: userMemory.size,
                images: userLastImage.size,
                clans: clanCount,
                users_with_exp: expDataCount,
                truncated_messages: truncatedMessages.size
            }
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// Nouvelle route pour voir les statistiques de la base de donn√©es
app.get('/db-stats', async (req, res) => {
    try {
        if (!db) {
            return res.status(500).json({
                success: false,
                error: "Base de donn√©es non initialis√©e"
            });
        }
        
        const stats = {};
        
        // Compter les utilisateurs
        await new Promise((resolve, reject) => {
            db.get("SELECT COUNT(*) as count FROM users", [], (err, row) => {
                if (err) reject(err);
                else {
                    stats.users_in_db = row.count;
                    resolve();
                }
            });
        });
        
        // Compter les conversations
        await new Promise((resolve, reject) => {
            db.get("SELECT COUNT(*) as count FROM conversations", [], (err, row) => {
                if (err) reject(err);
                else {
                    stats.conversations_in_db = row.count;
                    resolve();
                }
            });
        });
        
        // Compter les images
        await new Promise((resolve, reject) => {
            db.get("SELECT COUNT(*) as count FROM user_images", [], (err, row) => {
                if (err) reject(err);
                else {
                    stats.images_in_db = row.count;
                    resolve();
                }
            });
        });
        
        // Compter l'exp√©rience
        await new Promise((resolve, reject) => {
            db.get("SELECT COUNT(*) as count FROM user_experience", [], (err, row) => {
                if (err) reject(err);
                else {
                    stats.exp_records_in_db = row.count;
                    resolve();
                }
            });
        });
        
        // Compter les messages tronqu√©s
        await new Promise((resolve, reject) => {
            db.get("SELECT COUNT(*) as count FROM truncated_messages", [], (err, row) => {
                if (err) reject(err);
                else {
                    stats.truncated_messages_in_db = row.count;
                    resolve();
                }
            });
        });
        
        res.json({
            success: true,
            database_path: DB_PATH,
            database_exists: fs.existsSync(DB_PATH),
            stats: stats,
            memory_stats: {
                users_in_memory: userList.size,
                conversations_in_memory: userMemory.size,
                images_in_memory: userLastImage.size,
                truncated_messages_in_memory: truncatedMessages.size
            },
            timestamp: new Date().toISOString()
        });
        
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// === STATISTIQUES PUBLIQUES MISES √Ä JOUR AVEC DB ET EXP√âRIENCE ===
app.get('/stats', (req, res) => {
    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
    
    res.json({
        users_count: userList.size,
        conversations_count: userMemory.size,
        images_stored: userLastImage.size,
        clans_total: clanCount,
        users_with_exp: expDataCount,
        truncated_messages: truncatedMessages.size,
        commands_available: COMMANDS.size,
        version: "4.1 DB + GitHub + Clans + Rank + Truncation",
        creator: "Durand",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie",
        year: 2025,
        storage: {
            primary: "SQLite Database",
            backup: "GitHub API",
            database_path: DB_PATH,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            persistent: true,
            auto_save_interval: "5 minutes",
            data_types: ["users", "conversations", "images", "clans", "command_data", "user_exp", "truncated_messages"]
        },
        features: [
            "AI Image Generation",
            "Anime Transformation", 
            "AI Image Analysis",
            "Friendly Chat",
            "SQLite Persistent Database",
            "GitHub Backup Storage",
            "Persistent Clan System",
            "User Ranking System",
            "Experience & Levels",
            "Smart Message Truncation",
            "Message Continuation",
            "Admin Stats",
            "Help Suggestions"
        ],
        note: "Statistiques d√©taill√©es r√©serv√©es aux admins via /stats"
    });
});

// === SANT√â DU BOT MISE √Ä JOUR AVEC DB ET EXP√âRIENCE ===
app.get('/health', (req, res) => {
    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
    
    const healthStatus = {
        status: "healthy",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie",
        services: {
            ai: Boolean(MISTRAL_API_KEY),
            vision: Boolean(MISTRAL_API_KEY),
            facebook: Boolean(PAGE_ACCESS_TOKEN),
            database: Boolean(db && fs.existsSync(DB_PATH)),
            github_storage: Boolean(GITHUB_TOKEN && GITHUB_USERNAME),
            ranking_system: Boolean(rankCommand),
            message_truncation: true
        },
        data: {
            users: userList.size,
            conversations: userMemory.size,
            images_stored: userLastImage.size,
            clans_total: clanCount,
            users_with_exp: expDataCount,
            truncated_messages: truncatedMessages.size,
            commands_loaded: COMMANDS.size
        },
        version: "4.1 DB + GitHub + Clans + Rank + Truncation",
        creator: "Durand",
        database_path: DB_PATH,
        repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
        timestamp: new Date().toISOString()
    };
    
    const issues = [];
    if (!MISTRAL_API_KEY) {
        issues.push("Cl√© IA manquante");
    }
    if (!PAGE_ACCESS_TOKEN) {
        issues.push("Token Facebook manquant");
    }
    if (!db || !fs.existsSync(DB_PATH)) {
        issues.push("Base de donn√©es non accessible");
    }
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        issues.push("Configuration GitHub manquante");
    }
    if (COMMANDS.size === 0) {
        issues.push("Aucune commande charg√©e");
    }
    if (!rankCommand) {
        issues.push("Syst√®me de ranking non charg√©");
    }
    
    if (issues.length > 0) {
        healthStatus.status = "degraded";
        healthStatus.issues = issues;
    }
    
    const statusCode = healthStatus.status === "healthy" ? 200 : 503;
    res.status(statusCode).json(healthStatus);
});

// === SERVEUR DE FICHIERS STATIQUES POUR LES IMAGES TEMPORAIRES ===

app.use('/temp', express.static(path.join(__dirname, 'temp')));

// Middleware pour nettoyer automatiquement les anciens fichiers temporaires
app.use('/temp', (req, res, next) => {
    // Nettoyer les fichiers de plus de 1 heure
    const tempDir = path.join(__dirname, 'temp');
    if (fs.existsSync(tempDir)) {
        const files = fs.readdirSync(tempDir);
        const now = Date.now();
        
        files.forEach(file => {
            const filePath = path.join(tempDir, file);
            const stats = fs.statSync(filePath);
            const ageInMs = now - stats.mtime.getTime();
            
            // Supprimer si plus d'1 heure (3600000 ms)
            if (ageInMs > 3600000) {
                try {
                    fs.unlinkSync(filePath);
                    log.debug(`üóëÔ∏è Fichier temporaire nettoy√©: ${file}`);
                } catch (error) {
                    // Nettoyage silencieux
                }
            }
        });
    }
    next();
});

// Route pour voir l'historique des commits GitHub
app.get('/github-history', async (req, res) => {
    try {
        if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
            return res.status(400).json({
                success: false,
                error: "Configuration GitHub manquante"
            });
        }

        const commitsUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/commits`;
        const response = await axios.get(commitsUrl, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            params: {
                per_page: 10
            },
            timeout: 10000
        });

        const commits = response.data.map(commit => ({
            message: commit.commit.message,
            date: commit.commit.author.date,
            sha: commit.sha.substring(0, 7),
            author: commit.commit.author.name
        }));

        res.json({
            success: true,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`,
            commits: commits,
            total_shown: commits.length,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        res.status(error.response?.status || 500).json({
            success: false,
            error: error.message,
            repository: `${GITHUB_USERNAME}/${GITHUB_REPO}`
        });
    }
});

// Nouvelle route: Nettoyer les messages tronqu√©s (admin uniquement)
app.post('/clear-truncated', async (req, res) => {
    try {
        const clearedCount = truncatedMessages.size;
        truncatedMessages.clear();
        
        // Nettoyer aussi en DB
        if (db) {
            await new Promise((resolve, reject) => {
                db.run("DELETE FROM truncated_messages", [], (err) => {
                    if (err) reject(err);
                    else resolve();
                });
            });
        }
        
        // Sauvegarder imm√©diatement
        saveDataImmediate();
        
        res.json({
            success: true,
            message: `${clearedCount} conversations tronqu√©es nettoy√©es`,
            cleared_from_memory: clearedCount,
            cleared_from_db: true,
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({
            success: false,
            error: error.message
        });
    }
});

// === D√âMARRAGE MODIFI√â AVEC SYST√àME DB + EXP√âRIENCE ET TRONCATURE ===

const PORT = process.env.PORT || 5000;

async function startBot() {
    log.info("üöÄ D√©marrage NakamaBot v4.1 DB + GitHub + Clans + Rank + Truncation");
    log.info("üíñ Personnalit√© super gentille et amicale, comme une tr√®s bonne amie");
    log.info("üë®‚Äçüíª Cr√©√©e par Durand");
    log.info("üìÖ Ann√©e: 2025");

    // ‚úÖ √âTAPE 1: Initialiser la base de donn√©es
    log.info("üóÑÔ∏è Initialisation de la base de donn√©es SQLite...");
    try {
        await initializeDatabase();
        commandContext.db = db; // Mettre √† jour le contexte
    } catch (error) {
        log.error(`‚ùå Erreur initialisation DB: ${error.message}`);
        process.exit(1);
    }

    // ‚úÖ √âTAPE 2: Charger les donn√©es depuis la DB
    log.info("üì• Chargement des donn√©es depuis la base de donn√©es...");
    try {
        await loadDataFromDB();
    } catch (error) {
        log.error(`‚ùå Erreur chargement DB: ${error.message}`);
    }

    // ‚úÖ √âTAPE 3: Essayer de charger depuis GitHub (sauvegarde)
    log.info("üì• Tentative de chargement depuis GitHub...");
    await loadDataFromGitHub();

    // ‚úÖ √âTAPE 4: Charger les commandes
    loadCommands();

    // ‚úÖ √âTAPE 5: Charger les donn√©es d'exp√©rience apr√®s le chargement des commandes
    if (rankCommand) {
        log.info("üéØ Syst√®me d'exp√©rience d√©tect√© et pr√™t !");
    } else {
        log.warning("‚ö†Ô∏è Commande rank non trouv√©e - Syst√®me d'exp√©rience d√©sactiv√©");
    }

    const missingVars = [];
    if (!PAGE_ACCESS_TOKEN) {
        missingVars.push("PAGE_ACCESS_TOKEN");
    }
    if (!MISTRAL_API_KEY) {
        missingVars.push("MISTRAL_API_KEY");
    }
    if (!GITHUB_TOKEN) {
        missingVars.push("GITHUB_TOKEN");
    }
    if (!GITHUB_USERNAME) {
        missingVars.push("GITHUB_USERNAME");
    }

    if (missingVars.length > 0) {
        log.error(`‚ùå Variables manquantes: ${missingVars.join(', ')}`);
    } else {
        log.info("‚úÖ Configuration compl√®te OK");
    }

    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;

    log.info(`üé® ${COMMANDS.size} commandes disponibles`);
    log.info(`üë• ${userList.size} utilisateurs en m√©moire`);
    log.info(`üí¨ ${userMemory.size} conversations en m√©moire`);
    log.info(`üñºÔ∏è ${userLastImage.size} images en m√©moire`);
    log.info(`üè∞ ${clanCount} clans en m√©moire`);
    log.info(`‚≠ê ${expDataCount} utilisateurs avec exp√©rience`);
    log.info(`üìù ${truncatedMessages.size} conversations tronqu√©es en cours`);
    log.info(`üîê ${ADMIN_IDS.size} administrateurs`);
    log.info(`üóÑÔ∏è Base de donn√©es: ${DB_PATH}`);
    log.info(`üìÇ Repository: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
    log.info(`üåê Serveur sur le port ${PORT}`);
    
    startAutoSave();
    
    log.info("üéâ NakamaBot DB + GitHub + Clans + Rank + Truncation pr√™te √† aider avec gentillesse !");

    app.listen(PORT, () => {
        log.info(`üåê Serveur d√©marr√© sur le port ${PORT}`);
        log.info("üóÑÔ∏è Base de donn√©es SQLite active");
        log.info("üíæ Sauvegarde automatique GitHub activ√©e");
        log.info("üìè Gestion intelligente des messages longs activ√©e");
        log.info(`üìä Dashboard: https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`);
    });
}

// Fonction de nettoyage lors de l'arr√™t
async function gracefulShutdown() {
    log.info("üõë Arr√™t du bot avec tendresse...");
    
    if (saveInterval) {
        clearInterval(saveInterval);
        log.info("‚èπÔ∏è Sauvegarde automatique arr√™t√©e");
    }
    
    try {
        log.info("üíæ Sauvegarde finale des donn√©es sur GitHub...");
        await saveDataToGitHub();
        log.info("‚úÖ Donn√©es sauvegard√©es avec succ√®s !");
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde finale: ${error.message}`);
    }
    
    // Fermer la base de donn√©es
    if (db) {
        try {
            await new Promise((resolve, reject) => {
                db.close((err) => {
                    if (err) reject(err);
                    else resolve();
                });
            });
            log.info("üóÑÔ∏è Base de donn√©es ferm√©e proprement");
        } catch (error) {
            log.error(`‚ùå Erreur fermeture DB: ${error.message}`);
        }
    }
    
    // Nettoyage final des messages tronqu√©s
    const truncatedCount = truncatedMessages.size;
    if (truncatedCount > 0) {
        log.info(`üßπ Nettoyage de ${truncatedCount} conversations tronqu√©es en cours...`);
        truncatedMessages.clear();
    }
    
    log.info("üëã Au revoir ! Donn√©es sauvegard√©es en DB et sur GitHub !");
    log.info(`üóÑÔ∏è Base de donn√©es: ${DB_PATH}`);
    log.info(`üìÇ Repository: https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`);
    process.exit(0);
}

// Gestion propre de l'arr√™t
process.on('SIGINT', gracefulShutdown);
process.on('SIGTERM', gracefulShutdown);

// Gestion des erreurs non captur√©es
process.on('uncaughtException', async (error) => {
    log.error(`‚ùå Erreur non captur√©e: ${error.message}`);
    await gracefulShutdown();
});

process.on('unhandledRejection', async (reason, promise) => {
    log.error(`‚ùå Promesse rejet√©e: ${reason}`);
    await gracefulShutdown();
});

// Nettoyage p√©riodique: Nettoyer les messages tronqu√©s anciens (plus de 24h)
setInterval(async () => {
    const now = Date.now();
    const oneDayMs = 24 * 60 * 60 * 1000; // 24 heures en millisecondes
    let cleanedCount = 0;
    
    for (const [userId, data] of truncatedMessages.entries()) {
        // Si le message n'a pas de timestamp ou est trop ancien
        if (!data.timestamp || (now - new Date(data.timestamp).getTime() > oneDayMs)) {
            truncatedMessages.delete(userId);
            
            // Supprimer aussi de la DB
            try {
                await removeTruncatedMessageFromDB(userId);
            } catch (error) {
                log.debug(`üîÑ Erreur suppression message tronqu√© DB: ${error.message}`);
            }
            
            cleanedCount++;
        }
    }
    
    if (cleanedCount > 0) {
        log.info(`üßπ Nettoyage automatique: ${cleanedCount} conversations tronqu√©es expir√©es supprim√©es`);
        saveDataImmediate(); // Sauvegarder le nettoyage
    }
}, 60 * 60 * 1000); // V√©rifier toutes les heures

// D√©marrer le bot
startBot().catch(error => {
    log.error(`‚ùå Erreur d√©marrage: ${error.message}`);
    process.exit(1);
});const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const sqlite3 = require('sqlite3').verbose();

const app = express();
app.use(bodyParser.json());

// Configuration 
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "nakamaverifytoken";
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN || "";
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY || "";
const GITHUB_TOKEN = process.env.GITHUB_TOKEN || "";
const GITHUB_USERNAME = process.env.GITHUB_USERNAME || "";
const GITHUB_REPO = process.env.GITHUB_REPO || "nakamabot-data";
const SERVER_URL = process.env.SERVER_URL || `http://localhost:${PORT || 5000}`;
const DB_PATH = path.join(__dirname, 'nakamabot.db');
const ADMIN_IDS = new Set(
    (process.env.ADMIN_IDS || "").split(",").map(id => id.trim()).filter(id => id)
);

// M√©moire du bot (stockage local temporaire + sauvegarde permanente DB + GitHub)
const userMemory = new Map();
const userList = new Set();
const userLastImage = new Map();
const clanData = new Map(); // Stockage des donn√©es sp√©cifiques aux commandes

// ‚úÖ NOUVEAU: R√©f√©rence vers la commande rank pour le syst√®me d'exp√©rience
let rankCommand = null;

// üÜï AJOUT: Gestion des messages tronqu√©s avec chunks
const truncatedMessages = new Map(); // senderId -> { fullMessage, lastSentPart }

// Base de donn√©es SQLite
let db = null;

// Configuration des logs
const log = {
    info: (msg) => console.log(`${new Date().toISOString()} - INFO - ${msg}`),
    error: (msg) => console.error(`${new Date().toISOString()} - ERROR - ${msg}`),
    warning: (msg) => console.warn(`${new Date().toISOString()} - WARNING - ${msg}`),
    debug: (msg) => console.log(`${new Date().toISOString()} - DEBUG - ${msg}`)
};

// === GESTION BASE DE DONN√âES SQLite ===

function initializeDatabase() {
    return new Promise((resolve, reject) => {
        // Cr√©er le fichier DB s'il n'existe pas
        if (!fs.existsSync(DB_PATH)) {
            log.info(`üóÑÔ∏è Cr√©ation de la base de donn√©es: ${DB_PATH}`);
        } else {
            log.info(`üóÑÔ∏è Base de donn√©es trouv√©e: ${DB_PATH}`);
        }
        
        db = new sqlite3.Database(DB_PATH, (err) => {
            if (err) {
                log.error(`‚ùå Erreur ouverture DB: ${err.message}`);
                reject(err);
                return;
            }
            
            // Cr√©er les tables si elles n'existent pas
            const createTables = `
                CREATE TABLE IF NOT EXISTS users (
                    user_id TEXT PRIMARY KEY,
                    first_seen DATETIME DEFAULT CURRENT_TIMESTAMP,
                    last_seen DATETIME DEFAULT CURRENT_TIMESTAMP,
                    message_count INTEGER DEFAULT 0
                );
                
                CREATE TABLE IF NOT EXISTS conversations (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id TEXT,
                    message_type TEXT,
                    content TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                );
                
                CREATE TABLE IF NOT EXISTS user_images (
                    user_id TEXT PRIMARY KEY,
                    image_url TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                );
                
                CREATE TABLE IF NOT EXISTS user_experience (
                    user_id TEXT PRIMARY KEY,
                    exp_points INTEGER DEFAULT 0,
                    level INTEGER DEFAULT 1,
                    last_exp_gain DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (user_id) REFERENCES users (user_id)
                );
                
                CREATE TABLE IF NOT EXISTS clan_data (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    data_type TEXT,
                    data_key TEXT,
                    data_value TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                );
                
                CREATE TABLE IF NOT EXISTS truncated_messages (
                    user_id TEXT PRIMARY KEY,
                    full_message TEXT,
                    last_sent_part TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
                );
                
                CREATE TABLE IF NOT EXISTS command_data (
                    command_name TEXT,
                    data_key TEXT,
                    data_value TEXT,
                    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                    PRIMARY KEY (command_name, data_key)
                );
            `;
            
            db.exec(createTables, (err) => {
                if (err) {
                    log.error(`‚ùå Erreur cr√©ation tables: ${err.message}`);
                    reject(err);
                    return;
                }
                
                log.info("‚úÖ Base de donn√©es initialis√©e avec succ√®s");
                resolve();
            });
        });
    });
}

// Sauvegarder un utilisateur dans la DB
function saveUserToDB(userId) {
    return new Promise((resolve, reject) => {
        const query = `
            INSERT OR REPLACE INTO users (user_id, last_seen, message_count)
            VALUES (?, CURRENT_TIMESTAMP, 
                COALESCE((SELECT message_count FROM users WHERE user_id = ?), 0) + 1
            )
        `;
        
        db.run(query, [userId, userId], (err) => {
            if (err) {
                log.error(`‚ùå Erreur sauvegarde utilisateur ${userId}: ${err.message}`);
                reject(err);
                return;
            }
            resolve();
        });
    });
}

// Sauvegarder une conversation dans la DB
function saveConversationToDB(userId, messageType, content) {
    return new Promise((resolve, reject) => {
        // Limiter la taille du contenu
        const limitedContent = content.length > 1500 ? 
            content.substring(0, 1400) + "...[tronqu√©]" : content;
        
        const query = `
            INSERT INTO conversations (user_id, message_type, content)
            VALUES (?, ?, ?)
        `;
        
        db.run(query, [userId, messageType, limitedContent], (err) => {
            if (err) {
                log.error(`‚ùå Erreur sauvegarde conversation: ${err.message}`);
                reject(err);
                return;
            }
            resolve();
        });
    });
}

// Sauvegarder une image utilisateur dans la DB
function saveUserImageToDB(userId, imageUrl) {
    return new Promise((resolve, reject) => {
        const query = `
            INSERT OR REPLACE INTO user_images (user_id, image_url, timestamp)
            VALUES (?, ?, CURRENT_TIMESTAMP)
        `;
        
        db.run(query, [userId, imageUrl], (err) => {
            if (err) {
                log.error(`‚ùå Erreur sauvegarde image: ${err.message}`);
                reject(err);
                return;
            }
            resolve();
        });
    });
}

// Sauvegarder l'exp√©rience utilisateur dans la DB
function saveUserExpToDB(userId, expPoints, level) {
    return new Promise((resolve, reject) => {
        const query = `
            INSERT OR REPLACE INTO user_experience (user_id, exp_points, level, last_exp_gain)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP)
        `;
        
        db.run(query, [userId, expPoints, level], (err) => {
            if (err) {
                log.error(`‚ùå Erreur sauvegarde exp√©rience: ${err.message}`);
                reject(err);
                return;
            }
            resolve();
        });
    });
}

// Sauvegarder un message tronqu√© dans la DB
function saveTruncatedMessageToDB(userId, fullMessage, lastSentPart) {
    return new Promise((resolve, reject) => {
        const query = `
            INSERT OR REPLACE INTO truncated_messages (user_id, full_message, last_sent_part, timestamp)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP)
        `;
        
        db.run(query, [userId, fullMessage, lastSentPart], (err) => {
            if (err) {
                log.error(`‚ùå Erreur sauvegarde message tronqu√©: ${err.message}`);
                reject(err);
                return;
            }
            resolve();
        });
    });
}

// Supprimer un message tronqu√© de la DB
function removeTruncatedMessageFromDB(userId) {
    return new Promise((resolve, reject) => {
        const query = `DELETE FROM truncated_messages WHERE user_id = ?`;
        
        db.run(query, [userId], (err) => {
            if (err) {
                log.error(`‚ùå Erreur suppression message tronqu√©: ${err.message}`);
                reject(err);
                return;
            }
            resolve();
        });
    });
}

// Charger les donn√©es depuis la DB au d√©marrage
async function loadDataFromDB() {
    return new Promise((resolve, reject) => {
        if (!db) {
            reject(new Error("Base de donn√©es non initialis√©e"));
            return;
        }
        
        // Charger les utilisateurs
        db.all("SELECT user_id FROM users", [], (err, users) => {
            if (err) {
                log.error(`‚ùå Erreur chargement utilisateurs: ${err.message}`);
            } else {
                users.forEach(user => userList.add(user.user_id));
                log.info(`üì• ${users.length} utilisateurs charg√©s depuis la DB`);
            }
            
            // Charger les conversations r√©centes (derni√®res 8 par utilisateur)
            const conversationQuery = `
                SELECT user_id, message_type, content, timestamp
                FROM (
                    SELECT user_id, message_type, content, timestamp,
                           ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY timestamp DESC) as rn
                    FROM conversations
                ) ranked
                WHERE rn <= 8
                ORDER BY user_id, timestamp
            `;
            
            db.all(conversationQuery, [], (err, conversations) => {
                if (err) {
                    log.error(`‚ùå Erreur chargement conversations: ${err.message}`);
                } else {
                    conversations.forEach(conv => {
                        if (!userMemory.has(conv.user_id)) {
                            userMemory.set(conv.user_id, []);
                        }
                        userMemory.get(conv.user_id).push({
                            type: conv.message_type,
                            content: conv.content,
                            timestamp: conv.timestamp
                        });
                    });
                    log.info(`üí¨ Conversations charg√©es pour ${userMemory.size} utilisateurs depuis la DB`);
                }
                
                // Charger les images utilisateur
                db.all("SELECT user_id, image_url FROM user_images", [], (err, images) => {
                    if (err) {
                        log.error(`‚ùå Erreur chargement images: ${err.message}`);
                    } else {
                        images.forEach(img => userLastImage.set(img.user_id, img.image_url));
                        log.info(`üñºÔ∏è ${images.length} images utilisateur charg√©es depuis la DB`);
                    }
                    
                    // Charger les messages tronqu√©s
                    db.all("SELECT user_id, full_message, last_sent_part FROM truncated_messages", [], (err, truncated) => {
                        if (err) {
                            log.error(`‚ùå Erreur chargement messages tronqu√©s: ${err.message}`);
                        } else {
                            truncated.forEach(trunc => {
                                truncatedMessages.set(trunc.user_id, {
                                    fullMessage: trunc.full_message,
                                    lastSentPart: trunc.last_sent_part
                                });
                            });
                            log.info(`üìù ${truncated.length} messages tronqu√©s charg√©s depuis la DB`);
                        }
                        
                        log.info("‚úÖ Toutes les donn√©es charg√©es depuis la DB");
                        resolve();
                    });
                });
            });
        });
    });
}

// Exporter les donn√©es DB vers JSON pour GitHub
async function exportDBToJSON() {
    return new Promise((resolve, reject) => {
        if (!db) {
            reject(new Error("Base de donn√©es non initialis√©e"));
            return;
        }
        
        const exportData = {
            userList: [],
            userMemory: {},
            userLastImage: {},
            userExp: {},
            truncatedMessages: {},
            clanData: commandContext.clanData || null,
            commandData: {},
            lastUpdate: new Date().toISOString(),
            version: "4.0 DB + GitHub",
            bot: "NakamaBot",
            creator: "Durand"
        };
        
        // Exporter depuis les Maps en m√©moire (plus rapide)
        exportData.userList = Array.from(userList);
        exportData.userMemory = Object.fromEntries(userMemory);
        exportData.userLastImage = Object.fromEntries(userLastImage);
        exportData.truncatedMessages = Object.fromEntries(truncatedMessages);
        exportData.commandData = Object.fromEntries(clanData);
        
        // R√©cup√©rer les donn√©es d'exp√©rience depuis rankCommand si disponible
        if (rankCommand) {
            exportData.userExp = rankCommand.getExpData();
        }
        
        // Calculer les statistiques
        exportData.totalUsers = userList.size;
        exportData.totalConversations = userMemory.size;
        exportData.totalImages = userLastImage.size;
        exportData.totalTruncated = truncatedMessages.size;
        exportData.totalClans = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
        exportData.totalUsersWithExp = Object.keys(exportData.userExp).length;
        
        resolve(exportData);
    });
}

// === FONCTIONS DE GESTION DES MESSAGES TRONQU√âS ===

/**
 * Divise un message en chunks de taille appropri√©e pour Messenger
 * @param {string} text - Texte complet
 * @param {number} maxLength - Taille maximale par chunk (d√©faut: 2000)
 * @returns {Array} - Array des chunks
 */
function splitMessageIntoChunks(text, maxLength = 2000) {
    if (!text || text.length <= maxLength) {
        return [text];
    }
    
    const chunks = [];
    let currentChunk = '';
    const lines = text.split('\n');
    
    for (const line of lines) {
        // Si ajouter cette ligne d√©passe la limite
        if (currentChunk.length + line.length + 1 > maxLength) {
            // Si le chunk actuel n'est pas vide, le sauvegarder
            if (currentChunk.trim()) {
                chunks.push(currentChunk.trim());
                currentChunk = '';
            }
            
            // Si la ligne elle-m√™me est trop longue, la couper
            if (line.length > maxLength) {
                const words = line.split(' ');
                let currentLine = '';
                
                for (const word of words) {
                    if (currentLine.length + word.length + 1 > maxLength) {
                        if (currentLine.trim()) {
                            chunks.push(currentLine.trim());
                            currentLine = word;
                        } else {
                            // Mot unique trop long, le couper brutalement
                            chunks.push(word.substring(0, maxLength - 3) + '...');
                            currentLine = word.substring(maxLength - 3);
                        }
                    } else {
                        currentLine += (currentLine ? ' ' : '') + word;
                    }
                }
                
                if (currentLine.trim()) {
                    currentChunk = currentLine;
                }
            } else {
                currentChunk = line;
            }
        } else {
            currentChunk += (currentChunk ? '\n' : '') + line;
        }
    }
    
    // Ajouter le dernier chunk s'il n'est pas vide
    if (currentChunk.trim()) {
        chunks.push(currentChunk.trim());
    }
    
    return chunks.length > 0 ? chunks : [text];
}

/**
 * D√©tecte si l'utilisateur demande la suite d'un message tronqu√©
 * @param {string} message - Message de l'utilisateur
 * @returns {boolean} - True si c'est une demande de continuation
 */
function isContinuationRequest(message) {
    const lowerMessage = message.toLowerCase().trim();
    const continuationPatterns = [
        /^(continue|continuer?)$/,
        /^(suite|la suite)$/,
        /^(apr√®s|ensuite)$/,
        /^(plus|encore)$/,
        /^(next|suivant)$/,
        /^\.\.\.$/,
        /^(termine|fini[sr]?)$/
    ];
    
    return continuationPatterns.some(pattern => pattern.test(lowerMessage));
}

// === GESTION GITHUB API ===

// Encoder en base64 pour GitHub
function encodeBase64(content) {
    return Buffer.from(JSON.stringify(content, null, 2), 'utf8').toString('base64');
}

// D√©coder depuis base64 GitHub
function decodeBase64(content) {
    return JSON.parse(Buffer.from(content, 'base64').toString('utf8'));
}

// URL de base pour l'API GitHub
const getGitHubApiUrl = (filename) => {
    return `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/${filename}`;
};

// Cr√©er le repository GitHub si n√©cessaire
async function createGitHubRepo() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.error("‚ùå GITHUB_TOKEN ou GITHUB_USERNAME manquant pour cr√©er le repo");
        return false;
    }

    try {
        const checkResponse = await axios.get(
            `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}`,
            {
                headers: {
                    'Authorization': `token ${GITHUB_TOKEN}`,
                    'Accept': 'application/vnd.github.v3+json'
                },
                timeout: 10000
            }
        );
        
        if (checkResponse.status === 200) {
            log.info(`‚úÖ Repository ${GITHUB_REPO} existe d√©j√†`);
            return true;
        }
    } catch (error) {
        if (error.response?.status === 404) {
            try {
                const createResponse = await axios.post(
                    'https://api.github.com/user/repos',
                    {
                        name: GITHUB_REPO,
                        description: 'Sauvegarde des donn√©es NakamaBot - Cr√©√© automatiquement',
                        private: true,
                        auto_init: true
                    },
                    {
                        headers: {
                            'Authorization': `token ${GITHUB_TOKEN}`,
                            'Accept': 'application/vnd.github.v3+json'
                        },
                        timeout: 15000
                    }
                );

                if (createResponse.status === 201) {
                    log.info(`üéâ Repository ${GITHUB_REPO} cr√©√© avec succ√®s !`);
                    log.info(`üìù URL: https://github.com/${GITHUB_USERNAME}/${GITHUB_REPO}`);
                    return true;
                }
            } catch (createError) {
                log.error(`‚ùå Erreur cr√©ation repository: ${createError.message}`);
                return false;
            }
        } else {
            log.error(`‚ùå Erreur v√©rification repository: ${error.message}`);
            return false;
        }
    }

    return false;
}

// Variable pour √©viter les sauvegardes simultan√©es
let isSaving = false;
let saveQueue = [];

// === SAUVEGARDE GITHUB AVEC DB ===
async function saveDataToGitHub() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.debug("üîÑ Pas de sauvegarde GitHub (config manquante)");
        return;
    }

    if (isSaving) {
        log.debug("‚è≥ Sauvegarde d√©j√† en cours, ajout √† la queue");
        return new Promise((resolve) => {
            saveQueue.push(resolve);
        });
    }

    isSaving = true;

    try {
        log.debug(`üíæ Tentative de sauvegarde sur GitHub: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
        
        const filename = 'nakamabot-data.json';
        const url = getGitHubApiUrl(filename);
        
        // Exporter les donn√©es depuis la DB
        const dataToSave = await exportDBToJSON();
        
        const commitData = {
            message: `ü§ñ Sauvegarde automatique NakamaBot (DB+GitHub) - ${new Date().toISOString()}`,
            content: encodeBase64(dataToSave)
        };

        let maxRetries = 3;
        let success = false;

        for (let attempt = 1; attempt <= maxRetries && !success; attempt++) {
            try {
                const existingResponse = await axios.get(url, {
                    headers: {
                        'Authorization': `token ${GITHUB_TOKEN}`,
                        'Accept': 'application/vnd.github.v3+json'
                    },
                    timeout: 10000
                });

                if (existingResponse.data?.sha) {
                    commitData.sha = existingResponse.data.sha;
                }

                const response = await axios.put(url, commitData, {
                    headers: {
                        'Authorization': `token ${GITHUB_TOKEN}`,
                        'Accept': 'application/vnd.github.v3+json'
                    },
                    timeout: 15000
                });

                if (response.status === 200 || response.status === 201) {
                    const clanCount = commandContext.clanData ? Object.keys(commandContext.clanData.clans || {}).length : 0;
                    const expDataCount = rankCommand ? Object.keys(rankCommand.getExpData()).length : 0;
                    log.info(`üíæ Donn√©es DB sauvegard√©es sur GitHub (${userList.size} users, ${userMemory.size} convs, ${userLastImage.size} imgs, ${clanCount} clans, ${expDataCount} exp, ${truncatedMessages.size} trunc)`);
                    success = true;
                } else {
                    log.error(`‚ùå Erreur sauvegarde GitHub: ${response.status}`);
                }

            } catch (retryError) {
                if (retryError.response?.status === 409 && attempt < maxRetries) {
                    log.warning(`‚ö†Ô∏è Conflit SHA d√©tect√© (409), tentative ${attempt}/${maxRetries}, retry dans 1s...`);
                    await sleep(1000);
                    continue;
                } else if (retryError.response?.status === 404 && attempt === 1) {
                    log.debug("üìù Premier fichier, pas de SHA n√©cessaire");
                    delete commitData.sha;
                    continue;
                } else {
                    throw retryError;
                }
            }
        }

        if (!success) {
            log.error("‚ùå √âchec de sauvegarde apr√®s plusieurs tentatives");
        }

    } catch (error) {
        if (error.response?.status === 404) {
            log.error("‚ùå Repository GitHub introuvable pour la sauvegarde (404)");
            log.error(`üîç Repository utilis√©: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
        } else if (error.response?.status === 401) {
            log.error("‚ùå Token GitHub invalide pour la sauvegarde (401)");
        } else if (error.response?.status === 403) {
            log.error("‚ùå Acc√®s refus√© GitHub pour la sauvegarde (403)");
        } else if (error.response?.status === 409) {
            log.warning("‚ö†Ô∏è Conflit SHA persistant - sauvegarde ignor√©e pour √©viter les blocages");
        } else {
            log.error(`‚ùå Erreur sauvegarde GitHub: ${error.message}`);
        }
    } finally {
        isSaving = false;
        
        const queueCallbacks = [...saveQueue];
        saveQueue = [];
        queueCallbacks.forEach(callback => callback());
    }
}

// === CHARGEMENT GITHUB AVEC DB ===
async function loadDataFromGitHub() {
    if (!GITHUB_TOKEN || !GITHUB_USERNAME) {
        log.warning("‚ö†Ô∏è Configuration GitHub manquante, utilisation de la DB uniquement");
        return;
    }

    try {
        log.info(`üîç Tentative de chargement depuis GitHub: ${GITHUB_USERNAME}/${GITHUB_REPO}`);
        
        const filename = 'nakamabot-data.json';
        const url = getGitHubApiUrl(filename);
        
        const response = await axios.get(url, {
            headers: {
                'Authorization': `token ${GITHUB_TOKEN}`,
                'Accept': 'application/vnd.github.v3+json'
            },
            timeout: 10000
        });

        if (response.status === 200 && response.data.content) {
            const data = decodeBase64(response.data.content);
            
            // Charger userList
            if (data.userList && Array.isArray(data.userList)) {
                data.userList.forEach(userId => userList.add(userId));
                log.info(`‚úÖ ${data.userList.length} utilisateurs charg√©s depuis GitHub`);
            }

            // Charger userMemory
            if (data.userMemory && typeof data.userMemory === 'object') {
                Object.entries(data.userMemory).forEach(([userId, memory]) => {
                    if (Array.isArray(memory)) {
                        userMemory.set(userId, memory);
                    }
                });
                log.info(`‚úÖ ${Object.keys(data.userMemory).length} conversations charg√©es depuis GitHub`);
            }

            // Charger userLastImage
            if (data.userLastImage && typeof data.userLastImage === 'object') {
                Object.entries(data.userLastImage).forEach(([userId, imageUrl]) => {
                    userLastImage.set(userId, imageUrl);
                });
                log.info(`‚úÖ ${Object.keys(data.userLastImage).length} images charg√©es depuis GitHub`);
            }

            // Charger les messages tronqu√©s
            if (data.truncatedMessages && typeof data.truncatedMessages === 'object') {
                Object.entries(data.truncatedMessages).forEach(([userId, truncData]) => {
                    if (truncData && typeof truncData === 'object') {
                        truncatedMessages.set(userId, truncData);
                    }
                });
                log.info(`‚úÖ ${Object.keys(data.truncatedMessages).length} messages tronqu√©s charg√©s depuis GitHub`);
            }

            // Charger les donn√©es d'exp√©rience
            if (data.userExp && typeof data.userExp === 'object' && rankCommand) {
                rankCommand.loadExpData(data.userExp);
                log.info(`‚úÖ ${Object.keys(data.userExp).length} donn√©es d'exp√©rience charg√©es depuis GitHub`);
            }

            // Charger les donn√©es des clans
            if (data.clanData && typeof data.clanData === 'object') {
                commandContext.clanData = data.clanData;
                const clanCount = Object.keys(data.clanData.clans || {}).length;
                log.info(`‚úÖ ${clanCount} clans charg√©s depuis GitHub`);
            }

            // Charger autres donn√©es de commandes
            if (data.commandData && typeof data.commandData === 'object') {
                Object.entries(data.commandData).forEach(([key, value]) => {
                    clanData.set(key, value);
                });
                log.info(`‚úÖ ${Object.keys(data.commandData).length} donn√©es de commandes charg√©es depuis GitHub`);
            }

            log.info("üéâ Donn√©es charg√©es avec succ√®s depuis GitHub !");
        }
    } catch (error) {
        if (error.response?.status === 404) {
            log.warning("üìÅ Aucune sauvegarde trouv√©e sur GitHub - Utilisation de la DB locale");
        } else if (error.response?.status === 401) {
            log.error("‚ùå Token GitHub invalide (401) - V√©rifiez votre GITHUB_TOKEN");
        } else if (error.response?.status === 403) {
            log.error("‚ùå Acc√®s refus√© GitHub (403) - V√©rifiez les permissions de votre token");
        } else {
            log.error(`‚ùå Erreur chargement GitHub: ${error.message}`);
        }
        
        log.info("üîÑ Chargement depuis la base de donn√©es locale...");
        await loadDataFromDB();
    }
}

// Sauvegarder automatiquement toutes les 5 minutes
let saveInterval;
function startAutoSave() {
    if (saveInterval) {
        clearInterval(saveInterval);
    }
    
    saveInterval = setInterval(async () => {
        await saveDataToGitHub();
    }, 5 * 60 * 1000); // 5 minutes
    
    log.info("üîÑ Sauvegarde automatique GitHub activ√©e (toutes les 5 minutes)");
}

// Sauvegarder lors de changements importants (non-bloquant)
async function saveDataImmediate() {
    saveDataToGitHub().catch(err => 
        log.debug(`üîÑ Sauvegarde en arri√®re-plan: ${err.message}`)
    );
}

// === UTILITAIRES ===

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Appel API Mistral avec retry
async function callMistralAPI(messages, maxTokens = 200, temperature = 0.7) {
    if (!MISTRAL_API_KEY) {
        return null;
    }
    
    const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${MISTRAL_API_KEY}`
    };
    
    const data = {
        model: "mistral-small-latest",
        messages: messages,
        max_tokens: maxTokens,
        temperature: temperature
    };
    
    for (let attempt = 0; attempt < 2; attempt++) {
        try {
            const response = await axios.post(
                "https://api.mistral.ai/v1/chat/completions",
                data,
                { headers, timeout: 30000 }
            );
            
            if (response.status === 200) {
                return response.data.choices[0].message.content;
            } else if (response.status === 401) {
                log.error("‚ùå Cl√© API Mistral invalide");
                return null;
            } else {
                if (attempt === 0) {
                    await sleep(2000);
                    continue;
                }
                return null;
            }
        } catch (error) {
            if (attempt === 0) {
                await sleep(2000);
                continue;
            }
            log.error(`‚ùå Erreur Mistral: ${error.message}`);
            return null;
        }
    }
    
    return null;
}

// Analyser une image avec l'API Vision de Mistral
async function analyzeImageWithVision(imageUrl) {
    if (!MISTRAL_API_KEY) {
        return null;
    }
    
    try {
        const headers = {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${MISTRAL_API_KEY}`
        };
        
        const messages = [{
            role: "user",
            content: [
                {
                    type: "text",
                    text: "D√©cris en d√©tail ce que tu vois dans cette image en fran√ßais. Sois pr√©cise et descriptive, comme si tu expliquais √† un(e) ami(e). Maximum 300 mots avec des emojis mignons. üíï"
                },
                {
                    type: "image_url",
                    image_url: {
                        url: imageUrl
                    }
                }
            ]
        }];
        
        const data = {
            model: "pixtral-12b-2409",
            messages: messages,
            max_tokens: 400,
            temperature: 0.3
        };
        
        const response = await axios.post(
            "https://api.mistral.ai/v1/chat/completions",
            data,
            { headers, timeout: 30000 }
        );
        
        if (response.status === 200) {
            return response.data.choices[0].message.content;
        } else {
            log.error(`‚ùå Erreur Vision API: ${response.status}`);
            return null;
        }
    } catch (error) {
        log.error(`‚ùå Erreur analyse image: ${error.message}`);
        return null;
    }
}

// Recherche web simul√©e
async function webSearch(query) {
    try {
        const searchContext = `Recherche web pour '${query}' en 2025. Je peux r√©pondre avec mes connaissances de 2025.`;
        const messages = [{
            role: "system",
            content: `Tu es NakamaBot, une assistante IA tr√®s gentille et amicale qui aide avec les recherches. Nous sommes en 2025. R√©ponds √† cette recherche: '${query}' avec tes connaissances de 2025. Si tu ne sais pas, dis-le gentiment. R√©ponds en fran√ßais avec une personnalit√© amicale et bienveillante, maximum 300 caract√®res.`
        }];
        
        return await callMistralAPI(messages, 150, 0.3);
    } catch (error) {
        log.error(`‚ùå Erreur recherche: ${error.message}`);
        return "Oh non ! Une petite erreur de recherche... D√©sol√©e ! üíï";
    }
}

// ‚úÖ GESTION CORRIG√âE DE LA M√âMOIRE - √âVITER LES DOUBLONS + DB
async function addToMemory(userId, msgType, content) {
    if (!userId || !msgType || !content) {
        log.debug("‚ùå Param√®tres manquants pour addToMemory");
        return;
    }
    
    const userIdStr = String(userId);
    
    if (content.length > 1500) {
        content = content.substring(0, 1400) + "...[tronqu√©]";
    }
    
    if (!userMemory.has(userIdStr)) {
        userMemory.set(userIdStr, []);
    }
    
    const memory = userMemory.get(userIdStr);
    
    // ‚úÖ V√©rifier les doublons
    if (memory.length > 0) {
        const lastMessage = memory[memory.length - 1];
        
        if (lastMessage.type === msgType && lastMessage.content === content) {
            log.debug(`üîÑ Doublon √©vit√© pour ${userIdStr}: ${msgType.substring(0, 50)}...`);
            return;
        }
        
        if (msgType === 'assistant' && lastMessage.type === 'assistant') {
            const similarity = calculateSimilarity(lastMessage.content, content);
            if (similarity > 0.8) {
                log.debug(`üîÑ Doublon assistant √©vit√© (similarit√©: ${Math.round(similarity * 100)}%)`);
                return;
            }
        }
    }
    
    memory.push({
        type: msgType,
        content: content,
        timestamp: new Date().toISOString()
    });
    
    if (memory.length > 8) {
        memory.shift();
    }
    
    log.debug(`üí≠ Ajout√© en m√©moire [${userIdStr}]: ${msgType} (${content.length} chars)`);
    
    // ‚úÖ NOUVEAU: Sauvegarder en DB √©galement
    try {
        await saveConversationToDB(userIdStr, msgType, content);
    } catch (error) {
        log.debug(`üîÑ Erreur sauvegarde conversation DB: ${error.message}`);
    }
    
    saveDataImmediate().catch(err => 
        log.debug(`üîÑ Erreur sauvegarde m√©moire: ${err.message}`)
    );
}

// ‚úÖ FONCTION UTILITAIRE: Calculer la similarit√© entre deux textes
function calculateSimilarity(text1, text2) {
    if (!text1 || !text2) return 0;
    
    const normalize = (text) => text.toLowerCase().replace(/[^\w\s]/g, '').trim();
    const norm1 = normalize(text1);
    const norm2 = normalize(text2);
    
    if (norm1 === norm2) return 1;
    
    const words1 = new Set(norm1.split(/\s+/));
    const words2 = new Set(norm2.split(/\s+/));
    
    const intersection = new Set([...words1].filter(x => words2.has(x)));
    const union = new Set([...words1, ...words2]);
    
    return intersection.size / union.size;
}

function getMemoryContext(userId) {
    const context = [];
    const memory = userMemory.get(String(userId)) || [];
    
    for (const msg of memory) {
        const role = msg.type === 'user' ? 'user' : 'assistant';
        context.push({ role, content: msg.content });
    }
    
    return context;
}

function isAdmin(userId) {
    return ADMIN_IDS.has(String(userId));
}

// === FONCTIONS D'ENVOI AVEC GESTION DE TRONCATURE + DB ===

async function sendMessage(recipientId, text) {
    if (!PAGE_ACCESS_TOKEN) {
        log.error("‚ùå PAGE_ACCESS_TOKEN manquant");
        return { success: false, error: "No token" };
    }
    
    if (!text || typeof text !== 'string') {
        log.warning("‚ö†Ô∏è Message vide");
        return { success: false, error: "Empty message" };
    }
    
    const recipientIdStr = String(recipientId);
    
    // üÜï GESTION INTELLIGENTE DES MESSAGES LONGS
    if (text.length > 6000) {
        log.info(`üìè Message long d√©tect√© (${text.length} chars) pour ${recipientIdStr} - Division en chunks`);
        
        const chunks = splitMessageIntoChunks(text, 2000);
        
        if (chunks.length > 1) {
            // Envoyer le premier chunk avec indicateur de continuation
            const firstChunk = chunks[0] + "\n\nüìù *Tape \"continue\" pour la suite...*";
            
            // Sauvegarder l'√©tat de troncature en m√©moire
            truncatedMessages.set(recipientIdStr, {
                fullMessage: text,
                lastSentPart: chunks[0]
            });
            
            // Sauvegarder en DB
            try {
                await saveTruncatedMessageToDB(recipientIdStr, text, chunks[0]);
            } catch (error) {
                log.debug(`üîÑ Erreur sauvegarde message tronqu√© DB: ${error.message}`);
            }
            
            // Sauvegarder imm√©diatement sur GitHub
            saveDataImmediate();
            
            return await sendSingleMessage(recipientIdStr, firstChunk);
        }
    }
    
    // Message normal
    return await sendSingleMessage(recipientIdStr, text);
}

async function sendSingleMessage(recipientId, text) {
    let finalText = text;
    if (finalText.length > 6000 && !finalText.includes("‚ú® [Message Trop long]")) {
        finalText = finalText.substring(0, 5950) + "...\n‚ú® [Message Trop long]";
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: { text: finalText }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 15000
            }
        );
        
        if (response.status === 200) {
            return { success: true };
        } else {
            log.error(`‚ùå Erreur Facebook API: ${response.status}`);
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        log.error(`‚ùå Erreur envoi: ${error.message}`);
        return { success: false, error: error.message };
    }
}

async function sendImageMessage(recipientId, imageUrl, caption = "") {
    if (!PAGE_ACCESS_TOKEN) {
        log.error("‚ùå PAGE_ACCESS_TOKEN manquant");
        return { success: false, error: "No token" };
    }
    
    if (!imageUrl) {
        log.warning("‚ö†Ô∏è URL d'image vide");
        return { success: false, error: "Empty image URL" };
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: {
            attachment: {
                type: "image",
                payload: {
                    url: imageUrl,
                    is_reusable: true
                }
            }
        }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 20000
            }
        );
        
        if (response.status === 200) {
            if (caption) {
                await sleep(500);
                return await sendMessage(recipientId, caption);
            }
            return { success: true };
        } else {
            log.error(`‚ùå Erreur envoi image: ${response.status}`);
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        log.error(`‚ùå Erreur envoi image: ${error.message}`);
        return { success: false, error: error.message };
    }
}
