const express = require('express');
const axios = require('axios');
const bodyParser = require('body-parser');
const crypto = require('crypto');
const fs = require('fs');
const path = require('path');
const { google } = require('googleapis');

const app = express(); 
app.use(bodyParser.json());

// Configuration
const VERIFY_TOKEN = process.env.VERIFY_TOKEN || "nakamaverifytoken";
const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN || "";
const MISTRAL_API_KEY = process.env.MISTRAL_API_KEY || "";
const ADMIN_IDS = new Set(
    (process.env.ADMIN_IDS || "").split(",").map(id => id.trim()).filter(id => id)
);

// Configuration Google Drive - CORRIG√âE
const GDRIVE_CONFIG = {
    type: process.env.GOOGLE_TYPE || "service_account",
    project_id: process.env.GOOGLE_PROJECT_ID || "",
    private_key_id: process.env.GOOGLE_PRIVATE_KEY_ID || "",
    private_key: (process.env.GOOGLE_PRIVATE_KEY || "").replace(/\\n/g, '\n'),
    client_email: process.env.GOOGLE_CLIENT_EMAIL || "",
    client_id: process.env.GOOGLE_CLIENT_ID || "",
    auth_uri: process.env.GOOGLE_AUTH_URI || "https://accounts.google.com/o/oauth2/auth",
    token_uri: process.env.GOOGLE_TOKEN_URI || "https://oauth2.googleapis.com/token",
    auth_provider_x509_cert_url: process.env.GOOGLE_AUTH_PROVIDER_X509_CERT_URL || "",
    client_x509_cert_url: process.env.GOOGLE_CLIENT_X509_CERT_URL || ""
};

const GDRIVE_FOLDER_ID = process.env.GDRIVE_FOLDER_ID || "";

// M√©moire du bot (stockage local)
const userMemory = new Map();
const userList = new Set();
const userLastImage = new Map();

// Configuration des logs
const log = {
    info: (msg) => console.log(`${new Date().toISOString()} - INFO - ${msg}`),
    error: (msg) => console.error(`${new Date().toISOString()} - ERROR - ${msg}`),
    warning: (msg) => console.warn(`${new Date().toISOString()} - WARNING - ${msg}`),
    debug: (msg) => console.log(`${new Date().toISOString()} - DEBUG - ${msg}`)
};

// === GOOGLE DRIVE INTEGRATION - CORRIG√âE ===

let driveService = null;

// Initialiser Google Drive - VERSION CORRIG√âE
async function initGoogleDrive() {
    try {
        if (!GDRIVE_CONFIG.private_key || !GDRIVE_CONFIG.client_email || !GDRIVE_FOLDER_ID) {
            log.warning("‚ö†Ô∏è Configuration Google Drive incompl√®te - sauvegarde d√©sactiv√©e");
            log.warning(`‚ö†Ô∏è private_key: ${Boolean(GDRIVE_CONFIG.private_key)}`);
            log.warning(`‚ö†Ô∏è client_email: ${Boolean(GDRIVE_CONFIG.client_email)}`);
            log.warning(`‚ö†Ô∏è folder_id: ${Boolean(GDRIVE_FOLDER_ID)}`);
            return false;
        }

        // Cr√©er l'authentification avec scope √©tendu
        const auth = new google.auth.JWT(
            GDRIVE_CONFIG.client_email,
            null,
            GDRIVE_CONFIG.private_key,
            [
                'https://www.googleapis.com/auth/drive',
                'https://www.googleapis.com/auth/drive.file'
            ]
        );

        // Initialiser le service Drive
        driveService = google.drive({ version: 'v3', auth });
        
        log.info(`üîç Test d'acc√®s au dossier Google Drive ID: ${GDRIVE_FOLDER_ID}`);
        log.info(`üîë Service account: ${GDRIVE_CONFIG.client_email}`);
        
        // Test de connexion AM√âLIOR√â avec gestion d'erreurs d√©taill√©e
        try {
            // D'abord tester l'authentification g√©n√©rale
            const aboutResponse = await driveService.about.get({ fields: 'user' });
            log.info(`‚úÖ Authentification r√©ussie pour: ${aboutResponse.data.user?.emailAddress || 'Service Account'}`);
            
            // Ensuite tester l'acc√®s au dossier sp√©cifique
            const folderResponse = await driveService.files.get({ 
                fileId: GDRIVE_FOLDER_ID,
                fields: 'id, name, parents, permissions',
                supportsAllDrives: true
            });
            
            log.info(`‚úÖ Acc√®s au dossier r√©ussi: "${folderResponse.data.name}" (ID: ${folderResponse.data.id})`);
            
            // Test de cr√©ation d'un fichier temporaire pour v√©rifier les permissions d'√©criture
            const testFileName = `test_connection_${Date.now()}.json`;
            const testData = { test: true, timestamp: new Date().toISOString() };
            
            const testCreateResult = await createOrUpdateGDriveFile(testFileName, testData);
            if (testCreateResult) {
                log.info("‚úÖ Test d'√©criture r√©ussi - permissions OK");
                // Nettoyer le fichier de test
                await deleteGDriveFile(testFileName);
                log.info("üßπ Fichier de test supprim√©");
            } else {
                log.warning("‚ö†Ô∏è Test d'√©criture √©chou√© - v√©rifiez les permissions du dossier");
                return false;
            }
            
            log.info("‚úÖ Google Drive connect√© et configur√© avec succ√®s !");
            return true;
            
        } catch (accessError) {
            log.error(`‚ùå Erreur d'acc√®s au dossier Google Drive:`);
            log.error(`   Status: ${accessError.code || 'N/A'}`);
            log.error(`   Message: ${accessError.message}`);
            
            if (accessError.code === 404) {
                log.error(`‚ùå SOLUTION REQUISE: Le dossier ${GDRIVE_FOLDER_ID} n'existe pas ou le service account n'y a pas acc√®s`);
                log.error(`‚ùå √âTAPES √Ä SUIVRE:`);
                log.error(`   1. V√©rifiez que l'ID du dossier est correct`);
                log.error(`   2. Partagez le dossier avec l'email: ${GDRIVE_CONFIG.client_email}`);
                log.error(`   3. Donnez des permissions '√âditeur' au service account`);
            } else if (accessError.code === 403) {
                log.error(`‚ùå PERMISSIONS INSUFFISANTES: Le service account n'a pas les droits d'acc√®s`);
                log.error(`‚ùå SOLUTION: Partagez le dossier avec: ${GDRIVE_CONFIG.client_email} (permissions √âditeur)`);
            }
            
            return false;
        }
        
    } catch (error) {
        log.error(`‚ùå Erreur initialisation Google Drive: ${error.message}`);
        if (error.message.includes('private_key')) {
            log.error(`‚ùå V√©rifiez que GOOGLE_PRIVATE_KEY est correctement format√©e avec \\n pour les retours √† la ligne`);
        }
        return false;
    }
}

// Nouvelle fonction utilitaire pour cr√©er ou mettre √† jour un fichier
async function createOrUpdateGDriveFile(filename, data) {
    if (!driveService) {
        log.warning("‚ö†Ô∏è Google Drive non initialis√©");
        return false;
    }

    try {
        const jsonData = JSON.stringify(data, null, 2);
        
        // V√©rifier si le fichier existe d√©j√†
        const existingFiles = await driveService.files.list({
            q: `name='${filename}' and parents in '${GDRIVE_FOLDER_ID}' and trashed=false`,
            fields: 'files(id, name)',
            supportsAllDrives: true
        });

        const media = {
            mimeType: 'application/json',
            body: jsonData
        };

        const fileMetadata = {
            name: filename,
            parents: [GDRIVE_FOLDER_ID]
        };

        if (existingFiles.data.files.length > 0) {
            // Mettre √† jour le fichier existant
            const fileId = existingFiles.data.files[0].id;
            await driveService.files.update({
                fileId: fileId,
                media: media,
                fields: 'id',
                supportsAllDrives: true
            });
            log.debug(`üíæ Fichier ${filename} mis √† jour sur Google Drive`);
        } else {
            // Cr√©er un nouveau fichier
            await driveService.files.create({
                resource: fileMetadata,
                media: media,
                fields: 'id',
                supportsAllDrives: true
            });
            log.debug(`üíæ Fichier ${filename} cr√©√© sur Google Drive`);
        }

        return true;
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde ${filename}: ${error.message}`);
        if (error.code === 403) {
            log.error(`‚ùå Permissions insuffisantes - v√©rifiez le partage du dossier`);
        }
        return false;
    }
}

// Nouvelle fonction utilitaire pour supprimer un fichier
async function deleteGDriveFile(filename) {
    if (!driveService) return false;
    
    try {
        const files = await driveService.files.list({
            q: `name='${filename}' and parents in '${GDRIVE_FOLDER_ID}' and trashed=false`,
            fields: 'files(id)',
            supportsAllDrives: true
        });

        if (files.data.files.length > 0) {
            const fileId = files.data.files[0].id;
            await driveService.files.delete({
                fileId: fileId,
                supportsAllDrives: true
            });
            return true;
        }
        return false;
    } catch (error) {
        log.error(`‚ùå Erreur suppression ${filename}: ${error.message}`);
        return false;
    }
}

// Sauvegarder les donn√©es sur Google Drive - VERSION CORRIG√âE
async function saveToGoogleDrive(filename, data) {
    return await createOrUpdateGDriveFile(filename, data);
}

// Charger les donn√©es depuis Google Drive - VERSION CORRIG√âE
async function loadFromGoogleDrive(filename) {
    if (!driveService) {
        log.warning("‚ö†Ô∏è Google Drive non initialis√©");
        return null;
    }

    try {
        const files = await driveService.files.list({
            q: `name='${filename}' and parents in '${GDRIVE_FOLDER_ID}' and trashed=false`,
            fields: 'files(id, name)',
            supportsAllDrives: true
        });

        if (files.data.files.length === 0) {
            log.info(`üìÑ Fichier ${filename} non trouv√© sur Google Drive`);
            return null;
        }

        const fileId = files.data.files[0].id;
        const response = await driveService.files.get({
            fileId: fileId,
            alt: 'media',
            supportsAllDrives: true
        });

        const data = JSON.parse(response.data);
        log.info(`üì• Fichier ${filename} charg√© depuis Google Drive`);
        return data;
    } catch (error) {
        log.error(`‚ùå Erreur chargement ${filename}: ${error.message}`);
        return null;
    }
}

// Sauvegarder toutes les donn√©es - INCHANG√âE
async function saveAllData() {
    try {
        const timestamp = new Date().toISOString();
        
        // Convertir les Maps et Sets en objets s√©rialisables
        const userData = {
            userMemory: Object.fromEntries(userMemory),
            userList: Array.from(userList),
            userLastImage: Object.fromEntries(userLastImage),
            lastSave: timestamp,
            version: "4.0 Amicale + Vision"
        };

        const success = await saveToGoogleDrive('nakamabot_data.json', userData);
        
        if (success) {
            log.info(`üíæ Donn√©es sauvegard√©es avec succ√®s (${userList.size} utilisateurs, ${userMemory.size} conversations)`);
        }
        
        return success;
    } catch (error) {
        log.error(`‚ùå Erreur sauvegarde compl√®te: ${error.message}`);
        return false;
    }
}

// Charger toutes les donn√©es - INCHANG√âE
async function loadAllData() {
    try {
        const userData = await loadFromGoogleDrive('nakamabot_data.json');
        
        if (!userData) {
            log.info("üìÑ Aucune sauvegarde trouv√©e, d√©marrage avec des donn√©es vides");
            return;
        }

        // Restaurer les donn√©es
        if (userData.userMemory) {
            userMemory.clear();
            for (const [userId, memory] of Object.entries(userData.userMemory)) {
                userMemory.set(userId, memory);
            }
        }

        if (userData.userList) {
            userList.clear();
            userData.userList.forEach(userId => userList.add(userId));
        }

        if (userData.userLastImage) {
            userLastImage.clear();
            for (const [userId, imageUrl] of Object.entries(userData.userLastImage)) {
                userLastImage.set(userId, imageUrl);
            }
        }

        log.info(`üì• Donn√©es restaur√©es: ${userList.size} utilisateurs, ${userMemory.size} conversations, ${userLastImage.size} images`);
        if (userData.lastSave) {
            log.info(`üìÖ Derni√®re sauvegarde: ${userData.lastSave}`);
        }
    } catch (error) {
        log.error(`‚ùå Erreur chargement des donn√©es: ${error.message}`);
    }
}

// Sauvegarde automatique p√©riodique - INCHANG√âE
let autoSaveInterval = null;

function startAutoSave() {
    // Sauvegarder toutes les 5 minutes
    autoSaveInterval = setInterval(async () => {
        await saveAllData();
    }, 5 * 60 * 1000);
    
    log.info("üîÑ Sauvegarde automatique activ√©e (toutes les 5 minutes)");
}

function stopAutoSave() {
    if (autoSaveInterval) {
        clearInterval(autoSaveInterval);
        autoSaveInterval = null;
        log.info("üõë Sauvegarde automatique d√©sactiv√©e");
    }
}

// === FONCTIONS UTILITAIRES ORIGINALES - INCHANG√âES ===

function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

// Appel API Mistral avec retry
async function callMistralAPI(messages, maxTokens = 200, temperature = 0.7) {
    if (!MISTRAL_API_KEY) {
        return null;
    }
    
    const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${MISTRAL_API_KEY}`
    };
    
    const data = {
        model: "mistral-small-latest",
        messages: messages,
        max_tokens: maxTokens,
        temperature: temperature
    };
    
    for (let attempt = 0; attempt < 2; attempt++) {
        try {
            const response = await axios.post(
                "https://api.mistral.ai/v1/chat/completions",
                data,
                { headers, timeout: 30000 }
            );
            
            if (response.status === 200) {
                return response.data.choices[0].message.content;
            } else if (response.status === 401) {
                log.error("‚ùå Cl√© API Mistral invalide");
                return null;
            } else {
                if (attempt === 0) {
                    await sleep(2000);
                    continue;
                }
                return null;
            }
        } catch (error) {
            if (attempt === 0) {
                await sleep(2000);
                continue;
            }
            log.error(`‚ùå Erreur Mistral: ${error.message}`);
            return null;
        }
    }
    
    return null;
}

// Analyser une image avec l'API Vision de Mistral
async function analyzeImageWithVision(imageUrl) {
    if (!MISTRAL_API_KEY) {
        return null;
    }
    
    try {
        const headers = {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${MISTRAL_API_KEY}`
        };
        
        const messages = [{
            role: "user",
            content: [
                {
                    type: "text",
                    text: "D√©cris en d√©tail ce que tu vois dans cette image en fran√ßais. Sois pr√©cise et descriptive, comme si tu expliquais √† un(e) ami(e). Maximum 300 mots avec des emojis mignons. üíï"
                },
                {
                    type: "image_url",
                    image_url: {
                        url: imageUrl
                    }
                }
            ]
        }];
        
        const data = {
            model: "pixtral-12b-2409",
            messages: messages,
            max_tokens: 400,
            temperature: 0.3
        };
        
        const response = await axios.post(
            "https://api.mistral.ai/v1/chat/completions",
            data,
            { headers, timeout: 30000 }
        );
        
        if (response.status === 200) {
            return response.data.choices[0].message.content;
        } else {
            log.error(`‚ùå Erreur Vision API: ${response.status}`);
            return null;
        }
    } catch (error) {
        log.error(`‚ùå Erreur analyse image: ${error.message}`);
        return null;
    }
}

// Recherche web simul√©e
async function webSearch(query) {
    try {
        const searchContext = `Recherche web pour '${query}' en 2025. Je peux r√©pondre avec mes connaissances de 2025.`;
        const messages = [{
            role: "system",
            content: `Tu es NakamaBot, une assistante IA tr√®s gentille et amicale qui aide avec les recherches. Nous sommes en 2025. R√©ponds √† cette recherche: '${query}' avec tes connaissances de 2025. Si tu ne sais pas, dis-le gentiment. R√©ponds en fran√ßais avec une personnalit√© amicale et bienveillante, maximum 300 caract√®res.`
        }];
        
        return await callMistralAPI(messages, 150, 0.3);
    } catch (error) {
        log.error(`‚ùå Erreur recherche: ${error.message}`);
        return "Oh non ! Une petite erreur de recherche... D√©sol√©e ! üíï";
    }
}

// Gestion de la m√©moire avec sauvegarde automatique
function addToMemory(userId, msgType, content) {
    if (!userId || !msgType || !content) {
        return;
    }
    
    // Limiter la taille
    if (content.length > 1500) {
        content = content.substring(0, 1400) + "...[tronqu√©]";
    }
    
    if (!userMemory.has(userId)) {
        userMemory.set(userId, []);
    }
    
    const memory = userMemory.get(userId);
    memory.push({
        type: msgType,
        content: content,
        timestamp: new Date().toISOString()
    });
    
    // Garder seulement les 8 derniers messages
    if (memory.length > 8) {
        memory.shift();
    }
    
    // Sauvegarder de mani√®re asynchrone (sans attendre)
    saveAllData().catch(error => {
        log.error(`‚ùå Erreur sauvegarde automatique: ${error.message}`);
    });
}

function getMemoryContext(userId) {
    const context = [];
    const memory = userMemory.get(userId) || [];
    
    for (const msg of memory) {
        const role = msg.type === 'user' ? 'user' : 'assistant';
        context.push({ role, content: msg.content });
    }
    
    return context;
}

function isAdmin(userId) {
    return ADMIN_IDS.has(String(userId));
}

// Envoyer un message
async function sendMessage(recipientId, text) {
    if (!PAGE_ACCESS_TOKEN) {
        log.error("‚ùå PAGE_ACCESS_TOKEN manquant");
        return { success: false, error: "No token" };
    }
    
    if (!text || typeof text !== 'string') {
        log.warning("‚ö†Ô∏è Message vide");
        return { success: false, error: "Empty message" };
    }
    
    // Limiter taille
    if (text.length > 2000) {
        text = text.substring(0, 1950) + "...\n‚ú® [Message tronqu√© avec amour]";
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: { text: text }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 15000
            }
        );
        
        if (response.status === 200) {
            return { success: true };
        } else {
            log.error(`‚ùå Erreur Facebook API: ${response.status}`);
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        log.error(`‚ùå Erreur envoi: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// Envoyer une image
async function sendImageMessage(recipientId, imageUrl, caption = "") {
    if (!PAGE_ACCESS_TOKEN) {
        log.error("‚ùå PAGE_ACCESS_TOKEN manquant");
        return { success: false, error: "No token" };
    }
    
    if (!imageUrl) {
        log.warning("‚ö†Ô∏è URL d'image vide");
        return { success: false, error: "Empty image URL" };
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: {
            attachment: {
                type: "image",
                payload: {
                    url: imageUrl,
                    is_reusable: true
                }
            }
        }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 20000
            }
        );
        
        if (response.status === 200) {
            // Envoyer la caption s√©par√©ment si fournie
            if (caption) {
                await sleep(500);
                return await sendMessage(recipientId, caption);
            }
            return { success: true };
        } else {
            log.error(`‚ùå Erreur envoi image: ${response.status}`);
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        log.error(`‚ùå Erreur envoi image: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// === CHARGEMENT DES COMMANDES - INCHANG√â ===

const COMMANDS = new Map();

// Contexte partag√© pour toutes les commandes avec Google Drive
const commandContext = {
    // Variables globales
    VERIFY_TOKEN,
    PAGE_ACCESS_TOKEN,
    MISTRAL_API_KEY,
    ADMIN_IDS,
    userMemory,
    userList,
    userLastImage,
    
    // Fonctions utilitaires
    log,
    sleep,
    getRandomInt,
    callMistralAPI,
    analyzeImageWithVision,
    webSearch,
    addToMemory,
    getMemoryContext,
    isAdmin,
    sendMessage,
    sendImageMessage,
    
    // Fonctions Google Drive
    saveAllData,
    loadAllData,
    saveToGoogleDrive,
    loadFromGoogleDrive
};

// Fonction pour charger automatiquement toutes les commandes
function loadCommands() {
    const commandsDir = path.join(__dirname, 'Cmds');
    
    if (!fs.existsSync(commandsDir)) {
        log.error("‚ùå Dossier 'Cmds' introuvable");
        return;
    }
    
    const commandFiles = fs.readdirSync(commandsDir).filter(file => file.endsWith('.js'));
    
    log.info(`üîç Chargement de ${commandFiles.length} commandes...`);
    
    for (const file of commandFiles) {
        try {
            const commandPath = path.join(commandsDir, file);
            const commandName = path.basename(file, '.js');
            
            // Supprimer du cache si d√©j√† charg√© (pour le rechargement √† chaud)
            delete require.cache[require.resolve(commandPath)];
            
            // Charger la commande
            const commandModule = require(commandPath);
            
            // V√©rifier que le module exporte une fonction
            if (typeof commandModule !== 'function') {
                log.error(`‚ùå ${file} doit exporter une fonction`);
                continue;
            }
            
            // Enregistrer la commande
            COMMANDS.set(commandName, commandModule);
            log.info(`‚úÖ Commande '${commandName}' charg√©e`);
            
        } catch (error) {
            log.error(`‚ùå Erreur chargement ${file}: ${error.message}`);
        }
    }
    
    log.info(`üéâ ${COMMANDS.size} commandes charg√©es avec succ√®s !`);
}

// Traiter les commandes utilisateur
async function processCommand(senderId, messageText) {
    const senderIdStr = String(senderId);
    
    if (!messageText || typeof messageText !== 'string') {
        return "ü§ñ Oh l√† l√† ! Message vide ! Tape /start ou /help pour commencer notre belle conversation ! üíï";
    }
    
    messageText = messageText.trim();
    
    // Si ce n'est pas une commande, traiter comme un chat normal
    if (!messageText.startsWith('/')) {
        if (COMMANDS.has('chat')) {
            return await COMMANDS.get('chat')(senderId, messageText, commandContext);
        }
        return "ü§ñ Coucou ! Tape /start ou /help pour d√©couvrir ce que je peux faire ! ‚ú®";
    }
    
    // Parser la commande
    const parts = messageText.substring(1).split(' ');
    const command = parts[0].toLowerCase();
    const args = parts.slice(1).join(' ');
    
    if (COMMANDS.has(command)) {
        try {
            return await COMMANDS.get(command)(senderId, args, commandContext);
        } catch (error) {
            log.error(`‚ùå Erreur commande ${command}: ${error.message}`);
            return `üí• Oh non ! Petite erreur dans /${command} ! R√©essaie ou tape /help ! üíï`;
        }
    }
    
    return `‚ùì Oh ! La commande /${command} m'est inconnue ! Tape /help pour voir tout ce que je sais faire ! ‚ú®üíï`;
}

// === ROUTES EXPRESS - QUELQUES AM√âLIORATIONS ===

// Route d'accueil
app.get('/', (req, res) => {
    res.json({
        status: "ü§ñ NakamaBot v4.0 Amicale + Vision + Google Drive Online ! üíñ",
        creator: "Durand",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie",
        year: "2025",
        commands: COMMANDS.size,
        users: userList.size,
        conversations: userMemory.size,
        images_stored: userLastImage.size,
        version: "4.0 Amicale + Vision + Google Drive - CORRIG√âE",
        features: [
            "G√©n√©ration d'images IA",
            "Transformation anime", 
            "Analyse d'images IA",
            "Chat intelligent et doux",
            "Broadcast admin",
            "Recherche 2025",
            "Stats r√©serv√©es admin",
            "Sauvegarde Google Drive automatique"
        ],
        google_drive: {
            enabled: Boolean(driveService),
            auto_save: Boolean(autoSaveInterval),
            folder_id: GDRIVE_FOLDER_ID,
            service_account: GDRIVE_CONFIG.client_email
        },
        last_update: new Date().toISOString()
    });
});

// Route pour forcer une sauvegarde (admin seulement)
app.post('/admin/save', async (req, res) => {
    const adminId = req.body.admin_id;
    
    if (!adminId || !isAdmin(adminId)) {
        return res.status(403).json({ error: "Acc√®s refus√© - Admin requis" });
    }
    
    try {
        const success = await saveAllData();
        if (success) {
            res.json({ 
                success: true, 
                message: "Sauvegarde forc√©e effectu√©e",
                timestamp: new Date().toISOString(),
                data: {
                    users: userList.size,
                    conversations: userMemory.size,
                    images: userLastImage.size
                }
            });
        } else {
            res.status(500).json({ error: "√âchec de la sauvegarde" });
        }
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Route pour restaurer les donn√©es (admin seulement)
app.post('/admin/restore', async (req, res) => {
    const adminId = req.body.admin_id;
    
    if (!adminId || !isAdmin(adminId)) {
        return res.status(403).json({ error: "Acc√®s refus√© - Admin requis" });
    }
    
    try {
        await loadAllData();
        res.json({ 
            success: true, 
            message: "Donn√©es restaur√©es depuis Google Drive",
            timestamp: new Date().toISOString(),
            data: {
                users: userList.size,
                conversations: userMemory.size,
                images: userLastImage.size
            }
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Route pour tester la connexion Google Drive (admin seulement)
app.post('/admin/test-gdrive', async (req, res) => {
    const adminId = req.body.admin_id;
    
    if (!adminId || !isAdmin(adminId)) {
        return res.status(403).json({ error: "Acc√®s refus√© - Admin requis" });
    }
    
    try {
        const testResult = await initGoogleDrive();
        res.json({ 
            success: testResult,
            message: testResult ? "Test Google Drive r√©ussi" : "Test Google Drive √©chou√©",
            details: {
                service_initialized: Boolean(driveService),
                folder_id: GDRIVE_FOLDER_ID,
                service_account: GDRIVE_CONFIG.client_email,
                auto_save_active: Boolean(autoSaveInterval)
            },
            timestamp: new Date().toISOString()
        });
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Webhook Facebook Messenger
app.get('/webhook', (req, res) => {
    const mode = req.query['hub.mode'];
    const token = req.query['hub.verify_token'];
    const challenge = req.query['hub.challenge'];
    
    if (mode === 'subscribe' && token === VERIFY_TOKEN) {
        log.info('‚úÖ Webhook v√©rifi√©');
        res.status(200).send(challenge);
    } else {
        log.warning('‚ùå √âchec v√©rification webhook');
        res.status(403).send('Verification failed');
    }
});

app.post('/webhook', async (req, res) => {
    try {
        const data = req.body;
        
        if (!data) {
            log.warning('‚ö†Ô∏è Aucune donn√©e re√ßue');
            return res.status(400).json({ error: "No data received" });
        }
        
        // Traiter les messages
        for (const entry of data.entry || []) {
            for (const event of entry.messaging || []) {
                const senderId = event.sender?.id;
                
                if (!senderId) {
                    continue;
                }
                
                const senderIdStr = String(senderId);
                
                // Messages non-echo
                if (event.message && !event.message.is_echo) {
                    // Ajouter utilisateur (automatiquement sauvegard√© via addToMemory)
                    userList.add(senderIdStr);
                    
                    // V√©rifier si c'est une image
                    if (event.message.attachments) {
                        for (const attachment of event.message.attachments) {
                            if (attachment.type === 'image') {
                                // Stocker l'URL de l'image pour les commandes /anime et /vision
                                const imageUrl = attachment.payload?.url;
                                if (imageUrl) {
                                    userLastImage.set(senderIdStr, imageUrl);
                                    log.info(`üì∏ Image re√ßue de ${senderId}`);
                                    
                                    // D√©clencher une sauvegarde
                                    saveAllData().catch(error => {
                                        log.error(`‚ùå Erreur sauvegarde image: ${error.message}`);
                                    });
                                    
                                    // R√©pondre automatiquement
                                    const response = "üì∏ Super ! J'ai bien re√ßu ton image ! ‚ú®\n\nüé≠ Tape /anime pour la transformer en style anime !\nüëÅÔ∏è Tape /vision pour que je te dise ce que je vois !\n\nüíï Ou continue √† me parler normalement !";
                                    await sendMessage(senderId, response);
                                    continue;
                                }
                            }
                        }
                    }
                    
                    // R√©cup√©rer texte
                    const messageText = event.message.text?.trim();
                    
                    if (messageText) {
                        log.info(`üì® Message de ${senderId}: ${messageText.substring(0, 50)}...`);
                        
                        // Traiter commande
                        const response = await processCommand(senderId, messageText);
                        
                        if (response) {
                            // V√©rifier si c'est une image
                            if (typeof response === 'object' && response.type === 'image') {
                                // Envoyer image
                                const sendResult = await sendImageMessage(senderId, response.url, response.caption);
                                
                                if (sendResult.success) {
                                    log.info(`‚úÖ Image envoy√©e √† ${senderId}`);
                                } else {
                                    log.warning(`‚ùå √âchec envoi image √† ${senderId}`);
                                    // Fallback texte
                                    await sendMessage(senderId, "üé® Image cr√©√©e avec amour mais petite erreur d'envoi ! R√©essaie ! üíï");
                                }
                            } else {
                                // Message texte normal
                                const sendResult = await sendMessage(senderId, response);
                                
                                if (sendResult.success) {
                                    log.info(`‚úÖ R√©ponse envoy√©e √† ${senderId}`);
                                } else {
                                    log.warning(`‚ùå √âchec envoi √† ${senderId}`);
                                }
                            }
                        }
                    }
                }
            }
        }
    } catch (error) {
        log.error(`‚ùå Erreur webhook: ${error.message}`);
        return res.status(500).json({ error: `Webhook error: ${error.message}` });
    }
    
    res.status(200).json({ status: "ok" });
});

// Statistiques publiques limit√©es
app.get('/stats', (req, res) => {
    res.json({
        users_count: userList.size,
        conversations_count: userMemory.size,
        images_stored: userLastImage.size,
        commands_available: COMMANDS.size,
        version: "4.0 Amicale + Vision + Google Drive - CORRIG√âE",
        creator: "Durand",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie",
        year: 2025,
        features: [
            "AI Image Generation",
            "Anime Transformation", 
            "AI Image Analysis",
            "Friendly Chat",
            "Admin Stats",
            "Help Suggestions",
            "Google Drive Auto-Save"
        ],
        google_drive: {
            enabled: Boolean(driveService),
            auto_save_active: Boolean(autoSaveInterval)
        },
        note: "Statistiques d√©taill√©es r√©serv√©es aux admins via /stats"
    });
});

// Sant√© du bot - AM√âLIOR√âE
app.get('/health', (req, res) => {
    const healthStatus = {
        status: "healthy",
        personality: "Super gentille et amicale, comme une tr√®s bonne amie üíñ",
        services: {
            ai: Boolean(MISTRAL_API_KEY),
            vision: Boolean(MISTRAL_API_KEY),
            facebook: Boolean(PAGE_ACCESS_TOKEN),
            google_drive: Boolean(driveService),
            auto_save: Boolean(autoSaveInterval)
        },
        data: {
            users: userList.size,
            conversations: userMemory.size,
            images_stored: userLastImage.size,
            commands_loaded: COMMANDS.size
        },
        google_drive_details: {
            service_account: GDRIVE_CONFIG.client_email,
            folder_id: GDRIVE_FOLDER_ID,
            connected: Boolean(driveService)
        },
        version: "4.0 Amicale + Vision + Google Drive - CORRIG√âE",
        creator: "Durand",
        timestamp: new Date().toISOString()
    };
    
    // V√©rifier probl√®mes
    const issues = [];
    if (!MISTRAL_API_KEY) {
        issues.push("Cl√© IA manquante");
    }
    if (!PAGE_ACCESS_TOKEN) {
        issues.push("Token Facebook manquant");
    }
    if (COMMANDS.size === 0) {
        issues.push("Aucune commande charg√©e");
    }
    if (!driveService) {
        issues.push("Google Drive non connect√© - V√©rifiez les permissions du dossier");
    }
    if (!autoSaveInterval) {
        issues.push("Sauvegarde automatique inactive");
    }
    
    if (issues.length > 0) {
        healthStatus.status = "degraded";
        healthStatus.issues = issues;
    }
    
    const statusCode = healthStatus.status === "healthy" ? 200 : 503;
    res.status(statusCode).json(healthStatus);
});

// === D√âMARRAGE AM√âLIOR√â ===

const PORT = process.env.PORT || 5000;

async function startBot() {
    log.info("üöÄ D√©marrage NakamaBot v4.0 Amicale + Vision + Google Drive - VERSION CORRIG√âE");
    log.info("üíñ Personnalit√© super gentille et amicale, comme une tr√®s bonne amie");
    log.info("üë®‚Äçüíª Cr√©√©e par Durand");
    log.info("üìÖ Ann√©e: 2025");

    // V√©rifier variables critiques d'abord
    const missingVars = [];
    if (!PAGE_ACCESS_TOKEN) {
        missingVars.push("PAGE_ACCESS_TOKEN");
    }
    if (!MISTRAL_API_KEY) {
        missingVars.push("MISTRAL_API_KEY");
    }
    if (!GDRIVE_FOLDER_ID) {
        missingVars.push("GDRIVE_FOLDER_ID");
    }
    if (!GDRIVE_CONFIG.client_email) {
        missingVars.push("GOOGLE_CLIENT_EMAIL");
    }
    if (!GDRIVE_CONFIG.private_key) {
        missingVars.push("GOOGLE_PRIVATE_KEY");
    }

    if (missingVars.length > 0) {
        log.error(`‚ùå Variables manquantes CRITIQUES: ${missingVars.join(', ')}`);
        log.error("‚ùå Le bot ne pourra pas fonctionner correctement sans ces variables !");
    } else {
        log.info("‚úÖ Toutes les variables d'environnement critiques sont pr√©sentes");
    }

    // Initialiser Google Drive avec diagnostic d√©taill√©
    log.info("üîß Initialisation Google Drive...");
    const driveInitialized = await initGoogleDrive();
    
    if (driveInitialized) {
        log.info("‚úÖ Google Drive initialis√© avec succ√®s !");
        
        // Charger les donn√©es existantes
        log.info("üì• Chargement des donn√©es existantes...");
        await loadAllData();
        
        // D√©marrer la sauvegarde automatique
        startAutoSave();
    } else {
        log.error("‚ùå Google Drive non initialis√© - Sauvegarde d√©sactiv√©e");
        log.error("üõ†Ô∏è ACTIONS REQUISES POUR CORRIGER:");
        log.error(`   1. V√©rifiez que le dossier ${GDRIVE_FOLDER_ID} existe`);
        log.error(`   2. Partagez ce dossier avec: ${GDRIVE_CONFIG.client_email || 'SERVICE_ACCOUNT_EMAIL'}`);
        log.error(`   3. Donnez des permissions '√âditeur' au service account`);
        log.error(`   4. V√©rifiez que GOOGLE_PRIVATE_KEY est correctement format√©e`);
    }

    // Charger toutes les commandes
    log.info("üìÇ Chargement des commandes...");
    loadCommands();

    log.info(`üé® ${COMMANDS.size} commandes disponibles`);
    log.info(`üîê ${ADMIN_IDS.size} administrateurs configur√©s`);
    log.info(`üë• ${userList.size} utilisateurs charg√©s`);
    log.info(`üí¨ ${userMemory.size} conversations restaur√©es`);
    log.info(`üì∏ ${userLastImage.size} images en m√©moire`);
    log.info(`üíæ Google Drive: ${driveService ? '‚úÖ Connect√©' : '‚ùå D√©connect√©'}`);
    log.info(`üîÑ Sauvegarde auto: ${autoSaveInterval ? '‚úÖ Active (5min)' : '‚ùå Inactive'}`);
    log.info(`üåê Serveur sur le port ${PORT}`);
    
    if (driveService) {
        log.info("üéâ NakamaBot Amicale + Vision + Google Drive pr√™te √† aider avec gentillesse !");
    } else {
        log.warning("‚ö†Ô∏è NakamaBot d√©marr√©e SANS Google Drive - Fonctionnement d√©grad√©");
    }

    app.listen(PORT, () => {
        log.info(`üåê Serveur d√©marr√© sur le port ${PORT}`);
        log.info("üîó Routes disponibles:");
        log.info("   GET /           - Statut du bot");
        log.info("   GET /health     - Sant√© d√©taill√©e");
        log.info("   GET /stats      - Statistiques publiques");
        log.info("   POST /admin/*   - Routes administrateur");
    });
}

// Gestion propre de l'arr√™t avec sauvegarde finale - AM√âLIOR√âE
async function gracefulShutdown(signal) {
    log.info(`üõë Signal ${signal} re√ßu - Arr√™t du bot avec tendresse...`);
    
    // Arr√™ter la sauvegarde automatique
    stopAutoSave();
    
    // Effectuer une derni√®re sauvegarde si Google Drive est disponible
    if (driveService) {
        try {
            log.info("üíæ Sauvegarde finale en cours...");
            const success = await saveAllData();
            if (success) {
                log.info("üíæ Sauvegarde finale termin√©e avec succ√®s");
            } else {
                log.warning("‚ö†Ô∏è √âchec de la sauvegarde finale");
            }
        } catch (error) {
            log.error(`‚ùå Erreur sauvegarde finale: ${error.message}`);
        }
    } else {
        log.warning("‚ö†Ô∏è Google Drive non disponible - Sauvegarde finale ignor√©e");
    }
    
    log.info("üëã NakamaBot s'arr√™te avec amour - √Ä bient√¥t !");
    process.exit(0);
}

process.on('SIGINT', () => gracefulShutdown('SIGINT'));
process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));

// Gestion des erreurs non captur√©es
process.on('unhandledRejection', (reason, promise) => {
    log.error(`‚ùå Promesse non g√©r√©e: ${reason}`);
});

process.on('uncaughtException', (error) => {
    log.error(`‚ùå Exception non captur√©e: ${error.message}`);
    gracefulShutdown('UNCAUGHT_EXCEPTION');
});

// D√©marrer le bot
startBot().catch(error => {
    log.error(`‚ùå Erreur fatale au d√©marrage: ${error.message}`);
    process.exit(1);
});
