/**
 * Commande /ds - Conversation avec DeepSeek R1 via OpenRouter
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - Message de conversation
 * @param {object} ctx - Contexte partag√© du bot 
 */

const axios = require('axios');

// Configuration DeepSeek via OpenRouter
const OPENROUTER_API_KEY = process.env.OPENROUTER_API_KEY || "";
const DEEPSEEK_MODEL = "deepseek/deepseek-r1-0528:free";
const OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1";

// Fonction pour appeler DeepSeek via OpenRouter
async function callDeepSeekAPI(messages, maxTokens = 2000, temperature = 0.7) {
    if (!OPENROUTER_API_KEY) {
        return null;
    }
    
    const headers = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${OPENROUTER_API_KEY}`,
        "HTTP-Referer": "https://nakamabot.app", // Site URL pour les rankings
        "X-Title": "NakamaBot - Assistant IA Amical" // Titre du site
    };
    
    const data = {
        model: DEEPSEEK_MODEL,
        messages: messages,
        max_tokens: maxTokens,
        temperature: temperature
    };
    
    for (let attempt = 0; attempt < 2; attempt++) {
        try {
            const response = await axios.post(
                `${OPENROUTER_BASE_URL}/chat/completions`,
                data,
                { headers, timeout: 45000 } // Timeout plus long pour DeepSeek
            );
            
            if (response.status === 200 && response.data.choices?.[0]?.message?.content) {
                return response.data.choices[0].message.content;
            } else if (response.status === 401) {
                console.error("‚ùå Cl√© API OpenRouter invalide");
                return null;
            } else {
                if (attempt === 0) {
                    await new Promise(resolve => setTimeout(resolve, 3000));
                    continue;
                }
                return null;
            }
        } catch (error) {
            if (attempt === 0) {
                await new Promise(resolve => setTimeout(resolve, 3000));
                continue;
            }
            console.error(`‚ùå Erreur DeepSeek: ${error.message}`);
            return null;
        }
    }
    
    return null;
}

module.exports = async function cmdDeepSeek(senderId, args, ctx) {
    const { addToMemory, getMemoryContext, log } = ctx;
    
    if (!args.trim()) {
        const welcomeMsg = "üß† Salut ! Je suis DeepSeek R1, une IA de raisonnement avanc√©e cr√©√©e par DeepSeek ! üöÄ\n\nüí≠ Je peux t'aider avec :\n‚Ä¢ Raisonnement complexe et logique\n‚Ä¢ Analyse approfondie de probl√®mes\n‚Ä¢ Math√©matiques et sciences\n‚Ä¢ Programmation avanc√©e\n‚Ä¢ R√©flexion cr√©ative\n\n‚ú® Pose-moi une question qui n√©cessite de la r√©flexion profonde !";
        addToMemory(String(senderId), 'assistant', welcomeMsg);
        return welcomeMsg;
    }
    
    // Enregistrer le message utilisateur
    addToMemory(String(senderId), 'user', args);
    
    // R√©cup√©ration du contexte de conversation
    const context = getMemoryContext(String(senderId));
    const messageCount = context.filter(msg => msg.role === 'user').length;
    
    // Syst√®me de prompt optimis√© pour DeepSeek R1
    const systemPrompt = `Tu es DeepSeek R1, une IA de raisonnement avanc√©e d√©velopp√©e par DeepSeek, int√©gr√©e dans NakamaBot par Durand.

CAPACIT√âS SP√âCIALIS√âES:
- üß† Raisonnement profond et analytique
- üîç Analyse multicouche des probl√®mes complexes  
- üßÆ Excellence en math√©matiques, sciences et logique
- üíª Programmation et algorithmes avanc√©s
- üéØ R√©solution m√©thodique de probl√®mes
- ü§î Pens√©e critique et √©valuation d'arguments

STYLE DE RAISONNEMENT:
- D√©compose les probl√®mes complexes √©tape par √©tape
- Explique ton processus de r√©flexion clairement
- Consid√®re plusieurs angles avant de conclure
- Utilise des exemples concrets quand appropri√©
- Reconnais les limites et incertitudes

COMMUNICATION:
- Sois pr√©cis et structur√© dans tes r√©ponses
- Utilise des emojis pour clarifier (üîç analyse, üí° insight, ‚ö° solution)
- Maximum 2000 caract√®res par r√©ponse
- Adapte ton niveau de d√©tail selon la complexit√© du probl√®me
- ${messageCount >= 3 ? 'Tu peux sugg√©rer /help pour d√©couvrir d\'autres fonctionnalit√©s de NakamaBot' : ''}

SP√âCIALIT√âS:
- Questions scientifiques et techniques
- Probl√®mes math√©matiques complexes  
- Analyse de code et optimisation
- Raisonnement logique et philosophique
- Strat√©gies de r√©solution cr√©ative

Tu es une IA de raisonnement de pointe qui excelle dans l'analyse profonde et la r√©solution m√©thodique de probl√®mes complexes.`;

    const messages = [{ role: "system", content: systemPrompt }];
    messages.push(...context);
    messages.push({ role: "user", content: args });
    
    log.info(`üß† Appel DeepSeek R1 pour ${senderId}: ${args.substring(0, 50)}...`);
    
    const response = await callDeepSeekAPI(messages, 2000, 0.3); // Temp√©rature plus basse pour plus de pr√©cision
    
    if (response) {
        // Nettoyer la r√©ponse si elle contient des balises de raisonnement
        let cleanResponse = response;
        
        // Supprimer les balises <think> si pr√©sentes (DeepSeek R1 les utilise parfois)
        cleanResponse = cleanResponse.replace(/<think>[\s\S]*?<\/think>/gi, '');
        
        // Nettoyer les espaces multiples
        cleanResponse = cleanResponse.replace(/\n{3,}/g, '\n\n').trim();
        
        addToMemory(String(senderId), 'assistant', cleanResponse);
        log.info(`‚úÖ R√©ponse DeepSeek g√©n√©r√©e pour ${senderId}`);
        return cleanResponse;
    } else {
        const errorResponse = "ü§ñ D√©sol√©, DeepSeek R1 rencontre une difficult√© technique en ce moment. Peux-tu r√©essayer dans quelques instants ? En attendant, tu peux utiliser /chat pour une conversation normale ! üí´";
        addToMemory(String(senderId), 'assistant', errorResponse);
        log.warning(`‚ùå √âchec appel DeepSeek pour ${senderId}`);
        return errorResponse;
    }
};
