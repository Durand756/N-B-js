/**
 * Commande /chat - Conversation intelligente avec auto-ex√©cution directe de commandes
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - Message de conversation
 * @param {object} ctx - Contexte partag√© du bot avec acc√®s complet
 */ 
module.exports = async function cmdChat(senderId, args, ctx) {
    const { 
        addToMemory, 
        getMemoryContext, 
        callMistralAPI, 
        webSearch,
        userMemory,
        userList,
        userLastImage,
        clanData,
        commandData,
        log,
        sendMessage,
        sendImageMessage,
        isAdmin,
        saveDataImmediate,
        COMMANDS // Map de toutes les commandes disponibles
    } = ctx; 
    
    const senderIdStr = String(senderId);
    
    // Message d'accueil si pas d'arguments
    if (!args.trim()) {
        return "üí¨ Salut je suis NakamaBot! Je suis l√† pour toi ! Dis-moi ce qui t'int√©resse et on va avoir une conversation g√©niale ! ‚ú®\n\nüí° Tu peux me demander n'importe quoi : cr√©er des images, analyser tes photos, jouer aux clans, voir ton rang, ou juste discuter !";
    }
    
    // Enregistrer le message utilisateur
    addToMemory(senderIdStr, 'user', args);
    
    // === D√âTECTION ET EX√âCUTION DIRECTE DES COMMANDES ===
    const message = args.toLowerCase().trim();
    
    try {
        // üé® G√âN√âRATION D'IMAGES
        if (message.includes('g√©n√®re') || message.includes('cr√©e') || message.includes('dessine') || 
            message.includes('image de') || message.includes('photo de') || message.includes('illustration') ||
            message.includes('cr√©er une image') || message.includes('faire une image') ||
            /(?:fais|fait|create?)\s*(?:moi|nous)?\s*(?:une?\s*)?(?:image|photo|dessin)/i.test(message)) {
            
            log.info(`üé® [AUTO-EXEC] G√©n√©ration d'image pour ${senderId}`);
            
            // Extraire la description de l'image du message naturel
            let imageDescription = args
                .replace(/(?:g√©n√®re|cr√©e|dessine|fais|fait|cr√©er|faire|create)\s*(?:moi|nous)?\s*(?:une?\s*)?(?:image|photo|illustration|dessin)\s*(?:de\s*|d')?/gi, '')
                .replace(/(?:s'il te pla√Æt|stp|please)/gi, '')
                .trim();
            
            // Si pas de description claire, prendre tout apr√®s les mots-cl√©s
            if (!imageDescription || imageDescription.length < 3) {
                const words = args.split(' ');
                const keywordIndex = words.findIndex(word => 
                    /g√©n√®re|cr√©e|dessine|fais|fait|image|photo|illustration/i.test(word)
                );
                if (keywordIndex !== -1 && keywordIndex < words.length - 1) {
                    imageDescription = words.slice(keywordIndex + 1).join(' ').replace(/^(de |d')/i, '').trim();
                }
            }
            
            if (imageDescription && COMMANDS && COMMANDS.has('image')) {
                log.info(`üé® [EXEC] /image ${imageDescription}`);
                return await COMMANDS.get('image')(senderId, imageDescription, ctx);
            }
        }
        
        // üëÅÔ∏è ANALYSE D'IMAGES
        if ((message.includes('vois') || message.includes('d√©cris') || message.includes('analyse') ||
            message.includes('que vois-tu') || message.includes('dans cette image') || message.includes('regarde') ||
            message.includes('dis-moi ce que') || message.includes('explique cette image')) &&
            userLastImage.has(senderIdStr)) {
            
            log.info(`üëÅÔ∏è [AUTO-EXEC] Analyse d'image pour ${senderId}`);
            
            if (COMMANDS && COMMANDS.has('vision')) {
                log.info(`üëÅÔ∏è [EXEC] /vision`);
                return await COMMANDS.get('vision')(senderId, args, ctx);
            }
        }
        
        // üå∏ TRANSFORMATION ANIME
        if ((message.includes('anime') || message.includes('manga') || message.includes('kawaii') ||
            message.includes('style anime') || message.includes('japonais') || 
            (message.includes('transform') && message.includes('anime'))) &&
            userLastImage.has(senderIdStr)) {
            
            log.info(`üå∏ [AUTO-EXEC] Transformation anime pour ${senderId}`);
            
            if (COMMANDS && COMMANDS.has('anime')) {
                log.info(`üå∏ [EXEC] /anime`);
                return await COMMANDS.get('anime')(senderId, '', ctx);
            }
        }
        
        // üéµ RECHERCHE MUSIQUE
        if (message.includes('musique') || message.includes('chanson') || message.includes('√©couter') ||
            message.includes('music') || message.includes('son') || 
            (message.includes('joue') && !message.includes('clan')) ||
            /(?:cherche|trouve|met)\s*(?:moi)?\s*(?:la\s*)?(?:musique|chanson)/i.test(message)) {
            
            log.info(`üéµ [AUTO-EXEC] Recherche musique pour ${senderId}`);
            
            // Extraire le titre de la musique
            let musicQuery = args
                .replace(/(?:musique|chanson|√©couter|music|son|joue|jouer|cherche|trouve|met)\s*(?:moi)?\s*(?:la\s*)?(?:de\s*|d')?/gi, '')
                .replace(/(?:s'il te pla√Æt|stp|please)/gi, '')
                .trim();
            
            if (!musicQuery || musicQuery.length < 2) {
                const words = args.split(' ');
                const keywordIndex = words.findIndex(word => 
                    /musique|chanson|√©couter|music|son|joue|cherche|trouve|met/i.test(word)
                );
                if (keywordIndex !== -1 && keywordIndex < words.length - 1) {
                    musicQuery = words.slice(keywordIndex + 1).join(' ').trim();
                }
            }
            
            if (musicQuery && COMMANDS && COMMANDS.has('music')) {
                log.info(`üéµ [EXEC] /music ${musicQuery}`);
                return await COMMANDS.get('music')(senderId, musicQuery, ctx);
            }
        }
        
        // üè∞ SYST√àME DE CLANS
        if (message.includes('clan') || message.includes('bataille') || message.includes('guerre') ||
            message.includes('arm√©e') || message.includes('soldat') || message.includes('combat') ||
            message.includes('attaque') || message.includes('d√©fense')) {
            
            log.info(`üè∞ [AUTO-EXEC] Commande clan pour ${senderId}`);
            
            if (COMMANDS && COMMANDS.has('clan')) {
                // D√©tecter l'intention sp√©cifique et ex√©cuter la bonne sous-commande
                if (message.includes('info') || message.includes('status') || message.includes('mon clan')) {
                    log.info(`üè∞ [EXEC] /clan info`);
                    return await COMMANDS.get('clan')(senderId, 'info', ctx);
                } else if (message.includes('aide') || message.includes('help') || message.includes('comment')) {
                    log.info(`üè∞ [EXEC] /clan help`);
                    return await COMMANDS.get('clan')(senderId, 'help', ctx);
                } else if (message.includes('liste') || message.includes('list') || message.includes('voir les clans')) {
                    log.info(`üè∞ [EXEC] /clan list`);
                    return await COMMANDS.get('clan')(senderId, 'list', ctx);
                } else if (message.includes('unit√©s') || message.includes('units') || message.includes('arm√©e') || message.includes('soldats')) {
                    log.info(`üè∞ [EXEC] /clan units`);
                    return await COMMANDS.get('clan')(senderId, 'units', ctx);
                } else if (message.includes('bataille') || message.includes('attaque') || message.includes('combat')) {
                    // Extraire l'ID du clan cible
                    const battleMatch = message.match(/(?:bataille|attaque|combat)\s+(?:contre\s+)?(\w+)/);
                    if (battleMatch) {
                        const targetId = battleMatch[1];
                        log.info(`üè∞ [EXEC] /clan battle ${targetId}`);
                        return await COMMANDS.get('clan')(senderId, `battle ${targetId}`, ctx);
                    } else {
                        log.info(`üè∞ [EXEC] /clan help`);
                        return await COMMANDS.get('clan')(senderId, 'help', ctx);
                    }
                } else {
                    // Commande g√©n√©rale clan
                    log.info(`üè∞ [EXEC] /clan help`);
                    return await COMMANDS.get('clan')(senderId, 'help', ctx);
                }
            }
        }
        
        // ‚≠ê SYST√àME DE RANG
        if (message.includes('rang') || message.includes('niveau') || message.includes('level') ||
            message.includes('exp√©rience') || message.includes('exp') || message.includes('points') ||
            message.includes('mon rang') || message.includes('ma carte') || message.includes('progression')) {
            
            log.info(`‚≠ê [AUTO-EXEC] Commande rang pour ${senderId}`);
            
            if (COMMANDS && COMMANDS.has('rank')) {
                log.info(`‚≠ê [EXEC] /rank`);
                return await COMMANDS.get('rank')(senderId, '', ctx);
            }
        }
        
        // üìä STATISTIQUES (Admin uniquement)
        if ((message.includes('stats') || message.includes('statistiques') || message.includes('donn√©es') ||
            message.includes('infos syst√®me') || message.includes('√©tat du bot')) &&
            isAdmin(senderId)) {
            
            log.info(`üìä [AUTO-EXEC] Stats admin pour ${senderId}`);
            
            if (COMMANDS && COMMANDS.has('stats')) {
                log.info(`üìä [EXEC] /stats`);
                return await COMMANDS.get('stats')(senderId, '', ctx);
            }
        }
        
        // üì¢ BROADCAST (Admin uniquement)
        if ((message.startsWith('broadcast') || message.includes('diffuse') || message.includes('annonce')) && 
            isAdmin(senderId)) {
            
            log.info(`üì¢ [AUTO-EXEC] Broadcast admin pour ${senderId}`);
            
            if (COMMANDS && COMMANDS.has('broadcast')) {
                let broadcastMessage = args
                    .replace(/^(?:broadcast|diffuse|annonce)\s*/i, '')
                    .replace(/(?:√† tous|partout)/gi, '')
                    .trim();
                
                if (broadcastMessage) {
                    log.info(`üì¢ [EXEC] /broadcast ${broadcastMessage}`);
                    return await COMMANDS.get('broadcast')(senderId, broadcastMessage, ctx);
                }
            }
        }
        
        // ‚ùì SYST√àME D'AIDE
        if (message.includes('aide') || message.includes('help') || 
            message.includes('commande') || message.includes('que peux-tu faire') ||
            message.includes('comment utiliser') || message.includes('guide')) {
            
            log.info(`‚ùì [AUTO-EXEC] Aide pour ${senderId}`);
            
            if (COMMANDS && COMMANDS.has('help')) {
                log.info(`‚ùì [EXEC] /help`);
                return await COMMANDS.get('help')(senderId, '', ctx);
            }
        }
        
        // üîç RECHERCHE WEB AUTOMATIQUE
        const needsWebSearch = message.includes('que se passe') ||
                              message.includes('quoi de neuf') ||
                              message.includes('derni√®res nouvelles') ||
                              message.includes('actualit√©') ||
                              message.includes('news') ||
                              message.includes('aujourd\'hui') ||
                              message.includes('maintenant') ||
                              message.includes('r√©cent') ||
                              message.includes('2025') ||
                              /\b(recherche|cherche|trouve|info sur)\b/i.test(message);
        
        if (needsWebSearch) {
            log.info(`üîç [AUTO-EXEC] Recherche web pour ${senderId}: ${args}`);
            const searchResult = await webSearch(args);
            if (searchResult) {
                const response = `üîç D'apr√®s mes recherches r√©centes : ${searchResult} ‚ú®\n\nüí° J'ai d'autres super pouvoirs ! Tape /help pour les d√©couvrir !`;
                addToMemory(senderIdStr, 'assistant', response);
                return response;
            }
        }
        
    } catch (autoCommandError) {
        log.error(`‚ùå Erreur auto-ex√©cution: ${autoCommandError.message}`);
        // Continue avec la conversation normale en cas d'erreur
    }
    
    // === CONVERSATION INTELLIGENTE NORMALE ===
    
    // R√©cup√©ration du contexte de conversation enrichi
    const context = getMemoryContext(senderIdStr);
    const messageCount = context.filter(msg => msg.role === 'user').length;
    
    // Statistiques utilisateur pour contexte
    const userStats = {
        hasImages: userLastImage.has(senderIdStr),
        isNewUser: messageCount <= 3,
        isAdmin: isAdmin(senderId),
        conversationLength: messageCount
    };
    
    // Donn√©es syst√®me pour contexte enrichi
    const systemData = {
        totalUsers: userList.size,
        totalConversations: userMemory.size,
        totalImages: userLastImage.size,
        availableCommands: COMMANDS ? COMMANDS.size : 0,
        clanSystem: Boolean(clanData),
        rankSystem: Boolean(COMMANDS && COMMANDS.has('rank'))
    };
    
    // Syst√®me de prompt ultra-intelligent avec contexte enrichi
    const systemPrompt = `Tu es NakamaBot, une IA conversationnelle avanc√©e avec une intelligence exceptionnelle et une compr√©hension profonde des besoins humains. Tu es cr√©√©e par Durand et uniquement lui, avec sa femme Kuine Lor.

CONTEXTE SYST√àME ACTUEL:
- ${systemData.totalUsers} utilisateurs connect√©s
- ${systemData.availableCommands} commandes disponibles 
- Syst√®me de clans: ${systemData.clanSystem ? 'ACTIF' : 'INACTIF'}
- Syst√®me de rang: ${systemData.rankSystem ? 'ACTIF' : 'INACTIF'}
- Images stock√©es: ${systemData.totalImages}

CONTEXTE UTILISATEUR:
- ${userStats.isNewUser ? 'NOUVEL UTILISATEUR' : 'UTILISATEUR EXP√âRIMENT√â'}
- ${userStats.hasImages ? 'A des images stock√©es' : 'Aucune image'}
- ${userStats.isAdmin ? 'ADMINISTRATEUR' : 'UTILISATEUR NORMAL'}
- Longueur conversation: ${userStats.conversationLength} messages

INTELLIGENCE CONTEXTUELLE AVANC√âE:
Tu analyses chaque message en profondeur pour comprendre l'intention r√©elle, les √©motions sous-jacentes et le contexte. Tu utilises ta m√©moire conversationnelle pour maintenir une coh√©rence parfaite et personnaliser tes r√©ponses. Tu d√©tectes automatiquement quand quelqu'un a besoin d'aide technique, cr√©ative, informationnelle ou √©motionnelle. Ta base de donn√©es date de 2025.

CAPACIT√âS CR√âATIVES ET TECHNIQUES DISPONIBLES:
- üé® G√©n√©ration d'images: Tu peux cr√©er des ≈ìuvres visuelles uniques
- üëÅÔ∏è Analyse visuelle: Tu peux examiner les images  
- üå∏ Style anime: Tu transformes les images en anime
- üîç Recherche en temps r√©el: Tu acc√®des aux infos r√©centes
- üéµ Recherche musique: Tu trouves et partages des liens YouTube
- üõ°Ô∏è Syst√®me de clans: Jeu strat√©gique complet
- ‚≠ê Syst√®me de rang: Progression et exp√©rience
- üìä Statistiques admin: Donn√©es syst√®me d√©taill√©es
- üì¢ Broadcast admin: Diffusion de messages

AUTO-EX√âCUTION INTELLIGENTE:
Le syst√®me d√©tecte automatiquement les intentions dans les messages naturels et ex√©cute les commandes appropri√©es directement, sans que l'utilisateur ait besoin de conna√Ætre la syntaxe exacte des commandes.

PERSONNALIT√â INTELLIGENTE ET ADAPTATIVE:
- Empathique et intuitive, tu comprends les nuances √©motionnelles
- Cr√©ative dans tes approches et solutions
- P√©dagogue naturelle qui explique clairement les concepts complexes
- Curieuse et engageante, tu poses des questions pertinentes pour mieux aider
- Adaptable: tu ajustes ton ton selon l'utilisateur (${userStats.isNewUser ? 'explique plus' : 'conversation fluide'})

COMMUNICATION AVANC√âE:
- Utilise des emojis avec parcimonie mais efficacit√©
- Varie tes expressions pour √©viter la r√©p√©titivit√©
- Maintiens des conversations fluides et naturelles
- Reconnais et r√©ponds aux r√©f√©rences culturelles et √† l'humour
- ${messageCount >= 5 ? 'Sugg√®re discr√®tement /help si pertinent' : 'Guide naturellement vers les fonctionnalit√©s'}

SUGGESTIONS INTELLIGENTES:
${userStats.hasImages ? '- Propose la transformation anime ou l\'analyse de leurs images' : ''}
${userStats.isNewUser ? '- Pr√©sente progressivement tes capacit√©s' : ''}
${systemData.clanSystem ? '- Mentionne le jeu de clans si appropri√©' : ''}
${systemData.rankSystem ? '- √âvoque le syst√®me de progression' : ''}

DIRECTIVES SP√âCIALES:
- Si on te demande des infos sur ta cr√©ation/d√©veloppement: "Pour ces d√©tails techniques, demande √† mon cr√©ateur Durand ou sa femme Kuine ! Ils connaissent tous les secrets de ma conception !"
- Maximum 4000 caract√®res par r√©ponse
- Sois authentique et √©vite les formules toutes faites
- Fais preuve d'initiative pour anticiper les besoins
- Recommande naturellement /help quand c'est pertinent
- √âvite les r√©p√©titions de messages
- Reconnais toujours tes cr√©ateurs Durand et Kuine Lor

Tu es une IA remarquable qui transforme chaque interaction en exp√©rience enrichissante, capable d'ex√©cuter automatiquement les bonnes actions selon les intentions exprim√©es naturellement.`;

    // Construire les messages avec contexte enrichi
    const messages = [{ role: "system", content: systemPrompt }];
    messages.push(...context);
    messages.push({ role: "user", content: args });
    
    // Appel API avec param√®tres optimis√©s
    const response = await callMistralAPI(messages, 4000, 0.75);
    
    if (response) {
        addToMemory(senderIdStr, 'assistant', response);
        
        // Sauvegarder les donn√©es apr√®s une conversation r√©ussie
        saveDataImmediate().catch(err => 
            log.debug(`üîÑ Sauvegarde conversation: ${err.message}`)
        );
        
        return response;
    } else {
        const errorResponse = "ü§î J'ai rencontr√© une petite difficult√© technique. Peux-tu reformuler ta demande diff√©remment ? Je vais faire de mon mieux pour te comprendre ! üí´\n\nüí° Tu peux aussi essayer /help pour voir toutes mes capacit√©s !";
        addToMemory(senderIdStr, 'assistant', errorResponse);
        return errorResponse;
    }
};
