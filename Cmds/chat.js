/**
 * NakamaBot - Commande /chat avec recherche intelligente int√©gr√©e et rotation des cl√©s Gemini
 * VERSION CORRIGEE: Protection anti-doublons et gestion des appels concurrents
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - Message de conversation
 * @param {object} ctx - Contexte partag√© du bot 
 */

const { GoogleGenerativeAI } = require("@google/generative-ai");
const axios = require("axios");

// Configuration APIs avec rotation des cl√©s Gemini
const GEMINI_API_KEYS = process.env.GEMINI_API_KEY ? process.env.GEMINI_API_KEY.split(',').map(key => key.trim()) : [];
const GOOGLE_SEARCH_API_KEY = process.env.GOOGLE_SEARCH_API_KEY;
const GOOGLE_SEARCH_ENGINE_ID = process.env.GOOGLE_SEARCH_ENGINE_ID;

// Fallback: SerpAPI si Google Custom Search n'est pas disponible
const SERPAPI_KEY = process.env.SERPAPI_KEY;

// √âtat global pour la rotation des cl√©s avec mutex
let currentGeminiKeyIndex = 0;
const failedKeys = new Set();
let keyRotationMutex = false;

// üÜï LISTE DES COMMANDES VALIDES (Simple et efficace)
const VALID_COMMANDS = [
    'help',      // Aide et guide complet
    'image',     // Cr√©ation d'images IA
    'vision',    // Analyse d'images
    'anime',     // Style anime/manga
    'music',     // Recherche musicale YouTube
    'clan',      // Syst√®me de clans et batailles
    'rank',      // Niveau et progression
    'contact',   // Contact administrateurs
    'weather'    // Informations m√©t√©o
];

// üß† AM√âLIORATION: D√©tection IA contextuelle avanc√©e (avec protection anti-doublons)
async function detectIntelligentCommands(message, ctx) {
    const { log } = ctx;
    
    try {
        const commandsList = VALID_COMMANDS.map(cmd => `/${cmd}`).join(', ');
        
        const detectionPrompt = `Tu es un syst√®me de d√©tection de commandes ultra-pr√©cis pour NakamaBot. Tu dois √âVITER les faux positifs.

COMMANDES DISPONIBLES: ${commandsList}

MESSAGE UTILISATEUR: "${message}"

R√àGLES STRICTES POUR D√âTECTER UNE VRAIE INTENTION DE COMMANDE:

üéØ VRAIS INTENTIONS (CONFIDENCE 0.8-1.0):
‚úÖ help: "aide", "help", "que peux-tu faire", "guide", "fonctions disponibles", "comment utiliser"
‚úÖ image: "dessine", "cr√©e une image", "g√©n√®re", "illustre", "fais un dessin", "artwork"
‚úÖ vision: "regarde cette image", "analyse cette photo", "que vois-tu", "d√©cris l'image", "examine"
‚úÖ anime: "transforme en anime", "style anime", "version manga", "art anime", "dessine en anime"
‚úÖ music: "joue cette musique", "trouve sur YouTube", "cherche cette chanson", "lance la musique", "play"
‚úÖ clan: "rejoindre clan", "cr√©er clan", "bataille de clan", "d√©fier", "mon clan", "guerre"
‚úÖ rank: "mon niveau", "mes stats", "ma progression", "mon rang", "mes points"
‚úÖ contact: "contacter admin", "signaler probl√®me", "message administrateur", "support technique"
‚úÖ weather: "m√©t√©o", "quel temps", "temp√©rature", "pr√©visions", "temps qu'il fait"

‚ùå FAUSSES D√âTECTIONS √Ä √âVITER (CONFIDENCE 0.0-0.3):
‚ùå Questions g√©n√©rales mentionnant un mot: "quel chanteur a chant√© TIA" ‚â† commande music
‚ùå Conversations: "j'aime la musique", "le temps passe vite", "aide mon ami"
‚ùå Descriptions: "cette image est belle", "il fait chaud", "niveau d√©butant"
‚ùå Contexte informatif: "la m√©t√©o change", "les clans vikings", "mon aide-m√©moire"

ANALYSE CONTEXTUELLE OBLIGATOIRE:
- L'utilisateur veut-il UTILISER une fonctionnalit√© du bot OU juste parler d'un sujet ?
- Y a-t-il un VERBE D'ACTION dirig√© vers le bot ?
- Le message est-il une DEMANDE DIRECTE ou une conversation g√©n√©rale ?

R√©ponds UNIQUEMENT avec ce JSON:
{
  "isCommand": true/false,
  "command": "nom_commande_ou_null",
  "confidence": 0.0-1.0,
  "extractedArgs": "arguments_extraits_ou_message_complet",
  "reason": "explication_d√©taill√©e_de_la_d√©cision",
  "contextAnalysis": "vraie_intention_ou_conversation_generale"
}`;

        // Timeout plus court pour la d√©tection (8 secondes max)
        const response = await Promise.race([
            callGeminiWithRotation(detectionPrompt, 2),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout d√©tection commandes')), 8000)
            )
        ]);
        
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            const aiDetection = JSON.parse(jsonMatch[0]);
            
            // Validation stricte avec seuil √©lev√©
            const isValidCommand = aiDetection.isCommand && 
                                 VALID_COMMANDS.includes(aiDetection.command) && 
                                 aiDetection.confidence >= 0.8; // Seuil tr√®s √©lev√© pour √©viter faux positifs
            
            if (isValidCommand) {
                log.info(`üéØ Commande d√©tect√©e: /${aiDetection.command} (${aiDetection.confidence}) - ${aiDetection.reason}`);
                log.info(`üîç Analyse contextuelle: ${aiDetection.contextAnalysis}`);
                
                return {
                    shouldExecute: true,
                    command: aiDetection.command,
                    args: aiDetection.extractedArgs,
                    confidence: aiDetection.confidence,
                    method: 'ai_contextual'
                };
            } else {
                // Log des rejets pour debugging
                if (aiDetection.confidence < 0.8 && aiDetection.confidence > 0.3) {
                    log.info(`üö´ Rejet commande (confidence trop basse): ${aiDetection.command} (${aiDetection.confidence}) - ${aiDetection.reason}`);
                }
            }
        }
        
        return { shouldExecute: false };
        
    } catch (error) {
        log.warning(`‚ö†Ô∏è Erreur d√©tection IA commandes: ${error.message}`);
        
        // Fallback ultra-conservateur par mots-cl√©s stricts
        return await fallbackStrictKeywordDetection(message, log);
    }
}

// üõ°Ô∏è FALLBACK CONSERVATEUR: D√©tection par mots-cl√©s stricts uniquement
async function fallbackStrictKeywordDetection(message, log) {
    const lowerMessage = message.toLowerCase().trim();
    
    // Patterns ultra-stricts pour √©viter les faux positifs
    const strictPatterns = [
        { command: 'help', patterns: [
            /^(aide|help|guide)$/,
            /^(que peux-tu faire|fonctions|commandes disponibles)$/,
            /^(comment √ßa marche|utilisation)$/
        ]},
        { command: 'image', patterns: [
            /^dessine(-moi)?\s+/,
            /^(cr√©e|g√©n√®re|fais)\s+(une\s+)?(image|dessin|illustration)/,
            /^(illustre|artwork)/
        ]},
        { command: 'vision', patterns: [
            /^regarde\s+(cette\s+)?(image|photo)/,
            /^(analyse|d√©cris|examine)\s+(cette\s+)?(image|photo)/,
            /^que vois-tu/
        ]},
        { command: 'music', patterns: [
            /^(joue|lance|play)\s+/,
            /^(trouve|cherche)\s+(sur\s+youtube\s+)?cette\s+(musique|chanson)/,
            /^(cherche|trouve)\s+la\s+(musique|chanson)\s+/
        ]},
        { command: 'clan', patterns: [
            /^(rejoindre|cr√©er|mon)\s+clan/,
            /^bataille\s+de\s+clan/,
            /^(d√©fier|guerre)\s+/
        ]},
        { command: 'rank', patterns: [
            /^(mon\s+)?(niveau|rang|stats|progression)/,
            /^mes\s+(stats|points)/
        ]},
        { command: 'contact', patterns: [
            /^contacter\s+(admin|administrateur)/,
            /^signaler\s+probl√®me/,
            /^support\s+technique/
        ]},
        { command: 'weather', patterns: [
            /^(m√©t√©o|quel\s+temps|temp√©rature|pr√©visions)/,
            /^temps\s+qu.il\s+fait/
        ]}
    ];
    
    for (const { command, patterns } of strictPatterns) {
        for (const pattern of patterns) {
            if (pattern.test(lowerMessage)) {
                log.info(`üîë Fallback keyword strict: /${command} d√©tect√© par pattern`);
                return {
                    shouldExecute: true,
                    command: command,
                    args: message,
                    confidence: 0.9,
                    method: 'fallback_strict'
                };
            }
        }
    }
    
    return { shouldExecute: false };
}

// ‚úÖ FONCTIONS EXISTANTES (am√©lior√©es avec protection)

function detectContactAdminIntention(message) {
    const lowerMessage = message.toLowerCase();
    
    const contactPatterns = [
        { patterns: [/(?:contacter|parler|√©crire).*?(?:admin|administrateur|cr√©ateur|durand)/i], reason: 'contact_direct' },
        { patterns: [/(?:probl√®me|bug|erreur).*?(?:grave|urgent|important)/i], reason: 'probleme_technique' },
        { patterns: [/(?:signaler|reporter|d√©noncer)/i], reason: 'signalement' },
        { patterns: [/(?:suggestion|propose|id√©e).*?(?:am√©lioration|nouvelle)/i], reason: 'suggestion' },
        { patterns: [/(?:qui a cr√©√©|cr√©ateur|d√©veloppeur).*?(?:bot|nakamabot)/i], reason: 'question_creation' },
        { patterns: [/(?:plainte|r√©clamation|pas content|m√©content)/i], reason: 'plainte' }
    ];
    
    for (const category of contactPatterns) {
        for (const pattern of category.patterns) {
            if (pattern.test(message)) {
                if (category.reason === 'question_creation') {
                    return { shouldContact: false }; // G√©r√© par l'IA
                }
                return {
                    shouldContact: true,
                    reason: category.reason,
                    extractedMessage: message
                };
            }
        }
    }
    
    return { shouldContact: false };
}

function generateContactSuggestion(reason, extractedMessage) {
    const reasonMessages = {
        'contact_direct': { title: "üíå **Contact Admin**", message: "Je vois que tu veux contacter les administrateurs !" },
        'probleme_technique': { title: "üîß **Probl√®me Technique**", message: "Probl√®me technique d√©tect√© !" },
        'signalement': { title: "üö® **Signalement**", message: "Tu veux signaler quelque chose d'important !" },
        'suggestion': { title: "üí° **Suggestion**", message: "Tu as une suggestion d'am√©lioration !" },
        'plainte': { title: "üìù **R√©clamation**", message: "Tu as une r√©clamation √† formuler !" }
    };
    
    const reasonData = reasonMessages[reason] || {
        title: "üìû **Contact Admin**",
        message: "Il semble que tu aies besoin de contacter les administrateurs !"
    };
    
    const preview = extractedMessage.length > 60 ? extractedMessage.substring(0, 60) + "..." : extractedMessage;
    
    return `${reasonData.title}\n\n${reasonData.message}\n\nüí° **Solution :** Utilise \`/contact [ton message]\` pour les contacter directement.\n\nüìù **Ton message :** "${preview}"\n\n‚ö° **Limite :** 2 messages par jour\nüì® Tu recevras une r√©ponse personnalis√©e !\n\nüíï En attendant, je peux t'aider avec d'autres choses ! Tape /help pour voir mes fonctionnalit√©s !`;
}

// üÜï AM√âLIORATION: Ex√©cution de commande avec protection d'√©tat
async function executeCommandFromChat(senderId, commandName, args, ctx) {
    try {
        const COMMANDS = global.COMMANDS || new Map();
        
        if (!COMMANDS.has(commandName)) {
            const path = require('path');
            const fs = require('fs');
            const commandPath = path.join(__dirname, `${commandName}.js`);
            
            if (fs.existsSync(commandPath)) {
                delete require.cache[require.resolve(commandPath)];
                const commandModule = require(commandPath);
                
                if (typeof commandModule === 'function') {
                    // Timeout pour l'ex√©cution de commande (25 secondes max)
                    const result = await Promise.race([
                        commandModule(senderId, args, ctx),
                        new Promise((_, reject) => 
                            setTimeout(() => reject(new Error(`Timeout commande /${commandName}`)), 25000)
                        )
                    ]);
                    return { success: true, result };
                }
            }
        } else {
            const commandFunction = COMMANDS.get(commandName);
            // Timeout pour l'ex√©cution de commande
            const result = await Promise.race([
                commandFunction(senderId, args, ctx),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error(`Timeout commande /${commandName}`)), 25000)
                )
            ]);
            return { success: true, result };
        }
        
        return { success: false, error: `Commande ${commandName} non trouv√©e` };
        
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// üÜï AM√âLIORATION: G√©n√©ration de r√©ponse contextuelle avec protection
async function generateContextualResponse(originalMessage, commandResult, commandName, ctx) {
    if (typeof commandResult === 'object' && commandResult.type === 'image') {
        return commandResult;
    }
    
    try {
        // Essayer d'abord avec Gemini (avec timeout)
        const contextPrompt = `L'utilisateur a dit: "${originalMessage}"
J'ai ex√©cut√© /${commandName} avec r√©sultat: "${commandResult}"

G√©n√®re une r√©ponse naturelle et amicale (max 400 chars) qui pr√©sente le r√©sultat de mani√®re conversationnelle.`;

        const response = await Promise.race([
            callGeminiWithRotation(contextPrompt, 2),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout r√©ponse contextuelle')), 8000)
            )
        ]);
        
        return response || commandResult;
        
    } catch (error) {
        // Fallback sur Mistral si besoin
        const { callMistralAPI } = ctx;
        try {
            const response = await Promise.race([
                callMistralAPI([
                    { role: "system", content: "R√©ponds naturellement et amicalement." },
                    { role: "user", content: `Utilisateur: "${originalMessage}"\nR√©sultat: "${commandResult}"\nPr√©sente ce r√©sultat naturellement (max 200 chars)` }
                ], 200, 0.7),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout Mistral contextuel')), 6000)
                )
            ]);
            
            return response || commandResult;
        } catch (mistralError) {
            return commandResult;
        }
    }
}

// üÜï FONCTION DE NETTOYAGE P√âRIODIQUE: Nettoyer les requ√™tes expir√©es
function cleanupExpiredRequests() {
    const now = Date.now();
    const maxAge = 60000; // 1 minute max
    
    for (const [senderId, requestData] of activeRequests.entries()) {
        if (now - requestData.startTime > maxAge) {
            releaseRequest(senderId);
        }
    }
}

// D√©marrer le nettoyage p√©riodique toutes les 30 secondes
setInterval(cleanupExpiredRequests, 30000);

// ‚úÖ FONCTIONS D√âPR√âCI√âES (maintenues pour compatibilit√©)
async function detectCommandIntentions(message, ctx) {
    // ‚ö†Ô∏è FONCTION D√âPR√âCI√âE - Remplac√©e par detectIntelligentCommands
    // Maintenue pour compatibilit√© avec l'ancien syst√®me
    return { shouldExecute: false };
}

// ‚úÖ Exports pour autres commandes (am√©lior√©s)
module.exports.detectIntelligentCommands = detectIntelligentCommands;
module.exports.VALID_COMMANDS = VALID_COMMANDS;
module.exports.executeCommandFromChat = executeCommandFromChat;
module.exports.detectContactAdminIntention = detectContactAdminIntention;
module.exports.decideSearchNecessity = decideSearchNecessity;
module.exports.performIntelligentSearch = performIntelligentSearch;
module.exports.generateNaturalResponse = generateNaturalResponse;
module.exports.callGeminiWithRotation = callGeminiWithRotation;
module.exports.getNextGeminiKey = getNextGeminiKey;
module.exports.markKeyAsFailed = markKeyAsFailed;

// üÜï Nouveaux exports pour gestion des requ√™tes
module.exports.isRequestActive = isRequestActive;
module.exports.markRequestActive = markRequestActive;
module.exports.releaseRequest = releaseRequest;
module.exports.cleanupExpiredRequests = cleanupExpiredRequests;PROTECTION ANTI-DOUBLONS: Map pour tracker les requ√™tes en cours
const activeRequests = new Map();
const requestTimeouts = new Map();

// üÜï FONCTION DE PROTECTION: V√©rifier si une requ√™te est d√©j√† en cours
function isRequestActive(senderId) {
    return activeRequests.has(senderId);
}

// üÜï FONCTION DE PROTECTION: Marquer une requ√™te comme active
function markRequestActive(senderId, message) {
    if (activeRequests.has(senderId)) {
        return false; // Requ√™te d√©j√† active
    }
    
    activeRequests.set(senderId, {
        message: message,
        startTime: Date.now(),
        status: 'processing'
    });
    
    // Timeout de s√©curit√© (30 secondes max)
    const timeoutId = setTimeout(() => {
        releaseRequest(senderId);
    }, 30000);
    
    requestTimeouts.set(senderId, timeoutId);
    return true;
}

// üÜï FONCTION DE PROTECTION: Lib√©rer une requ√™te
function releaseRequest(senderId) {
    activeRequests.delete(senderId);
    
    const timeoutId = requestTimeouts.get(senderId);
    if (timeoutId) {
        clearTimeout(timeoutId);
        requestTimeouts.delete(senderId);
    }
}

// Fonction pour obtenir la prochaine cl√© Gemini disponible (avec mutex)
async function getNextGeminiKey() {
    // Mutex simple pour √©viter les conflits de rotation
    while (keyRotationMutex) {
        await new Promise(resolve => setTimeout(resolve, 10));
    }
    keyRotationMutex = true;
    
    try {
        if (GEMINI_API_KEYS.length === 0) {
            throw new Error('Aucune cl√© Gemini configur√©e');
        }
        
        // Si toutes les cl√©s ont √©chou√©, on reset
        if (failedKeys.size >= GEMINI_API_KEYS.length) {
            failedKeys.clear();
            currentGeminiKeyIndex = 0;
        }
        
        // Trouver la prochaine cl√© non d√©faillante
        let attempts = 0;
        while (attempts < GEMINI_API_KEYS.length) {
            const key = GEMINI_API_KEYS[currentGeminiKeyIndex];
            currentGeminiKeyIndex = (currentGeminiKeyIndex + 1) % GEMINI_API_KEYS.length;
            
            if (!failedKeys.has(key)) {
                return key;
            }
            attempts++;
        }
        
        // Si toutes les cl√©s sont marqu√©es comme d√©faillantes, prendre la premi√®re quand m√™me
        failedKeys.clear();
        currentGeminiKeyIndex = 0;
        return GEMINI_API_KEYS[0];
        
    } finally {
        keyRotationMutex = false;
    }
}

// Fonction pour marquer une cl√© comme d√©faillante (thread-safe)
async function markKeyAsFailed(apiKey) {
    while (keyRotationMutex) {
        await new Promise(resolve => setTimeout(resolve, 10));
    }
    failedKeys.add(apiKey);
}

// Fonction pour appeler Gemini avec rotation automatique des cl√©s (am√©lior√©e)
async function callGeminiWithRotation(prompt, maxRetries = Math.min(GEMINI_API_KEYS.length, 3)) {
    let lastError = null;
    
    for (let attempt = 0; attempt < maxRetries; attempt++) {
        try {
            const apiKey = await getNextGeminiKey();
            const genAI = new GoogleGenerativeAI(apiKey);
            const model = genAI.getGenerativeModel({ model: "gemini-2.0-flash-exp" });
            
            // Timeout de 15 secondes pour √©viter les blocages
            const result = await Promise.race([
                model.generateContent(prompt),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout Gemini')), 15000)
                )
            ]);
            
            const response = result.response.text();
            
            if (response && response.trim()) {
                // Succ√®s - retirer la cl√© des cl√©s d√©faillantes si elle y √©tait
                failedKeys.delete(apiKey);
                return response;
            }
            
            throw new Error('R√©ponse Gemini vide');
            
        } catch (error) {
            lastError = error;
            
            // Marquer la cl√© actuelle comme d√©faillante si c'est une erreur d'API
            if (error.message.includes('API_KEY') || error.message.includes('quota') || error.message.includes('limit')) {
                const currentKey = GEMINI_API_KEYS[(currentGeminiKeyIndex - 1 + GEMINI_API_KEYS.length) % GEMINI_API_KEYS.length];
                await markKeyAsFailed(currentKey);
            }
            
            // Si c'est la derni√®re tentative, on lance l'erreur
            if (attempt === maxRetries - 1) {
                throw lastError;
            }
            
            // D√©lai progressif entre les tentatives
            await new Promise(resolve => setTimeout(resolve, 1000 * (attempt + 1)));
        }
    }
    
    throw lastError || new Error('Toutes les cl√©s Gemini ont √©chou√©');
}

module.exports = async function cmdChat(senderId, args, ctx) {
    const { addToMemory, getMemoryContext, callMistralAPI, webSearch, log } = ctx;
    
        // üÜï PROTECTION 1: V√©rifier si une requ√™te est d√©j√† en cours pour cet utilisateur
    if (isRequestActive(senderId)) {
        log.warning(`‚ö†Ô∏è Requ√™te d√©j√† en cours pour ${senderId}, ignor√©e: ${args}`);
        return null; // Pas de r√©ponse pour √©viter le doublon
    }
    
        // üÜï PROTECTION 2: Marquer cette requ√™te comme active
    if (!markRequestActive(senderId, args)) {
        log.warning(`‚ö†Ô∏è Impossible de marquer la requ√™te active pour ${senderId}`);
        return null;
    }
    
    try {
        // Message d'accueil si pas d'arguments
        if (!args.trim()) {
            return "üí¨ Salut je suis NakamaBot! Je suis l√† pour toi ! Dis-moi ce qui t'int√©resse et on va avoir une conversation g√©niale ! ‚ú®";
        }
        
        // ‚úÖ D√©tection des demandes de contact admin
        const contactIntention = detectContactAdminIntention(args);
        if (contactIntention.shouldContact) {
            log.info(`üìû Intention contact admin d√©tect√©e pour ${senderId}: ${contactIntention.reason}`);
            const contactSuggestion = generateContactSuggestion(contactIntention.reason, contactIntention.extractedMessage);
            addToMemory(String(senderId), 'user', args);
            addToMemory(String(senderId), 'assistant', contactSuggestion);
            return contactSuggestion;
        }
        
            // üÜï D√âTECTION INTELLIGENTE DES COMMANDES (Am√©lior√© avec protection)
        const intelligentCommand = await detectIntelligentCommands(args, ctx);
        if (intelligentCommand.shouldExecute) {
            log.info(`üß† D√©tection IA intelligente: /${intelligentCommand.command} (${intelligentCommand.confidence}) pour ${senderId}`);
            
            try {
                const commandResult = await executeCommandFromChat(senderId, intelligentCommand.command, intelligentCommand.args, ctx);
                
                if (commandResult.success) {
                    // Gestion sp√©ciale pour les images
                    if (typeof commandResult.result === 'object' && commandResult.result.type === 'image') {
                        addToMemory(String(senderId), 'user', args);
                        return commandResult.result;
                    }
                    
                    // R√©ponse contextuelle naturelle
                    const contextualResponse = await generateContextualResponse(args, commandResult.result, intelligentCommand.command, ctx);
                    addToMemory(String(senderId), 'user', args);
                    addToMemory(String(senderId), 'assistant', contextualResponse);
                    return contextualResponse;
                }
            } catch (error) {
                log.error(`‚ùå Erreur ex√©cution commande IA: ${error.message}`);
                // Continue avec conversation normale en cas d'erreur
            }
        } 
        
            // üÜï NOUVELLE FONCTIONNALIT√â: D√©cision intelligente pour recherche externe
        const searchDecision = await decideSearchNecessity(args, senderId, ctx);
        
        if (searchDecision.needsExternalSearch) {
            log.info(`üîç Recherche externe n√©cessaire pour ${senderId}: ${searchDecision.reason}`);
            
            try {
                const searchResults = await performIntelligentSearch(searchDecision.searchQuery, ctx);
                
                if (searchResults && searchResults.length > 0) {
                    const naturalResponse = await generateNaturalResponse(args, searchResults, ctx);
                    if (naturalResponse) {
                        addToMemory(String(senderId), 'user', args);
                        addToMemory(String(senderId), 'assistant', naturalResponse);
                        return naturalResponse;
                    }
                }
            } catch (searchError) {
                log.error(`‚ùå Erreur recherche intelligente: ${searchError.message}`);
                // Continue avec conversation normale en cas d'erreur
            }
        }
        
        // ‚úÖ Conversation classique avec Gemini (Mistral en fallback)
        return await handleConversationWithFallback(senderId, args, ctx);
        
    } catch (error) {
        log.error(`‚ùå Erreur g√©n√©rale cmdChat pour ${senderId}: ${error.message}`);
        const errorResponse = "ü§î J'ai rencontr√© une petite difficult√© technique. Peux-tu reformuler ta demande diff√©remment ? üí´";
        addToMemory(String(senderId), 'assistant', errorResponse);
        return errorResponse;
        
    } finally {
        // üÜï PROTECTION 3: TOUJOURS lib√©rer la requ√™te √† la fin
        releaseRequest(senderId);
    }
};

// üÜï D√âCISION IA: D√©terminer si une recherche externe est n√©cessaire (avec protection timeout)
async function decideSearchNecessity(userMessage, senderId, ctx) {
    const { log } = ctx;
    
    try {
        const decisionPrompt = `Tu es un syst√®me de d√©cision intelligent pour un chatbot. 
Analyse ce message utilisateur et d√©cide s'il n√©cessite une recherche web externe.

CRIT√àRES POUR RECHERCHE EXTERNE:
‚úÖ OUI si:
- Informations r√©centes (actualit√©s, √©v√©nements 2025-2026)
- Donn√©es factuelles sp√©cifiques (prix actuels, statistiques, dates pr√©cises)
- Informations locales/g√©ographiques sp√©cifiques
- Recherche de produits/services/entreprises pr√©cis
- Questions sur des personnes publiques r√©centes
- Donn√©es m√©t√©o, cours de bourse, r√©sultats sportifs

‚ùå NON si:
- Conversations g√©n√©rales/philosophiques
- Conseils/opinions personnelles
- Questions sur le bot lui-m√™me
- Cr√©ativit√© (histoires, po√®mes)
- Explications de concepts g√©n√©raux
- Calculs/logique
- Questions existantes dans ma base de connaissances

MESSAGE UTILISATEUR: "${userMessage}"

R√©ponds UNIQUEMENT avec ce format JSON:
{
  "needsExternalSearch": true/false,
  "confidence": 0.0-1.0,
  "reason": "explication courte",
  "searchQuery": "requ√™te de recherche optimis√©e si n√©cessaire"
}`;

        // Timeout plus court pour la d√©cision (10 secondes max)
        const response = await Promise.race([
            callGeminiWithRotation(decisionPrompt, 2), // Max 2 tentatives pour la d√©cision
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout d√©cision recherche')), 10000)
            )
        ]);
        
        // Extraire le JSON de la r√©ponse
        const jsonMatch = response.match(/\{[\s\S]*\}/);
        if (jsonMatch) {
            const decision = JSON.parse(jsonMatch[0]);
            log.info(`ü§ñ D√©cision recherche: ${decision.needsExternalSearch ? 'OUI' : 'NON'} (${decision.confidence}) - ${decision.reason}`);
            return decision;
        }
        
        throw new Error('Format de r√©ponse invalide');
        
    } catch (error) {
        log.warning(`‚ö†Ô∏è Erreur d√©cision recherche: ${error.message}`);
        
        // Fallback: d√©tection par mots-cl√©s
        const keywordSearch = detectSearchKeywords(userMessage);
        return {
            needsExternalSearch: keywordSearch.needs,
            confidence: 0.6,
            reason: 'fallback_keywords',
            searchQuery: keywordSearch.query
        };
    }
}

// üÜï FALLBACK: D√©tection par mots-cl√©s si l'IA √©choue
function detectSearchKeywords(message) {
    const lowerMessage = message.toLowerCase();
    
    const searchIndicators = [
        { patterns: [/\b(202[4-5]|actualit√©|r√©cent|nouveau|maintenant|aujourd|news|info)\b/], weight: 0.9 },
        { patterns: [/\b(prix|co√ªt|combien|tarif)\b.*\b(euros?|dollars?|‚Ç¨|\$)\b/], weight: 0.8 },
        { patterns: [/\b(m√©t√©o|temps|temp√©rature)\b.*\b(aujourd|demain|cette semaine)\b/], weight: 0.9 },
        { patterns: [/\b(o√π|address|lieu|localisation|carte)\b/], weight: 0.7 },
        { patterns: [/\b(qui est|biographie|√¢ge)\b.*\b[A-Z][a-z]+\s[A-Z][a-z]+/], weight: 0.8 },
        { patterns: [/\b(r√©sultats?|score|match|comp√©tition)\b.*\b(sport|foot|tennis|basket)\b/], weight: 0.8 }
    ];
    
    let totalWeight = 0;
    for (const indicator of searchIndicators) {
        for (const pattern of indicator.patterns) {
            if (pattern.test(lowerMessage)) {
                totalWeight += indicator.weight;
                break;
            }
        }
    }
    
    return {
        needs: totalWeight > 0.6,
        query: message,
        confidence: Math.min(totalWeight, 1.0)
    };
}

// üÜï RECHERCHE INTELLIGENTE: Utilise Google Custom Search ou SerpAPI (avec timeout)
async function performIntelligentSearch(query, ctx) {
    const { log } = ctx;
    
    try {
        // Timeout global pour toute la recherche (15 secondes)
        const searchPromise = async () => {
            // Priorit√© 1: Google Custom Search API
            if (GOOGLE_SEARCH_API_KEY && GOOGLE_SEARCH_ENGINE_ID) {
                return await googleCustomSearch(query, log);
            }
            
            // Priorit√© 2: SerpAPI (fallback)
            if (SERPAPI_KEY) {
                return await serpApiSearch(query, log);
            }
            
            // Priorit√© 3: Recherche existante du bot (fallback)
            log.warning('‚ö†Ô∏è Aucune API de recherche configur√©e, utilisation webSearch existant');
            return await fallbackWebSearch(query, ctx);
        };
        
        return await Promise.race([
            searchPromise(),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout recherche')), 15000)
            )
        ]);
        
    } catch (error) {
        log.error(`‚ùå Erreur recherche: ${error.message}`);
        throw error;
    }
}

// üÜï Google Custom Search API (avec timeout)
async function googleCustomSearch(query, log) {
    const url = `https://www.googleapis.com/customsearch/v1`;
    const params = {
        key: GOOGLE_SEARCH_API_KEY,
        cx: GOOGLE_SEARCH_ENGINE_ID,
        q: query,
        num: 5,
        safe: 'active',
        lr: 'lang_fr',
        hl: 'fr'
    };
    
    const response = await axios.get(url, { 
        params, 
        timeout: 10000 
    });
    
    if (response.data.items) {
        return response.data.items.map(item => ({
            title: item.title,
            link: item.link,
            description: item.snippet,
            source: 'google'
        }));
    }
    
    return [];
}

// üÜï SerpAPI (alternative gratuite) (avec timeout)
async function serpApiSearch(query, log) {
    const url = `https://serpapi.com/search`;
    const params = {
        api_key: SERPAPI_KEY,
        engine: 'google',
        q: query,
        num: 5,
        hl: 'fr',
        gl: 'fr'
    };
    
    const response = await axios.get(url, { 
        params, 
        timeout: 10000 
    });
    
    if (response.data.organic_results) {
        return response.data.organic_results.map(item => ({
            title: item.title,
            link: item.link,
            description: item.snippet,
            source: 'serpapi'
        }));
    }
    
    return [];
}

// üÜï Fallback sur la recherche existante (avec timeout)
async function fallbackWebSearch(query, ctx) {
    const { webSearch } = ctx;
    
    try {
        const result = await Promise.race([
            webSearch(query),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout webSearch')), 8000)
            )
        ]);
        
        if (result) {
            return [{
                title: 'Information r√©cente',
                link: 'N/A',
                description: result,
                source: 'internal'
            }];
        }
    } catch (error) {
        // Ignore silencieusement
    }
    
    return [];
}

// üéØ AM√âLIORATION: G√©n√©ration de r√©ponse naturelle (sans mention de recherche) avec protection
async function generateNaturalResponse(originalQuery, searchResults, ctx) {
    const { log, callMistralAPI } = ctx;
    
    // Date et heure actuelles
    const now = new Date();
    const dateTime = now.toLocaleString('fr-FR', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit',
        timeZone: 'Europe/Paris'
    });
    
    try {
        const resultsText = searchResults.map((result, index) => 
            `${result.title}: ${result.description}`
        ).join('\n');
        
        const naturalPrompt = `Tu es NakamaBot, une IA conversationnelle empathique et cr√©ative.

CONTEXTE TEMPOREL: Nous sommes le ${dateTime}

L'utilisateur te demande: "${originalQuery}"

Voici des informations actuelles pertinentes:
${resultsText}

INSTRUCTIONS IMPORTANTES:
- R√©ponds comme si tu connaissais naturellement ces informations
- Adopte un ton conversationnel et amical avec quelques emojis
- Maximum 3000 caract√®res
- Ne mentionne JAMAIS que tu as fait une recherche
- Ne dis jamais "d'apr√®s mes recherches" ou "selon les sources"
- R√©ponds comme dans une conversation normale entre amis
- Si l'information n'est pas compl√®te, reste naturel et honn√™te

R√âPONSE NATURELLE:`;

        // Timeout pour √©viter les blocages (12 secondes max)
        const response = await Promise.race([
            callGeminiWithRotation(naturalPrompt, 2),
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout g√©n√©ration naturelle')), 12000)
            )
        ]);
        
        if (response && response.trim()) {
            log.info(`üé≠ R√©ponse naturelle Gemini pour: ${originalQuery.substring(0, 30)}...`);
            return response;
        }
        
        throw new Error('R√©ponse Gemini vide');
        
    } catch (geminiError) {
        log.warning(`‚ö†Ô∏è Erreur r√©ponse naturelle Gemini: ${geminiError.message}`);
        
        try {
            // Fallback Mistral avec timeout
            const messages = [{
                role: "system",
                content: "Tu es NakamaBot. R√©ponds naturellement comme dans une conversation normale. Ne mentionne jamais de recherches ou sources."
            }, {
                role: "user", 
                content: `Question: "${originalQuery}"\n\nInformations utiles:\n${searchResults.map(r => `${r.title}: ${r.description}`).join('\n')}\n\nR√©ponds naturellement comme si tu connaissais d√©j√† ces infos (max 3000 chars):`
            }];
            
            const mistralResponse = await Promise.race([
                callMistralAPI(messages, 3000, 0.7),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout Mistral naturel')), 10000)
                )
            ]);
            
            if (mistralResponse) {
                log.info(`üîÑ R√©ponse naturelle Mistral pour: ${originalQuery.substring(0, 30)}...`);
                return mistralResponse;
            }
            
            throw new Error('Mistral aussi en √©chec');
            
        } catch (mistralError) {
            log.error(`‚ùå Erreur r√©ponse naturelle totale: ${mistralError.message}`);
            
            // Derniers recours plus naturel
            const topResult = searchResults[0];
            if (topResult) {
                const basicResponse = `D'apr√®s ce que je sais, ${topResult.description} üí° ${searchResults.length > 1 ? 'Il y a aussi d\'autres aspects int√©ressants sur le sujet !' : 'J\'esp√®re que √ßa r√©pond √† ta question !'}`;
                return basicResponse;
            }
            
            // Si vraiment rien ne marche, retourner null pour continuer normalement
            return null;
        }
    }
}

// ‚úÖ AM√âLIORATION: Gestion conversation avec Gemini et fallback Mistral (avec protection)
async function handleConversationWithFallback(senderId, args, ctx) {
    const { addToMemory, getMemoryContext, callMistralAPI, log } = ctx;
    
    // R√©cup√©ration du contexte (derniers 8 messages pour optimiser)
    const context = getMemoryContext(String(senderId)).slice(-8);
    const messageCount = context.filter(msg => msg.role === 'user').length;
    
    // Date et heure actuelles
    const now = new Date();
    const dateTime = now.toLocaleString('fr-FR', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric', 
        hour: '2-digit', 
        minute: '2-digit',
        timeZone: 'Europe/Paris'
    });
    
    // Construction de l'historique de conversation
    let conversationHistory = "";
    if (context.length > 0) {
        conversationHistory = context.map(msg => 
            `${msg.role === 'user' ? 'Utilisateur' : 'Assistant'}: ${msg.content}`
        ).join('\n') + '\n';
    }
    
    // Prompt syst√®me optimis√©
    const systemPrompt = `Tu es NakamaBot, une IA conversationnelle un model Durand AI avanc√©e cr√©√©e par Durand et sa femme C√©cile.

CONTEXTE TEMPOREL: Nous sommes le ${dateTime}

INTELLIGENCE & PERSONNALIT√â:
- Empathique, cr√©ative et intuitive
- Tu comprends les √©motions et intentions sous-jacentes  
- P√©dagogue naturelle qui explique clairement
- Adaptable selon l'utilisateur et le contexte

CAPACIT√âS PRINCIPALES:
üé® Cr√©ation d'images intelligente (dis "dessine-moi..." ou "cr√©e une image de...")
üëÅÔ∏è Analyse d'images avanc√©e (dis "regarde cette image" ou "que vois-tu ?")
üå∏ Transformation anime/manga (dis "transforme en anime" ou "style manga")
üéµ Recherche musicale YouTube (dis "joue..." ou "trouve la musique...")
üõ°Ô∏è Syst√®me de clans et batailles (dis "clan" ou "bataille")
üìä Progression et niveau (dis "mon niveau" ou "mes stats")
üìû Contact admin (dis "contacter admin" ou utilise /contact)
üîç Recherche intelligente automatique pour infos r√©centes
üÜò Guide complet (dis "aide" ou "que peux-tu faire ?")

DIRECTIVES:
- Parle en fonction de la langue utilis√©e par l'utilisateur et du contexte garde en memoire que nous somme le ${dateTime}
- Maximum 3000 caract√®res par r√©ponse
- Utilise quelques emojis avec parcimonie
- √âvite les r√©p√©titions et formules toutes faites
- ${messageCount >= 5 ? 'Sugg√®re /help si pertinent pour d√©bloquer l\'utilisateur' : ''}
- Pour questions techniques sur ta cr√©ation: "Demande √† Durand ou Kuine, ils connaissent tous mes secrets !"
- Recommande discr√®tement /contact pour probl√®mes techniques graves

${conversationHistory ? `Historique:\n${conversationHistory}` : ''}

Utilisateur: ${args}`;

    try {
        // Essayer d'abord avec Gemini (avec timeout et protection)
        const geminiResponse = await Promise.race([
            callGeminiWithRotation(systemPrompt, 2), // Max 2 tentatives
            new Promise((_, reject) => 
                setTimeout(() => reject(new Error('Timeout conversation Gemini')), 20000)
            )
        ]);
        
        if (geminiResponse && geminiResponse.trim()) {
            addToMemory(String(senderId), 'user', args);
            addToMemory(String(senderId), 'assistant', geminiResponse);
            log.info(`üíé Gemini r√©ponse pour ${senderId}: ${args.substring(0, 30)}...`);
            return geminiResponse;
        }
        
        throw new Error('R√©ponse Gemini vide');
        
    } catch (geminiError) {
        log.warning(`‚ö†Ô∏è Gemini √©chec pour ${senderId}: ${geminiError.message}`);
        
        try {
            // Fallback: Utiliser Mistral en cas d'√©chec Gemini (avec timeout)
            const messages = [{ role: "system", content: systemPrompt }];
            messages.push(...context);
            messages.push({ role: "user", content: args });
            
            const mistralResponse = await Promise.race([
                callMistralAPI(messages, 2000, 0.75),
                new Promise((_, reject) => 
                    setTimeout(() => reject(new Error('Timeout Mistral fallback')), 15000)
                )
            ]);
            
            if (mistralResponse) {
                addToMemory(String(senderId), 'user', args);
                addToMemory(String(senderId), 'assistant', mistralResponse);
                log.info(`üîÑ Mistral fallback pour ${senderId}: ${args.substring(0, 30)}...`);
                return mistralResponse;
            }
            
            throw new Error('Mistral aussi en √©chec');
            
        } catch (mistralError) {
            log.error(`‚ùå Erreur totale conversation ${senderId}: Gemini(${geminiError.message}) + Mistral(${mistralError.message})`);
            
            const errorResponse = "ü§î J'ai rencontr√© une petite difficult√© technique. Peux-tu reformuler ta demande diff√©remment ? üí´";
            addToMemory(String(senderId), 'assistant', errorResponse);
            return errorResponse;
        }
    }
}

// üÜï
