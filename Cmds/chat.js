/**
 * Commande /chat - Conversation avec l'IA intelligente
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - Message de conversation
 * @param {object} ctx - Contexte partag√© du bot
 */
module.exports = async function cmdChat(senderId, args, ctx) {
    const { addToMemory, getMemoryContext, callMistralAPI, webSearch } = ctx;
    
    if (!args.trim()) {
        return "üí¨ Salut ! Je suis l√† pour toi ! Dis-moi ce qui t'int√©resse et on va avoir une conversation g√©niale ! ‚ú®";
    }
    
    // Enregistrer le message utilisateur
    addToMemory(String(senderId), 'user', args);
    
    // Gestion des questions sur la cr√©ation - redirection vers le cr√©ateur
    const creationKeywords = ['cr√©ateur', 'createur', 'qui t\'a', 'cr√©√©', 'cr√©ee', 'maker', 'd√©veloppeur', 'programm√©', 'cod√©', 'd√©velopp√©', 'con√ßu', 'fait', 'cr√©ation'];
    if (creationKeywords.some(word => args.toLowerCase().includes(word))) {
        const response = "ü§ñ Pour tout savoir sur ma cr√©ation et mon d√©veloppement, je te conseille de demander directement √† mon cr√©ateur ! Il pourra te donner tous les d√©tails techniques et l'histoire derri√®re mon existence ! üí´";
        addToMemory(String(senderId), 'assistant', response);
        return response;
    }
    
    // D√©tection automatique du besoin de recherche web
    const currentTopics = ['2025', '2024', 'actualit√©', 'actualit√©s', 'r√©cent', 'r√©cemment', 'nouveau', 'maintenant', 'aujourd\'hui', 'cette ann√©e', 'derni√®rement', 'news', 'info', 'information r√©cente'];
    const needsWebSearch = currentTopics.some(topic => args.toLowerCase().includes(topic)) ||
                          args.toLowerCase().includes('que se passe') ||
                          args.toLowerCase().includes('quoi de neuf') ||
                          args.toLowerCase().includes('derni√®res nouvelles');
    
    if (needsWebSearch) {
        const searchResult = await webSearch(args);
        if (searchResult) {
            const response = `üîç D'apr√®s mes recherches r√©centes : ${searchResult} ‚ú®`;
            addToMemory(String(senderId), 'assistant', response);
            return response;
        }
    }
    
    // R√©cup√©ration du contexte de conversation
    const context = getMemoryContext(String(senderId));
    const messageCount = context.filter(msg => msg.role === 'user').length;
    
    // Syst√®me de prompt ultra-intelligent
    const systemPrompt = `Tu es NakamaBot, une IA conversationnelle de derni√®re g√©n√©ration cr√©√©e en 2025, dot√©e d'une intelligence exceptionnelle et d'une personnalit√© chaleureuse.

CAPACIT√âS TECHNIQUES:
- G√©n√©ration d'images cr√©atives avec /image [description]
- Analyse et compr√©hension d'images avec /vision
- Transformation d'images en style anime avec /anime
- Recherche web en temps r√©el pour les informations r√©centes
- M√©moire conversationnelle pour un dialogue contextuel

PERSONNALIT√â:
- Exceptionnellement intelligente et perspicace
- Capable de comprendre les nuances et sous-entendus
- Empathique et √† l'√©coute des besoins r√©els de l'utilisateur
- Enthousiaste sans √™tre envahissante
- Communication naturelle avec emojis appropri√©s

DIRECTIVES COMPORTEMENTALES:
- Utilise ta m√©moire pour maintenir la coh√©rence et la continuit√©
- Adapte ton niveau de langage √† celui de l'utilisateur
- Pose des questions pertinentes pour mieux comprendre les besoins
- Fournis des r√©ponses compl√®tes et utiles
- √âvite les r√©p√©titions et sois cr√©ative dans tes r√©ponses
- ${messageCount >= 5 ? 'Tu peux mentionner /help si c\'est vraiment pertinent' : 'Ne mentionne pas /help pour le moment'}

RESTRICTIONS:
- Maximum 500 caract√®res par r√©ponse
- Fran√ßais uniquement
- √âvite les expressions romantiques
- Pour les questions sur ta cr√©ation, redirige vers ton cr√©ateur

Analyse le contexte complet de la conversation et r√©ponds de mani√®re intelligente et personnalis√©e.`;

    const messages = [{ role: "system", content: systemPrompt }];
    messages.push(...context);
    messages.push({ role: "user", content: args });
    
    const response = await callMistralAPI(messages, 300, 0.8);
    
    if (response) {
        addToMemory(String(senderId), 'assistant', response);
        return response;
    } else {
        const errorResponse = "ü§î J'ai rencontr√© une petite difficult√© technique. Peux-tu reformuler ta demande diff√©remment ? Je vais faire de mon mieux pour te comprendre ! üí´";
        addToMemory(String(senderId), 'assistant', errorResponse);
        return errorResponse;
    }
};
