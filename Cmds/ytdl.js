/**
 * Commande YTDL - T√©l√©chargement sp√©cifique YouTube SANS API KEY
 * Utilise ytdl-core pour extraire directement les URLs de t√©l√©chargement
 * Avec syst√®me d'auto-t√©l√©chargement et anti-doublons
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} args - URL YouTube ou param√®tres (on/off pour auto-download)
 * @param {object} ctx - Contexte du bot
 */

const ytdl = require('ytdl-core');

// Stockage local des param√®tres d'auto-t√©l√©chargement par utilisateur/groupe
const autoDownloadSettings = new Map();

// Cache pour √©viter les doublons (URL + UserID)
const downloadCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes en millisecondes

module.exports = async function cmdYouTubeDl(senderId, args, ctx) {
    const { log, sendMessage, sendImageMessage, addToMemory, isAdmin } = ctx;
    const senderIdStr = String(senderId);
    
    try {
        if (!args || !args.trim()) {
            const helpMsg = `üî¥ **T√©l√©chargeur YouTube YTDL**

üîó **Usage :** \`/ytdl [URL_YOUTUBE]\`

**URLs support√©es :**
‚Ä¢ \`https://www.youtube.com/watch?v=...\`
‚Ä¢ \`https://youtu.be/...\`
‚Ä¢ \`https://www.youtube.com/shorts/...\`
‚Ä¢ \`https://music.youtube.com/watch?v=...\`

**Commandes admin :**
‚Ä¢ \`/ytdl on\` - Active l'auto-t√©l√©chargement YouTube
‚Ä¢ \`/ytdl off\` - D√©sactive l'auto-t√©l√©chargement YouTube

**Qualit√©s disponibles :**
üìπ Vid√©o: 720p, 480p, 360p (automatique selon disponibilit√©)
üéµ Audio: MP3 haute qualit√©

üí° **Exemple :** \`/ytdl https://www.youtube.com/watch?v=dQw4w9WgXcQ\`

‚ö° **Avantage :** Pas de limite d'API, t√©l√©chargement direct !`;

            addToMemory(senderIdStr, 'user', args || '/ytdl');
            addToMemory(senderIdStr, 'assistant', helpMsg);
            return helpMsg;
        }

        const command = args.trim().toLowerCase();

        // GESTION DES PARAM√àTRES AUTO-DOWNLOAD (Admin seulement)
        if (command === 'on' || command === 'off') {
            if (!isAdmin(senderId)) {
                const noPermMsg = "üö´ Seuls les administrateurs peuvent modifier l'auto-t√©l√©chargement YouTube !";
                addToMemory(senderIdStr, 'user', args);
                addToMemory(senderIdStr, 'assistant', noPermMsg);
                return noPermMsg;
            }

            const isEnabled = command === 'on';
            autoDownloadSettings.set(senderIdStr, isEnabled);
            
            const statusMsg = `üîß Auto-t√©l√©chargement YouTube ${isEnabled ? '**activ√©**' : '**d√©sactiv√©**'} !

${isEnabled ? '‚úÖ Toutes les URLs YouTube que vous postez seront automatiquement t√©l√©charg√©es.' : '‚ùå Les URLs YouTube ne seront plus t√©l√©charg√©es automatiquement.'}

üí° Tapez \`/ytdl ${isEnabled ? 'off' : 'on'}\` pour ${isEnabled ? 'd√©sactiver' : 'activer'}.`;
            
            addToMemory(senderIdStr, 'user', args);
            addToMemory(senderIdStr, 'assistant', statusMsg);
            log.info(`üîß Auto-download YouTube ${isEnabled ? 'activ√©' : 'd√©sactiv√©'} pour ${senderId}`);
            return statusMsg;
        }

        // VALIDATION DE L'URL YOUTUBE
        const url = args.trim();
        
        if (!isValidYouTubeUrl(url)) {
            const invalidMsg = `‚ùå **URL YouTube invalide !**

üìù **Formats accept√©s :**
‚Ä¢ \`https://www.youtube.com/watch?v=VIDEO_ID\`
‚Ä¢ \`https://youtu.be/VIDEO_ID\`
‚Ä¢ \`https://www.youtube.com/shorts/VIDEO_ID\`
‚Ä¢ \`https://music.youtube.com/watch?v=VIDEO_ID\`

**Exemples valides :**
‚Ä¢ \`https://www.youtube.com/watch?v=dQw4w9WgXcQ\`
‚Ä¢ \`https://youtu.be/dQw4w9WgXcQ\`
‚Ä¢ \`https://www.youtube.com/shorts/abc123\`

üí° **Astuce :** Copiez l'URL directement depuis YouTube !`;

            addToMemory(senderIdStr, 'user', args);
            addToMemory(senderIdStr, 'assistant', invalidMsg);
            return invalidMsg;
        }

        // V√âRIFICATION DES DOUBLONS
        const cacheKey = `${senderIdStr}_${url}`;
        const now = Date.now();
        
        // Nettoyer le cache des entr√©es expir√©es
        cleanExpiredCache();
        
        if (downloadCache.has(cacheKey)) {
            const cacheEntry = downloadCache.get(cacheKey);
            const timeElapsed = now - cacheEntry.timestamp;
            const remainingTime = Math.ceil((CACHE_DURATION - timeElapsed) / 1000);
            
            if (timeElapsed < CACHE_DURATION) {
                const duplicateMsg = `üîÑ **T√©l√©chargement r√©cent d√©tect√© !**

‚ö†Ô∏è Vous avez d√©j√† t√©l√©charg√© cette vid√©o il y a ${Math.floor(timeElapsed / 1000)} secondes.

üé¨ **Vid√©o :** ${cacheEntry.title || 'Titre non disponible'}
üì∫ **Cha√Æne :** ${cacheEntry.author || 'Auteur inconnu'}
üîó **URL :** ${shortenUrl(url)}

‚è±Ô∏è Vous pourrez la t√©l√©charger √† nouveau dans **${remainingTime} secondes**.

üí° Ceci √©vite les t√©l√©chargements en double et pr√©serve la bande passante.`;

                log.info(`üîÑ Doublon YouTube √©vit√© pour ${senderId}: ${url.substring(0, 50)}...`);
                addToMemory(senderIdStr, 'user', args);
                addToMemory(senderIdStr, 'assistant', duplicateMsg);
                return duplicateMsg;
            }
        }

        // T√âL√âCHARGEMENT YOUTUBE
        log.info(`üì• D√©but t√©l√©chargement YouTube pour ${senderId}: ${url.substring(0, 50)}...`);
        
        const downloadingMsg = `‚è≥ **T√©l√©chargement YouTube en cours...**

üîó URL: ${shortenUrl(url)}
üî¥ Extraction des informations vid√©o...

üí° Cela peut prendre quelques secondes selon la taille de la vid√©o...`;

        // Envoyer le message de chargement d'abord
        addToMemory(senderIdStr, 'user', args);
        await sendMessage(senderId, downloadingMsg);

        try {
            // VALIDATION DE L'URL AVEC YTDL
            if (!ytdl.validateURL(url)) {
                throw new Error('URL YouTube invalide selon ytdl-core');
            }

            // EXTRACTION DES INFORMATIONS VID√âO
            log.debug(`üì° Extraction infos YouTube: ${url}`);
            const info = await ytdl.getInfo(url);
            
            if (!info || !info.videoDetails) {
                throw new Error('Impossible d\'obtenir les informations de la vid√©o');
            }

            const videoDetails = info.videoDetails;
            const title = videoDetails.title;
            const author = videoDetails.author?.name || videoDetails.ownerChannelName;
            const duration = formatDuration(videoDetails.lengthSeconds);
            const thumbnail = videoDetails.thumbnails?.[0]?.url;
            const viewCount = videoDetails.viewCount;

            log.info(`‚úÖ Infos extraites: ${title} par ${author}`);

            // S√âLECTION DU MEILLEUR FORMAT
            const format = selectBestFormat(info.formats);
            
            if (!format || !format.url) {
                throw new Error('Aucun format de t√©l√©chargement disponible');
            }

            log.info(`üé¨ Format s√©lectionn√©: ${format.qualityLabel || format.quality} (${format.container})`);

            // AJOUTER AU CACHE AVANT L'ENVOI
            downloadCache.set(cacheKey, {
                timestamp: now,
                title: title,
                author: author,
                videoId: videoDetails.videoId,
                duration: duration
            });

            // PR√âPARATION DU MESSAGE DE R√âSULTAT
            let resultMessage = `‚úÖ **T√©l√©chargement YouTube termin√© !**\n\n`;
            resultMessage += `üé¨ **Titre :** ${cleanText(title, 80)}\n`;
            resultMessage += `üì∫ **Cha√Æne :** ${cleanText(author, 50)}\n`;
            
            if (duration) {
                resultMessage += `‚è±Ô∏è **Dur√©e :** ${duration}\n`;
            }
            
            if (viewCount) {
                resultMessage += `üëÄ **Vues :** ${formatNumber(viewCount)}\n`;
            }
            
            resultMessage += `üî¥ **Plateforme :** YouTube\n`;
            resultMessage += `üì± **Demand√© par :** User ${senderId}\n`;
            resultMessage += `üéØ **Qualit√© :** ${format.qualityLabel || format.quality}\n\n`;
            resultMessage += `üíï **T√©l√©charg√© avec amour par NakamaBot !**`;

            // T√âL√âCHARGEMENT ET ENVOI DU M√âDIA
            log.info(`üì§ Tentative d'envoi du m√©dia YouTube...`);
            
            try {
                // Essayer d'envoyer comme vid√©o
                const videoResult = await sendVideoMessage(senderId, format.url, resultMessage);
                
                if (videoResult.success) {
                    addToMemory(senderIdStr, 'assistant', resultMessage);
                    log.info(`‚úÖ Vid√©o YouTube t√©l√©charg√©e avec succ√®s pour ${senderId}`);
                    return { type: 'media_sent', success: true };
                } else {
                    log.warning(`‚ö†Ô∏è √âchec envoi vid√©o YouTube, tentative lien direct...`);
                    throw new Error('Envoi vid√©o √©chou√©');
                }
            } catch (sendError) {
                log.error(`‚ùå Erreur envoi m√©dia YouTube: ${sendError.message}`);
                
                // FALLBACK: Envoyer le lien direct
                const fallbackMsg = `üìé **Lien de t√©l√©chargement YouTube direct :**

üîó ${format.url}

üé¨ **Titre :** ${cleanText(title, 60)}
üì∫ **Cha√Æne :** ${cleanText(author, 40)}
${duration ? `‚è±Ô∏è **Dur√©e :** ${duration}\n` : ''}üéØ **Qualit√© :** ${format.qualityLabel || format.quality}

üì± Cliquez sur le lien pour t√©l√©charger la vid√©o directement !

üí° **Astuce :** Le t√©l√©chargement commencera automatiquement.

üíï **Pr√©par√© avec amour par NakamaBot !**`;

                addToMemory(senderIdStr, 'assistant', fallbackMsg);
                return fallbackMsg;
            }

        } catch (ytdlError) {
            log.error(`‚ùå Erreur YTDL: ${ytdlError.message}`);
            
            // Supprimer du cache en cas d'erreur
            downloadCache.delete(cacheKey);
            
            // MESSAGES D'ERREUR SP√âCIFIQUES YOUTUBE
            let errorMsg = "‚ùå **√âchec du t√©l√©chargement YouTube**\n\n";
            
            if (ytdlError.message.includes('Video unavailable')) {
                errorMsg += "üö´ **Erreur :** Vid√©o non disponible\n";
                errorMsg += "üí° **Causes possibles :**\n";
                errorMsg += "   ‚Ä¢ La vid√©o est priv√©e ou supprim√©e\n";
                errorMsg += "   ‚Ä¢ Restriction g√©ographique\n";
                errorMsg += "   ‚Ä¢ Vid√©o en cours de traitement par YouTube\n";
                errorMsg += "   ‚Ä¢ Probl√®me de droits d'auteur";
            } else if (ytdlError.message.includes('Sign in to confirm your age')) {
                errorMsg += "üîû **Erreur :** V√©rification d'√¢ge requise\n";
                errorMsg += "üí° **Solution :**\n";
                errorMsg += "   ‚Ä¢ Cette vid√©o n√©cessite une connexion YouTube\n";
                errorMsg += "   ‚Ä¢ Essayez avec une autre vid√©o publique";
            } else if (ytdlError.message.includes('This live event has ended')) {
                errorMsg += "üì∫ **Erreur :** Live termin√©\n";
                errorMsg += "üí° **Info :**\n";
                errorMsg += "   ‚Ä¢ Ce live stream est termin√©\n";
                errorMsg += "   ‚Ä¢ Il pourrait √™tre disponible en replay plus tard";
            } else if (ytdlError.message.includes('rate limit') || ytdlError.message.includes('429')) {
                errorMsg += "üö¶ **Erreur :** Limite de taux atteinte\n";
                errorMsg += "üí° **Solutions :**\n";
                errorMsg += "   ‚Ä¢ Trop de requ√™tes r√©centes\n";
                errorMsg += "   ‚Ä¢ Attendez 5-10 minutes avant de r√©essayer\n";
                errorMsg += "   ‚Ä¢ Utilisez `/alldl` comme alternative";
            } else if (ytdlError.message.includes('timeout')) {
                errorMsg += "‚è∞ **Erreur :** D√©lai d'attente d√©pass√©\n";
                errorMsg += "üí° **Solutions :**\n";
                errorMsg += "   ‚Ä¢ La vid√©o est tr√®s longue ou lourde\n";
                errorMsg += "   ‚Ä¢ Les serveurs YouTube sont lents\n";
                errorMsg += "   ‚Ä¢ R√©essayez dans quelques minutes";
            } else if (ytdlError.message.includes('No such file or directory')) {
                errorMsg += "üîß **Erreur :** Probl√®me technique\n";
                errorMsg += "üí° **Info :**\n";
                errorMsg += "   ‚Ä¢ Probl√®me temporaire du syst√®me\n";
                errorMsg += "   ‚Ä¢ Contactez l'administrateur si cela persiste";
            } else {
                errorMsg += `üêõ **Erreur technique :** ${ytdlError.message.substring(0, 100)}\n`;
                errorMsg += "üí° **Solutions g√©n√©rales :**\n";
                errorMsg += "   ‚Ä¢ V√©rifiez que l'URL YouTube est correcte\n";
                errorMsg += "   ‚Ä¢ R√©essayez dans quelques minutes\n";
                errorMsg += "   ‚Ä¢ Utilisez `/alldl` comme alternative\n";
                errorMsg += "   ‚Ä¢ Contactez l'admin si le probl√®me persiste";
            }
            
            errorMsg += `\nüîó **URL test√©e :** ${shortenUrl(url)}`;
            errorMsg += "\nüî¥ **Source :** YouTube Direct";
            errorMsg += "\n\nüÜò Tapez `/help` pour plus d'aide !";

            addToMemory(senderIdStr, 'assistant', errorMsg);
            return errorMsg;
        }

    } catch (error) {
        log.error(`‚ùå Erreur g√©n√©rale ytdl pour ${senderId}: ${error.message}`);
        
        const generalErrorMsg = `üí• **Oups ! Erreur YouTube inattendue**

üêõ Une petite erreur technique s'est produite...

**Solutions possibles :**
‚Ä¢ V√©rifiez que votre URL YouTube est compl√®te et correcte
‚Ä¢ Assurez-vous que la vid√©o est publique et disponible
‚Ä¢ R√©essayez dans quelques instants  
‚Ä¢ Utilisez \`/alldl\` comme m√©thode alternative
‚Ä¢ Contactez l'admin si le probl√®me persiste

üîó **URL :** ${args ? shortenUrl(args) : 'Non fournie'}
üî¥ **M√©thode :** YouTube Direct (ytdl-core)

üíï D√©sol√©e pour ce petit d√©sagr√©ment ! Essayons une autre approche !`;

        addToMemory(senderIdStr, 'assistant', generalErrorMsg);
        return generalErrorMsg;
    }
};

// === FONCTIONS UTILITAIRES YOUTUBE ===

/**
 * Valide si une URL est une URL YouTube valide
 * @param {string} url - URL √† valider
 * @returns {boolean} - True si URL YouTube valide
 */
function isValidYouTubeUrl(url) {
    if (!url || typeof url !== 'string') return false;
    
    const youtubeRegex = /^https?:\/\/(www\.)?(youtube\.com\/(watch\?v=|shorts\/)|youtu\.be\/|music\.youtube\.com\/watch\?v=)[\w-]{11}(\S+)?$/;
    return youtubeRegex.test(url);
}

/**
 * S√©lectionne le meilleur format de t√©l√©chargement
 * @param {Array} formats - Liste des formats disponibles
 * @returns {object} - Meilleur format s√©lectionn√©
 */
function selectBestFormat(formats) {
    if (!formats || formats.length === 0) return null;
    
    // Filtrer les formats avec audio et vid√©o
    const videoFormats = formats.filter(f => 
        f.hasVideo && 
        f.hasAudio && 
        f.url &&
        !f.isLive &&
        f.container !== 'webm' // Pr√©f√©rer MP4
    );
    
    if (videoFormats.length > 0) {
        // Pr√©f√©rer 720p, puis 480p, puis 360p
        const preferred = videoFormats.find(f => f.qualityLabel === '720p') ||
                         videoFormats.find(f => f.qualityLabel === '480p') ||
                         videoFormats.find(f => f.qualityLabel === '360p') ||
                         videoFormats[0];
        return preferred;
    }
    
    // Si pas de format vid√©o+audio, prendre audio seul
    const audioFormats = formats.filter(f => 
        f.hasAudio && 
        !f.hasVideo && 
        f.url
    );
    
    if (audioFormats.length > 0) {
        return audioFormats.find(f => f.audioBitrate) || audioFormats[0];
    }
    
    // En dernier recours, prendre le premier format disponible
    return formats.find(f => f.url) || null;
}

/**
 * Formate la dur√©e en secondes en format lisible
 * @param {string|number} seconds - Dur√©e en secondes
 * @returns {string} - Dur√©e format√©e
 */
function formatDuration(seconds) {
    if (!seconds) return null;
    
    const sec = parseInt(seconds);
    const hours = Math.floor(sec / 3600);
    const minutes = Math.floor((sec % 3600) / 60);
    const remainingSeconds = sec % 60;
    
    if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    } else {
        return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
}

/**
 * Formate un nombre pour l'affichage
 * @param {string|number} num - Nombre √† formater
 * @returns {string} - Nombre format√©
 */
function formatNumber(num) {
    if (!num) return '0';
    
    const number = parseInt(num);
    if (number >= 1000000) {
        return (number / 1000000).toFixed(1) + 'M';
    } else if (number >= 1000) {
        return (number / 1000).toFixed(1) + 'K';
    }
    return number.toString();
}

/**
 * Raccourcit une URL pour l'affichage
 * @param {string} url - URL compl√®te
 * @returns {string} - URL raccourcie
 */
function shortenUrl(url) {
    if (!url) return 'URL manquante';
    return url.length > 60 ? url.substring(0, 60) + '...' : url;
}

/**
 * Nettoie le texte des caract√®res sp√©ciaux probl√©matiques
 * @param {string} text - Texte √† nettoyer
 * @param {number} maxLength - Longueur maximale
 * @returns {string} - Texte nettoy√©
 */
function cleanText(text, maxLength = 100) {
    if (!text) return 'Non disponible';
    
    return text
        .replace(/[^\w\s\-\.,!?()\[\]]/g, '') // Enlever les caract√®res sp√©ciaux
        .substring(0, maxLength)
        .trim();
}

/**
 * Nettoie le cache des entr√©es expir√©es
 */
function cleanExpiredCache() {
    const now = Date.now();
    const expiredKeys = [];
    
    for (const [key, entry] of downloadCache.entries()) {
        if (now - entry.timestamp > CACHE_DURATION) {
            expiredKeys.push(key);
        }
    }
    
    expiredKeys.forEach(key => downloadCache.delete(key));
    
    if (expiredKeys.length > 0) {
        console.log(`üßπ Cache YouTube nettoy√©: ${expiredKeys.length} entr√©es expir√©es supprim√©es`);
    }
}

/**
 * Obtient les statistiques du cache
 */
function getCacheStats() {
    const now = Date.now();
    let activeEntries = 0;
    let expiredEntries = 0;
    
    for (const [key, entry] of downloadCache.entries()) {
        if (now - entry.timestamp <= CACHE_DURATION) {
            activeEntries++;
        } else {
            expiredEntries++;
        }
    }
    
    return {
        total: downloadCache.size,
        active: activeEntries,
        expired: expiredEntries
    };
}

/**
 * Fonction pour envoyer une vid√©o (√† adapter selon votre syst√®me)
 * @param {string} recipientId - ID du destinataire
 * @param {string} videoUrl - URL de la vid√©o
 * @param {string} caption - L√©gende
 * @returns {object} - R√©sultat de l'envoi
 */
async function sendVideoMessage(recipientId, videoUrl, caption = "") {
    const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
    
    if (!PAGE_ACCESS_TOKEN) {
        return { success: false, error: "No token" };
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: {
            attachment: {
                type: "video",
                payload: {
                    url: videoUrl,
                    is_reusable: false // YouTube URLs changent souvent
                }
            }
        }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 45000 // 45 secondes pour YouTube
            }
        );
        
        if (response.status === 200) {
            // Envoyer la l√©gende s√©par√©ment si fournie
            if (caption && typeof sendMessage === 'function') {
                await new Promise(resolve => setTimeout(resolve, 1500)); // Attendre 1.5s
                return await sendMessage(recipientId, caption);
            }
            return { success: true };
        } else {
            return { success: false, error: `API Error ${response.status}` };
        }
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// === AUTO-DOWNLOAD HANDLER YOUTUBE ===

/**
 * Fonction pour g√©rer l'auto-t√©l√©chargement YouTube
 * @param {string} senderId - ID de l'utilisateur
 * @param {string} messageText - Texte du message
 * @param {object} ctx - Contexte
 */
async function handleYouTubeAutoDownload(senderId, messageText, ctx) {
    const senderIdStr = String(senderId);
    
    // V√©rifier si l'auto-download YouTube est activ√© pour cet utilisateur
    if (!autoDownloadSettings.get(senderIdStr)) return false;
    
    // Chercher des URLs YouTube dans le message
    const youtubeRegex = /(https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/shorts\/|music\.youtube\.com\/watch\?v=)[\w-]{11}(?:\S+)?)/gi;
    const urls = messageText.match(youtubeRegex);
    
    if (urls && urls.length > 0) {
        const url = urls[0]; // Prendre la premi√®re URL YouTube trouv√©e
        
        try {
            ctx.log.info(`üî¥ Auto-t√©l√©chargement YouTube d√©clench√© pour ${senderId}: ${url.substring(0, 50)}...`);
            
            // Ex√©cuter la commande ytdl automatiquement
            await module.exports(senderId, url, ctx);
            return true;
        } catch (error) {
            ctx.log.warning(`‚ö†Ô∏è Erreur auto-download YouTube pour ${senderId}: ${error.message}`);
        }
    }
    
    return false;
}

// Export des fonctions utilitaires
module.exports.handleYouTubeAutoDownload = handleYouTubeAutoDownload;
module.exports.autoDownloadSettings = autoDownloadSettings;
module.exports.isValidYouTubeUrl = isValidYouTubeUrl;
module.exports.downloadCache = downloadCache;
module.exports.getCacheStats = getCacheStats;
module.exports.cleanExpiredCache = cleanExpiredCache;
module.exports.selectBestFormat = selectBestFormat;
