const ytdl = require('ytdl-core');
const axios = require('axios');

// Cache pour √©viter les doublons
const downloadCache = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes
const autoDownloadSettings = new Map();

module.exports = async function cmdYouTubeDl(senderId, args, ctx) {
    const { log, sendMessage, addToMemory, isAdmin } = ctx;
    const senderIdStr = String(senderId);
    
    try {
        // Afficher l'aide si aucun argument
        if (!args?.trim()) {
            const helpMsg = `üî¥ **T√©l√©chargeur YouTube YTDL**

üìó **Usage :** \`/ytdl [URL_YOUTUBE]\`

**URLs support√©es :**
‚Ä¢ \`https://www.youtube.com/watch?v=...\`
‚Ä¢ \`https://youtu.be/...\`
‚Ä¢ \`https://www.youtube.com/shorts/...\`

**Commandes admin :**
‚Ä¢ \`/ytdl on\` - Active l'auto-t√©l√©chargement
‚Ä¢ \`/ytdl off\` - D√©sactive l'auto-t√©l√©chargement

üí° **Exemple :** \`/ytdl https://www.youtube.com/watch?v=dQw4w9WgXcQ\``;

            addToMemory(senderIdStr, 'user', args || '/ytdl');
            addToMemory(senderIdStr, 'assistant', helpMsg);
            return helpMsg;
        }

        const command = args.trim().toLowerCase();

        // Gestion des param√®tres auto-download (Admin seulement)
        if (command === 'on' || command === 'off') {
            if (!isAdmin(senderId)) {
                const noPermMsg = "üö´ Seuls les administrateurs peuvent modifier l'auto-t√©l√©chargement !";
                addToMemory(senderIdStr, 'user', args);
                addToMemory(senderIdStr, 'assistant', noPermMsg);
                return noPermMsg;
            }

            const isEnabled = command === 'on';
            autoDownloadSettings.set(senderIdStr, isEnabled);
            
            const statusMsg = `üîß Auto-t√©l√©chargement YouTube ${isEnabled ? '**activ√©**' : '**d√©sactiv√©**'} !`;
            addToMemory(senderIdStr, 'user', args);
            addToMemory(senderIdStr, 'assistant', statusMsg);
            log.info(`üîß Auto-download YouTube ${isEnabled ? 'activ√©' : 'd√©sactiv√©'} pour ${senderId}`);
            return statusMsg;
        }

        // Validation de l'URL YouTube
        const url = args.trim();
        if (!isValidYouTubeUrl(url)) {
            const invalidMsg = `‚ùå **URL YouTube invalide !**

üìù **Formats accept√©s :**
‚Ä¢ \`https://www.youtube.com/watch?v=VIDEO_ID\`
‚Ä¢ \`https://youtu.be/VIDEO_ID\`
‚Ä¢ \`https://www.youtube.com/shorts/VIDEO_ID\`

üí° **Astuce :** Copiez l'URL directement depuis YouTube !`;

            addToMemory(senderIdStr, 'user', args);
            addToMemory(senderIdStr, 'assistant', invalidMsg);
            return invalidMsg;
        }

        // V√©rification des doublons
        const cacheKey = `${senderIdStr}_${url}`;
        const now = Date.now();
        cleanExpiredCache();
        
        if (downloadCache.has(cacheKey)) {
            const cacheEntry = downloadCache.get(cacheKey);
            const timeElapsed = now - cacheEntry.timestamp;
            
            if (timeElapsed < CACHE_DURATION) {
                const remainingTime = Math.ceil((CACHE_DURATION - timeElapsed) / 1000);
                const duplicateMsg = `üîÑ **T√©l√©chargement r√©cent d√©tect√© !**

‚ö†Ô∏è Vous avez d√©j√† t√©l√©charg√© cette vid√©o r√©cemment.
‚è±Ô∏è Vous pourrez la t√©l√©charger √† nouveau dans **${remainingTime} secondes**.`;

                log.debug(`üîÑ Doublon YouTube √©vit√© pour ${senderId}: ${shortenUrl(url)}`);
                addToMemory(senderIdStr, 'user', args);
                addToMemory(senderIdStr, 'assistant', duplicateMsg);
                return duplicateMsg;
            }
        }

        // Message de chargement
        const loadingMsg = `‚è≥ **T√©l√©chargement YouTube en cours...**

üìó URL: ${shortenUrl(url)}
üî¥ Extraction des informations vid√©o...`;

        addToMemory(senderIdStr, 'user', args);
        await sendMessage(senderId, loadingMsg);

        // Validation et extraction des infos
        if (!ytdl.validateURL(url)) {
            throw new Error('URL YouTube invalide selon ytdl-core');
        }

        log.info(`üì° Extraction infos YouTube: ${shortenUrl(url)}`);
        
        // Options ytdl am√©lior√©es pour √©viter l'erreur 410
        const ytdlOptions = {
            filter: 'audioandvideo',
            quality: 'highest',
            highWaterMark: 1 << 25, // √âvite les coupures
            requestOptions: {
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
            }
        };

        const info = await ytdl.getInfo(url, ytdlOptions);
        
        if (!info?.videoDetails) {
            throw new Error('Impossible d\'obtenir les informations de la vid√©o');
        }

        const videoDetails = info.videoDetails;
        const title = videoDetails.title;
        const author = videoDetails.author?.name || videoDetails.ownerChannelName;
        const duration = formatDuration(videoDetails.lengthSeconds);
        const viewCount = formatNumber(videoDetails.viewCount);

        log.info(`‚úÖ Infos extraites: "${title}" par ${author}`);

        // S√©lection du meilleur format (corrig√© pour √©viter 410)
        const format = selectBestFormat(info.formats);
        
        if (!format?.url) {
            throw new Error('Aucun format de t√©l√©chargement disponible');
        }

        log.info(`üé¨ Format s√©lectionn√©: ${format.qualityLabel || format.quality} (${format.container || 'unknown'})`);

        // Ajouter au cache
        downloadCache.set(cacheKey, {
            timestamp: now,
            title: title,
            author: author,
            videoId: videoDetails.videoId
        });

        // Message de r√©sultat
        const resultMessage = `‚úÖ **T√©l√©chargement YouTube termin√© !**

üé¨ **Titre :** ${cleanText(title, 80)}
üì∫ **Cha√Æne :** ${cleanText(author, 50)}
${duration ? `‚è±Ô∏è **Dur√©e :** ${duration}\n` : ''}${viewCount ? `üëÄ **Vues :** ${viewCount}\n` : ''}üéØ **Qualit√© :** ${format.qualityLabel || format.quality}
üì± **Demand√© par :** User ${senderId}

üíï **T√©l√©charg√© avec amour par NakamaBot !**`;

        // T√©l√©chargement et envoi
        try {
            log.info(`üì§ Tentative d'envoi du m√©dia YouTube...`);
            
            const videoResult = await sendVideoMessage(senderId, format.url, resultMessage, ctx);
            
            if (videoResult.success) {
                addToMemory(senderIdStr, 'assistant', resultMessage);
                log.info(`‚úÖ Vid√©o YouTube t√©l√©charg√©e avec succ√®s pour ${senderId}`);
                return { type: 'media_sent', success: true };
            } else {
                throw new Error('Envoi vid√©o √©chou√©');
            }
        } catch (sendError) {
            log.warn(`‚ö†Ô∏è √âchec envoi vid√©o YouTube: ${sendError.message}`);
            
            // Fallback: envoyer le lien direct
            const fallbackMsg = `üîó **Lien de t√©l√©chargement YouTube direct :**

üìó ${format.url}

üé¨ **Titre :** ${cleanText(title, 60)}
üì∫ **Cha√Æne :** ${cleanText(author, 40)}
${duration ? `‚è±Ô∏è **Dur√©e :** ${duration}\n` : ''}üéØ **Qualit√© :** ${format.qualityLabel || format.quality}

üì± Cliquez sur le lien pour t√©l√©charger la vid√©o !`;

            addToMemory(senderIdStr, 'assistant', fallbackMsg);
            return fallbackMsg;
        }

    } catch (ytdlError) {
        log.error(`‚ùå Erreur YTDL pour ${senderId}: ${ytdlError.message}`);
        
        // Supprimer du cache en cas d'erreur
        const cacheKey = `${senderIdStr}_${args?.trim()}`;
        downloadCache.delete(cacheKey);
        
        let errorMsg = "‚ùå **√âchec du t√©l√©chargement YouTube**\n\n";
        
        if (ytdlError.statusCode === 410 || ytdlError.message.includes('410')) {
            errorMsg += "üö´ **Erreur 410 :** La ressource n'est plus disponible\n";
            errorMsg += "üí° **Solutions :**\n";
            errorMsg += "   ‚Ä¢ Le format demand√© a expir√© (YouTube change souvent les URLs)\n";
            errorMsg += "   ‚Ä¢ R√©essayez dans quelques secondes\n";
            errorMsg += "   ‚Ä¢ Utilisez `/alldl` comme alternative";
        } else if (ytdlError.message.includes('Video unavailable')) {
            errorMsg += "üö´ **Erreur :** Vid√©o non disponible\n";
            errorMsg += "   ‚Ä¢ La vid√©o est priv√©e, supprim√©e ou restreinte\n";
            errorMsg += "   ‚Ä¢ Restriction g√©ographique possible";
        } else if (ytdlError.message.includes('Sign in to confirm')) {
            errorMsg += "üîû **Erreur :** V√©rification d'√¢ge requise\n";
            errorMsg += "   ‚Ä¢ Cette vid√©o n√©cessite une connexion YouTube";
        } else if (ytdlError.message.includes('rate limit') || ytdlError.message.includes('429')) {
            errorMsg += "üö¶ **Erreur :** Limite de taux atteinte\n";
            errorMsg += "   ‚Ä¢ Attendez 5-10 minutes avant de r√©essayer";
        } else {
            errorMsg += `üêõ **Erreur technique :** ${ytdlError.message.substring(0, 100)}\n`;
            errorMsg += "üí° **Solutions g√©n√©rales :**\n";
            errorMsg += "   ‚Ä¢ V√©rifiez l'URL YouTube\n";
            errorMsg += "   ‚Ä¢ R√©essayez dans quelques minutes\n";
            errorMsg += "   ‚Ä¢ Utilisez `/alldl` comme alternative";
        }
        
        errorMsg += `\nüìó **URL test√©e :** ${shortenUrl(args?.trim())}`;

        addToMemory(senderIdStr, 'assistant', errorMsg);
        return errorMsg;
    }
};

// === FONCTIONS UTILITAIRES ===

function isValidYouTubeUrl(url) {
    if (!url || typeof url !== 'string') return false;
    const youtubeRegex = /^https?:\/\/(www\.)?(youtube\.com\/(watch\?v=|shorts\/)|youtu\.be\/)[\w-]{11}(\S+)?$/;
    return youtubeRegex.test(url);
}

function selectBestFormat(formats) {
    if (!formats?.length) return null;
    
    // Filtrer les formats valides avec audio et vid√©o
    const validFormats = formats.filter(f => 
        f.hasVideo && 
        f.hasAudio && 
        f.url &&
        !f.isLive &&
        f.container !== 'webm' // Pr√©f√©rer MP4
    );
    
    if (validFormats.length > 0) {
        // Pr√©f√©rer dans l'ordre: 720p, 480p, 360p, puis le premier disponible
        return validFormats.find(f => f.qualityLabel === '720p') ||
               validFormats.find(f => f.qualityLabel === '480p') ||
               validFormats.find(f => f.qualityLabel === '360p') ||
               validFormats[0];
    }
    
    // Fallback: audio seulement
    const audioFormats = formats.filter(f => f.hasAudio && !f.hasVideo && f.url);
    if (audioFormats.length > 0) {
        return audioFormats.find(f => f.audioBitrate) || audioFormats[0];
    }
    
    // Dernier recours
    return formats.find(f => f.url) || null;
}

function formatDuration(seconds) {
    if (!seconds) return null;
    const sec = parseInt(seconds);
    const hours = Math.floor(sec / 3600);
    const minutes = Math.floor((sec % 3600) / 60);
    const remainingSeconds = sec % 60;
    
    if (hours > 0) {
        return `${hours}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
    }
    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
}

function formatNumber(num) {
    if (!num) return null;
    const number = parseInt(num);
    if (number >= 1000000) return (number / 1000000).toFixed(1) + 'M';
    if (number >= 1000) return (number / 1000).toFixed(1) + 'K';
    return number.toString();
}

function shortenUrl(url) {
    if (!url) return 'URL manquante';
    return url.length > 60 ? url.substring(0, 60) + '...' : url;
}

function cleanText(text, maxLength = 100) {
    if (!text) return 'Non disponible';
    return text.replace(/[^\w\s\-\.,!?()\[\]]/g, '').substring(0, maxLength).trim();
}

function cleanExpiredCache() {
    const now = Date.now();
    const expiredKeys = [];
    
    for (const [key, entry] of downloadCache.entries()) {
        if (now - entry.timestamp > CACHE_DURATION) {
            expiredKeys.push(key);
        }
    }
    
    expiredKeys.forEach(key => downloadCache.delete(key));
    
    if (expiredKeys.length > 0) {
        console.log(`üßπ Cache YouTube nettoy√©: ${expiredKeys.length} entr√©es expir√©es`);
    }
}

async function sendVideoMessage(recipientId, videoUrl, caption = "", ctx) {
    const PAGE_ACCESS_TOKEN = process.env.PAGE_ACCESS_TOKEN;
    
    if (!PAGE_ACCESS_TOKEN) {
        return { success: false, error: "No token" };
    }
    
    const data = {
        recipient: { id: String(recipientId) },
        message: {
            attachment: {
                type: "video",
                payload: {
                    url: videoUrl,
                    is_reusable: false
                }
            }
        }
    };
    
    try {
        const response = await axios.post(
            "https://graph.facebook.com/v18.0/me/messages",
            data,
            {
                params: { access_token: PAGE_ACCESS_TOKEN },
                timeout: 45000
            }
        );
        
        if (response.status === 200) {
            if (caption && ctx.sendMessage) {
                await new Promise(resolve => setTimeout(resolve, 1500));
                await ctx.sendMessage(recipientId, caption);
            }
            return { success: true };
        }
        return { success: false, error: `API Error ${response.status}` };
    } catch (error) {
        return { success: false, error: error.message };
    }
}

// Auto-download handler
async function handleYouTubeAutoDownload(senderId, messageText, ctx) {
    const senderIdStr = String(senderId);
    
    if (!autoDownloadSettings.get(senderIdStr)) return false;
    
    const youtubeRegex = /(https?:\/\/(?:www\.)?(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/shorts\/)[\w-]{11}(?:\S+)?)/gi;
    const urls = messageText.match(youtubeRegex);
    
    if (urls?.length > 0) {
        const url = urls[0];
        try {
            ctx.log.info(`üî¥ Auto-t√©l√©chargement YouTube d√©clench√© pour ${senderId}: ${shortenUrl(url)}`);
            await module.exports(senderId, url, ctx);
            return true;
        } catch (error) {
            ctx.log.warn(`‚ö†Ô∏è Erreur auto-download YouTube: ${error.message}`);
        }
    }
    return false;
}

// Exports
module.exports.handleYouTubeAutoDownload = handleYouTubeAutoDownload;
module.exports.autoDownloadSettings = autoDownloadSettings;
module.exports.isValidYouTubeUrl = isValidYouTubeUrl;
